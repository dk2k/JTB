/* Generated by JTB 1.5.1 */
package grammars.q.syntaxtree;

import grammars.q.Token;
import grammars.q.visitor.IRetVisitor;
import grammars.q.visitor.IRetArguVisitor;
import grammars.q.visitor.IVoidVisitor;
import grammars.q.visitor.IVoidArguVisitor;


/**
 * JTB node class for the production classDeclaration:<br>
 * Corresponding grammar:<br>
 * f0 -> "class"<br>
 * f1 -> className()<br>
 * f2 -> "{"<br>
 * f3 -> ( %0 method()<br>
 * .. .. | %1 instruction() )*<br>
 * f4 -> "}"<br>
 * f5 -> "."<br>
 * f6 -> jc_0()<br>
 * f7 -> < EOF ><br>
 * s: -1372830968<br>
 */
public class classDeclaration implements INode {

  /** Child node 0 */
  public Token f0;

  /** Child node 1 */
  public className f1;

  /** Child node 2 */
  public Token f2;

  /** Child node 3 */
  public NodeListOptional f3;

  /** Child node 4 */
  public Token f4;

  /** Child node 5 */
  public Token f5;

  /** Child node 6 */
  public jc_0 f6;

  /** Child node 7 */
  public Token f7;

  /** The serial version UID */
  private static final long serialVersionUID = 151L;

  /**
   * Constructs the node with all its children nodes.
   *
   * @param n0 - first child node
   * @param n1 - next child node
   * @param n2 - next child node
   * @param n3 - next child node
   * @param n4 - next child node
   * @param n5 - next child node
   * @param n6 - next child node
   * @param n7 - next child node
   */
  public classDeclaration(final Token n0, final className n1, final Token n2, final NodeListOptional n3, final Token n4, final Token n5, final jc_0 n6, final Token n7) {
    f0 = n0;
    f1 = n1;
    f2 = n2;
    f3 = n3;
    f4 = n4;
    f5 = n5;
    f6 = n6;
    f7 = n7;
  }
  /*
   * Visitors accept methods (no -novis option, visitors specification : Void,void,None;VoidArgu,void,A;Ret,R,None;RetArgu,R,A)
   */

  /**
   * Accepts a {@link IRetVisitor} visitor with user return data.
   *
   * @param <R> - the return type parameter
   * @param vis - the visitor
   * @return the user Return data
   */
  @Override
  public <R> R accept(final IRetVisitor<R> vis) {
    return vis.visit(this);
  }

  /**
   * Accepts a {@link IRetArguVisitor} visitor with user return and argument data.
   *
   * @param <R> - the return type parameter
   * @param <A> - The argument 0 type parameter
   * @param vis - the visitor
   * @param argu - the user Argument data
   * @return the user Return data
   */
  @Override
  public <R, A> R accept(final IRetArguVisitor<R, A> vis, final A argu) {
    return vis.visit(this, argu);
  }

  /**
   * Accepts a {@link IVoidVisitor} visitor} visitor with user return data.
   *
   * @param vis - the visitor
   */
  @Override
  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }

  /**
   * Accepts a {@link IVoidArguVisitor} visitor with user argument data.
   *
   * @param <A> - The argument 0 type parameter
   * @param vis - the visitor
   * @param argu - the user Argument data
   */
  @Override
  public <A> void accept(final IVoidArguVisitor<A> vis, final A argu) {
    vis.visit(this, argu);
  }


}
