/* Generated by JTB 1.5.1 */
/*
   A small grammar for testing the (JavaCC) try/catch/finally statements not present in jtbgram.jtb
   TODO test it also with hooks and no inline
*/
options
{
  static = true;
  // Relative path of Java files generated by JavaCC from the JJ file
  OUTPUT_DIRECTORY = "../../../../../target/generated-tests/jj/grammars/tcf";
  // JTB_D = "../../../../../target/generated-tests/jtb/grammars/tcf";
  // JTB_O = "../../../../../target/generated-tests/jtb/grammars/tcf/TcfGrammar.jj";
  // out file (default jtb.out.jj)
  // JTB_P = "grammars.tcf";
  // JTB_VIS = "Void,void,None";
  // JTB_IA = true;
  // inline accepts (default false, but for build.xml)
  // JTB_JD = true;
  // javadoc comments (default false, but for build.xml)
  // JTB_TK = true;
  // store special tokens in NodeTokens (default false, but for build.xml)
  // JTB_TKJJ = true;
  TOKEN_FACTORY = "grammars.tcf.syntaxtree.NodeConstants"; // added by JTB 1.5.1

// print special tokens in JJ file (default false, but for build.xml)
//  JTB_HK = true; // node scope hooks (default false)
//  JTB_NOPLG = true; // no parallel generation (default false)
}

PARSER_BEGIN(TcfGrammar)
package grammars.tcf;

import grammars.tcf.visitor.*;
import grammars.tcf.syntaxtree.*;


public class TcfGrammar {


  /* --- User code --- */

  public static void main(String args[]) {
    System.err.println("TcfGrammar Reading ...");
    new TcfGrammar(System.in);
    try {
      System.err.println("... Parsing ...");
      Start start = TcfGrammar.Start();
      System.err.println("... Parsing OK, now visiting ...");
      DepthFirstVoidVisitor v = new MyVisitor();
      start.accept(v);
      System.err.println("TcfGrammar ending.");
      System.exit(0);
    }
    catch (ParseException e) {
      System.err.print("... Oops! ParseException: ");
      System.err.println(e.getMessage());
      e = null;
      System.err.println("TcfGrammar returning");
      System.err.flush();
      System.exit(-2);
    }
    catch (final Exception e) {
      System.err.println("... Oops! Exception: ");
      e.printStackTrace();
      System.err.println("TcfGrammar exiting");
      System.err.flush();
      System.exit(-1);
    }
  }

  private static void info(final String aMsg) {
    String tk0 = getToken(0).toString();
    String tk1 = getToken(1).toString();
    String ct0 = tk0 == null ? "!null!" : tk0.length() == 0 ? "!empty!" : tk0;
    String ct1 = tk1 == null ? "!null!" : tk1.length() == 0 ? "!empty!" : tk1;
    System.err.println(aMsg + ", current token = " + ct0 + ", next token = " + ct1);
  }
}


/** Tracing visitor, in same file for simplicity; just traces */
class MyVisitor extends DepthFirstVoidVisitor {
  /* --- User code --- */

  /** {@inheritDoc} */
  @Override public void visit(final NodeChoice n) {
    System.err.println("*** Entering visit NodeChoice ***");
    super.visit(n);
    System.err.println("*** Exiting visit NodeChoice ***");
    return;
  }

  /** {@inheritDoc} */
  @Override public void visit(final NodeList n) {
    System.err.println("*** Entering visit NodeList ***");
    super.visit(n);
    System.err.println("*** Exiting visit NodeList ***");
    return;
  }

  /** {@inheritDoc} */
  @Override public void visit(final NodeListOptional n) {
    System.err.println("*** Entering visit NodeListOptional ***");
    super.visit(n);
    System.err.println("*** Exiting visit NodeListOptional ***");
    return;
  }

  /** {@inheritDoc} */
  @Override public void visit(final NodeOptional n) {
    System.err.println("*** Entering visit NodeOptional ***");
    super.visit(n);
    System.err.println("*** Exiting visit NodeOptional ***");
    return;
  }

  /** {@inheritDoc} */
  @Override public void visit(final NodeSequence n) {
    System.err.println("*** Entering visit NodeSequence ***");
    super.visit(n);
    System.err.println("*** Exiting visit NodeSequence ***");
    return;
  }

  /** {@inheritDoc} */
  @Override public void visit(NodeToken n) {
    System.err.println("*** Just visited <" + n.tokenImage + "> ***");
  }

  /** {@inheritDoc} */
  @Override public void visit(Start n) {
    System.err.println("*** Entering visit Start ***");
    super.visit(n);
    System.err.println("*** Exiting visit Start ***");
  }

  /** {@inheritDoc} */
  @Override public void visit(Tcf1 n) {
    System.err.println("*** Entering visit Tcf1 ***");
    super.visit(n);
    System.err.println("*** Exiting visit Tcf1 ***");
  }

  /** {@inheritDoc} */
  @Override public void visit(Tcf2 n) {
    System.err.println("*** Entering visit Tcf2 ***");
    super.visit(n);
    System.err.println("*** Exiting visit Tcf2 ***");
  }

  /** {@inheritDoc} */
  @Override public void visit(Tcf3 n) {
    System.err.println("*** Entering visit Tcf3 ***");
    super.visit(n);
    System.err.println("*** Exiting visit Tcf3 ***");
  }

  //  /** {@inheritDoc} */
  //  @Override
  //  public void visit(Tcf4$ n)
  //  {
  //    System.err.println("*** Entering visit Tcf4$ ***");
  //    super.visit(n);
  //    System.err.println("*** Exiting visit Tcf4$ ***");
  //  }

  /** {@inheritDoc} */
  @Override public void visit(bp_iv1 n) {
    System.err.println("*** Entering visit bp_iv1 ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv1 ***");
  }

  /** {@inheritDoc} */
  @Override public void visit(bp_iv2 n) {
    System.err.println("*** Entering visit bp_iv2 ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv2 ***");
  }

  /** {@inheritDoc} */
  @Override public void visit(bp_iv3 n) {
    System.err.println("*** Entering visit bp_iv3 ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv3 ***");
  }

  /** {@inheritDoc} */
  @Override public void visit(bp_iv3_ n) {
    System.err.println("*** Entering visit bp_iv3_ ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv3_ ***");
  }

  /** {@inheritDoc} */
  @Override public void visit(bp_iv4 n) {
    System.err.println("*** Entering visit bp_iv4 ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv4 ***");
  }

  /** {@inheritDoc} */
  @Override public void visit(bp_iv5 n) {
    System.err.println("*** Entering visit bp_iv5 ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv5 ***");
  }

  /** {@inheritDoc} */
  @Override public void visit(bp_iv6 n) {
    System.err.println("*** Entering visit bp_iv6 ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv6 ***");
  }

  /** {@inheritDoc} */
  @Override public void visit(bp_iv7 n) {
    System.err.println("*** Entering visit bp_iv7 ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv7 ***");
  }

  /** {@inheritDoc} */
  @Override public void visit(Identifier n) {
    System.err.println("*** Entering visit Identifier ***");
    super.visit(n);
    System.err.println("*** Exiting visit Identifier ***");
  }

  /** {@inheritDoc} */
  @Override public void visit(Integer_literal_boum n) {
    System.err.println("*** Entering visit Integer_literal_boum ***");
    super.visit(n);
    System.err.println("*** Exiting visit Integer_literal_boum ***");
  }
}

PARSER_END(TcfGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//"( ~["\n", "\r"] )*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*"( ~["*"] )* "*"( ~["/"]( ~["*"] )* "*" )* "/" >
}

TOKEN :
/* INTEGER_LITERALS */
{
  < INTEGER_LITERAL :
      <DECIMAL>( ["l", "L"] )?
    | <HEX>( ["l", "L"] )?
    | <OCTAL>( ["l", "L"] )?
>
| < #DECIMAL : ["1"-"9"]( ["0"-"9"] )* >
| < #HEX : "0" ["x", "X"]( ["0"-"9", "a"-"f", "A"-"F"] )+ >
| < #OCTAL : "0"( ["0"-"7"] )* >
| < NUM_2$ : ( ["0"-"9"] ){2} ["N", "n"] > /*!*/
| < NUM_3_9 : ( ["0"-"9"] ){3, 9} ["N", "n"] >
}

TOKEN :
/* IDENTIFIERS */
{
  < IDENTIFIER : <LETTER>
    (
      <LETTER>
    | <DIGIT>
    )* >
| < #LETTER : ["_", "a"-"z", "A"-"Z"] >
| < DIGIT : ["0"-"9"] >
}

Start Start() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  Tcf1 n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeSequence n5 = null;
  NodeSequence n6 = null;
  bp_iv1 n7 = null;
  NodeSequence n8 = null;
  bp_iv2 n9 = null;
  NodeChoice n10 = null;
  NodeSequence n11 = null;
  bp_iv3 n12 = null;
  NodeSequence n13 = null;
  bp_iv3_ n14 = null;
  NodeChoice n15 = null;
  NodeSequence n16 = null;
  bp_iv3 n17 = null;
  NodeSequence n18 = null;
  bp_iv4 n19 = null;
  bp_iv5 n20 = null;
  NodeChoice n21 = null;
  NodeSequence n22 = null;
  bp_iv6 n23 = null;
  bp_iv7 n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  Start jtbNode = null;
  // --- user BNFProduction java block ---
  int[] iva = new int[]{ 11 };
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    {
      info("before 1st choice");
    }
{ n1 = new NodeSequence(2); }
    n2 = Tcf1()
    { n1.addNode(n2); }
    {
      info("passed Tcf1()");
    }
        n4 = < EOF >
    { n4.beginColumn++; }
    { n4.endColumn++; }
    { n3 = (NodeToken) n4; }
    { n1.addNode(n3); }
    { n0 = new NodeChoice(n1, 0, 2); }
    {
      info("after 1st EOF");
    }
  |
    {
      System.err.println("nodes will be created or not depending on the input data and differently by JTB and JJT");
    }
{ n5 = new NodeSequence(7); }
    {
      info("before 2nd choice");
    }
    try {
      { n6 = new NodeSequence(1); }
      n7 = bp_iv1(iva)
      { n6.addNode(n7); }
    }
    catch (Exception e) {}
    { n5.addNode(n6); }
    {
      info("passed bp_iv1(iva)");
    }
    try {
      (
        bp_iv1$(1)
      )
    }
    catch (Exception e) {}
    {
      info("passed bp_iv1$(1)");
    }
    try {
      { n8 = new NodeSequence(1); }
      n9 = bp_iv2(iva)
      { n8.addNode(n9); }
      bp_iv2$(2)
    }
    catch (Exception e) {}
    { n5.addNode(n8); }
    {
      info("passed bp_iv2(iva) bp_iv2$(2)");
    }
    try {
      (
        { n11 = new NodeSequence(1); }
        n12 = bp_iv3(iva)
        { n11.addNode(n12); }
        { n10 = new NodeChoice(n11, 0, 2); }
      |
        { n13 = new NodeSequence(1); }
        n14 = bp_iv3_(30)
        { n13.addNode(n14); }
        { n10 = new NodeChoice(n13, 1, 2); }
      )
    }
    catch (Exception e) {}
    { n5.addNode(n10); }
    {
      info("passed bp_iv3(iva) | bp_iv3_(30)");
    }
    try {
      (
        { n16 = new NodeSequence(1); }
        n17 = bp_iv3(iva)
        { n16.addNode(n17); }
        { n15 = new NodeChoice(n16, 0, 2); }
      |
        bp_iv3$(3)
        { n15 = new NodeChoice(null, 1, 2); }
      )
    }
    catch (Exception e) {}
    { n5.addNode(n15); }
    {
      info("passed bp_iv3(iva) | bp_iv3$(3)");
    }
    try {
      { n18 = new NodeSequence(2); }
      n19 = bp_iv4(iva)
      { n18.addNode(n19); }
      bp_iv4$(4)
      n20 = bp_iv5(iva)
      { n18.addNode(n20); }
      bp_iv5$(5)
    }
    catch (Exception e) {}
    { n5.addNode(n18); }
    {
      info("passed bp_iv4(iva) bp_iv4$(4) bp_iv5(iva) bp_iv5$(5)");
    }
    try {
      (
        { n22 = new NodeSequence(2); }
        n23 = bp_iv6(iva)
        { n22.addNode(n23); }
        n24 = bp_iv7(iva)
        { n22.addNode(n24); }
        { n21 = new NodeChoice(n22, 0, 2); }
      |
        bp_iv6$(6)
        bp_iv7$(7)
        { n21 = new NodeChoice(null, 1, 2); }
      )
    }
    catch (Exception e) {}
    { n5.addNode(n21); }
    {
      info("passed bp_iv6(iva) bp_iv7(iva) | bp_iv6$(6) bp_iv7$(7)");
    }
        n26 = < EOF >
    { n26.beginColumn++; }
    { n26.endColumn++; }
    { n25 = (NodeToken) n26; }
    { n5.addNode(n25); }
    {
      info("after 2nd EOF");
    }
    { n0 = new NodeChoice(n5, 1, 2); }
  )
  { jtbNode = new Start(n0); }
  { return jtbNode; }
}

Tcf1 Tcf1() :
// one TCF at first level
{
  // --- JTB generated node declarations ---
  Identifier n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  Identifier n4 = null;
  NodeSequence n5 = null;
  Integer_literal_boum n6 = null;
  Tcf3 n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Tcf1 jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  try {
    {
      System.err.println("--- Tcf1 in try ---");
    }
    // ExpansionChoices with no choice, but with a sequence of 4 nodes
    n0 = Identifier()
    (
      (
        { n3 = new NodeSequence(1); }
        n4 = Identifier()
        { n3.addNode(n4); }
        { n2 = new NodeChoice(n3, 0, 2); }
      |
        { n5 = new NodeSequence(1); }
        n6 = Integer_literal_boum()
        { n5.addNode(n6); }
        { n2 = new NodeChoice(n5, 1, 2); }
      )
      { n1.addNode(n2); }
    )*
    { n1.nodes.trimToSize(); }
    ";"
    {
      System.err.println("--- Tcf1 should not have seen a node ';' ---");
    }
    Tcf2()
    {
      System.err.println("--- Tcf1 should not have seen a node Tcf2 ---");
    }
    n7 = Tcf3()
    {
      System.err.println("--- Tcf1 should have seen a node Tcf3 ---");
    }
  }
  catch (/* final */ NullPointerException npe) {
    System.err.println("--- Tcf1 in catch NPE: swallowed NPE: < " + npe.getMessage() + " >");
  // note that here the node which should have been created by the production that raised the NPE
  //  (Integer_literal_boum()) will not be created and inserted in the tree
  }
  catch (/* @fakeann1 @fakeann2 */ Exception e) {
    System.err.println("--- Tcf1 in catch Ex; could occurr with invalid input; " + e);
    e = null;
  }
  finally {
    System.err.println("--- Tcf1 in finally --- ");
  }
  n9 = "."
  { n8 = (NodeToken) n9; }
  {
    System.err.println("--- Tcf1 should have seen '.' and now returns ---");
  }
  { jtbNode = new Tcf1(n0, n1, n7, n8); }
  { return jtbNode; }
}

Tcf2 Tcf2() :
// nested TCF within a TCF at first level
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  Identifier n2 = null;
  NodeSequence n3 = null;
  NodeSequence n4 = null;
  Integer_literal_boum n5 = null;
  Tcf2 jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  {
    System.err.println("--- Tcf2 before try ---");
  }
  try {
    (
      // ExpansionChoices with choice
      {
        System.err.println("--- Tcf2 in try 1 ---");
      }
{ n1 = new NodeSequence(1); }
      n2 = Identifier()
      { n1.addNode(n2); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      {
        System.err.println("--- Tcf2 in try 2 ---");
      }
{ n3 = new NodeSequence(1); }
      try {
        {
          System.err.println("--- Tcf2 in subtry; should not see a node Integer_literal_boum ---");
        }
{ n4 = new NodeSequence(1); }
        n5 = Integer_literal_boum()
        { n4.addNode(n5); }
      }
      catch (NullPointerException npe) {
        System.err.println("--- Tcf2 in subcatch NPE: swallowed NPE: < " + npe.getMessage() + " >");
      // note that here the node which should have been created by the production that raised the NPE
      //  (Integer_literal_boum()) will not be created and inserted in the tree
      }
      { n0 = new NodeChoice(n3, 1, 2); }
    )
  }
  catch (Exception e) {
    System.err.println("--- Tcf2 in catch Ex; could occurr with invalid input; " + e);
    e = null;
  }
  finally {
    System.err.println("--- Tcf2 in finally --- ");
  }
  { jtbNode = new Tcf2(n0); }
  { return jtbNode; }
}

Tcf3 Tcf3() :
// no catch
{
  // --- JTB generated node declarations ---
  Identifier n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  Integer_literal_boum n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Tcf3 jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  try {
    {
      System.err.println("--- Tcf3 in try ---");
    }
    // ExpansionChoices with no choice, but with a sequence of 4 nodes
    n0 = Identifier()
    {
      System.err.println("--- Tcf3 should not see a node Identifier nor a node Integer_literal_boum ---");
    }
    (
      (
        Identifier()
        { n2 = new NodeChoice(null, 0, 2); }
      |
        { n3 = new NodeSequence(1); }
        n4 = Integer_literal_boum()
        { n3.addNode(n4); }
        { n2 = new NodeChoice(n3, 1, 2); }
      )
      { n1.addNode(n2); }
    )?
    ";"
    {
      System.err.println("--- Tcf3 should not have seen a node ';' ---");
    }
    Tcf4$()
    {
      System.err.println("--- Tcf3 should not have seen a node Tcf4$ ---");
    }
  }
  finally {
    System.err.println("--- Tcf3 in finally --- ");
  }
  n6 = ":"
  { n5 = (NodeToken) n6; }
  {
    System.err.println("--- Tcf3 should have seen ':' and now returns ---");
  }
  { jtbNode = new Tcf3(n0, n1, n5); }
  { return jtbNode; }
}

void Tcf4$ () /*!*/ :
// no finally
{}
{
  try {
    {
      System.err.println("--- Tcf4$ in try ---");
    }
    Identifier()
    {
      System.err.println("--- Tcf4$ should not see a node Identifier nor a node Integer_literal_boum ---");
    }
    (
      Identifier() /*!*/ 
    |
      Integer_literal_boum() /*!*/ 
    )+
    ";"
  } catch (/* final */ NullPointerException npe) {
    // final for code coverage
    System.err.println("--- Tcf4$ in catch NPE: swallowed NPE: < " + npe.getMessage() + " >");
  } catch (/* @fakeann1 @fakeann2 */ Exception e) {
    System.err.println("--- Tcf4$ in catch Ex; could occurr with invalid input; " + e);
    e = null;
  }
}

private bp_iv1 bp_iv1(int[] i) throws IllegalStateException :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  bp_iv1 jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  {
    info("iv1 0");
  }
  n1 = "1*"
  { n0 = (NodeToken) n1; }
  {
    info("iv1 1");
  }
  < NUM_2$ >
    {
    info("iv1 2");
  }
  {
    throw new IllegalStateException("dummy ise 1");
  }
  { jtbNode = new bp_iv1(n0); }
  { return jtbNode; }
}

private void bp_iv1$ (final int i) throws IllegalStateException /*!*/ :
{}
{
  {
    info("iv1$ 0");
  }
  "1$"
  {
    info("iv1$ 1");
  }
  < NUM_3_9 >
  {
    info("iv1$ 2");
  }
  {
    if (i == 1) {
      throw new IllegalStateException("dummy ise 1$");
    }
  }
}

private bp_iv2 bp_iv2(int[] i) throws IllegalStateException :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  bp_iv2 jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  {
    info("iv2 0");
  }
  n1 = "2*"
  { n0 = (NodeToken) n1; }
  {
    info("iv2 1");
  }
  < NUM_2$ >
    {
    info("iv2 2");
  }
  {
    throw new IllegalStateException("dummy ise 2");
  }
  { jtbNode = new bp_iv2(n0); }
  { return jtbNode; }
}

private void bp_iv2$ (final int i) throws IllegalStateException /*!*/ :
{}
{
  {
    info("iv2$ 0");
  }
  "2$"
  {
    info("iv2$ 1");
  }
  < NUM_3_9 >
  {
    info("iv2$ 2");
  }
  {
    if (i == 2) {
      throw new IllegalStateException("dummy ise 2$");
    }
  }
}

private bp_iv3 bp_iv3(int[] i) throws IllegalStateException :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  bp_iv3 jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  {
    info("iv3 0");
  }
  n1 = "3*"
  { n0 = (NodeToken) n1; }
  {
    info("iv3 1");
  }
  < NUM_2$ >
    {
    info("iv3 2");
  }
  {
    throw new IllegalStateException("dummy ise 3");
  }
  { jtbNode = new bp_iv3(n0); }
  { return jtbNode; }
}

private void bp_iv3$ (final int i) throws IllegalStateException /*!*/ :
{}
{
  {
    info("iv3$ 0");
  }
  "3$"
  {
    info("iv3$ 1");
  }
  < NUM_3_9 >
  {
    info("iv3$ 2");
  }
  {
    if (i == 3) {
      throw new IllegalStateException("dummy ise 3$");
    }
  }
}

private bp_iv3_ bp_iv3_(final int i) throws IllegalStateException :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  bp_iv3_ jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  {
    info("iv3_ 0");
  }
  n1 = "3_"
  { n0 = (NodeToken) n1; }
  {
    info("iv3_ 1");
  }
  n3 = < NUM_3_9 >
  { n2 = (NodeToken) n3; }
  {
    info("iv3_ 2");
  }
  {
    if (i == 3) {
      throw new IllegalStateException("dummy ise 3_");
    }
  }
  { jtbNode = new bp_iv3_(n0, n2); }
  { return jtbNode; }
}

private bp_iv4 bp_iv4(int[] i) throws IllegalStateException :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  bp_iv4 jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  {
    info("iv4 0");
  }
  n1 = "4*"
  { n0 = (NodeToken) n1; }
  {
    info("iv4 1");
  }
  < NUM_2$ >
    {
    info("iv4 2");
  }
  {
    throw new IllegalStateException("dummy ise 4");
  }
  { jtbNode = new bp_iv4(n0); }
  { return jtbNode; }
}

private void bp_iv4$ (final int i) throws IllegalStateException /*!*/ :
{}
{
  {
    info("iv4$ 0");
  }
  "4$"
  {
    info("iv4$ 1");
  }
  < NUM_3_9 >
  {
    info("iv4$ 2");
  }
  {
    if (i == 4) {
      throw new IllegalStateException("dummy ise 4$");
    }
  }
}

private bp_iv5 bp_iv5(int[] i) throws IllegalStateException :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  bp_iv5 jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  {
    info("iv5 0");
  }
  n1 = "5*"
  { n0 = (NodeToken) n1; }
  {
    info("iv5 1");
  }
  < NUM_2$ >
    {
    info("iv5 2");
  }
  {
    throw new IllegalStateException("dummy ise 5");
  }
  { jtbNode = new bp_iv5(n0); }
  { return jtbNode; }
}

private void bp_iv5$ (final int i) throws IllegalStateException /*!*/ :
{}
{
  {
    info("iv5$ 0");
  }
  "5$"
  {
    info("iv5$ 1");
  }
  < NUM_3_9 >
  {
    info("iv5$ 2");
  }
  {
    if (i == 5) {
      throw new IllegalStateException("dummy ise 5$");
    }
  }
}

private bp_iv6 bp_iv6(int[] i) throws IllegalStateException :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  bp_iv6 jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  {
    info("iv6 0");
  }
  n1 = "6*"
  { n0 = (NodeToken) n1; }
  {
    info("iv6 1");
  }
  < NUM_2$ >
    {
    info("iv6 2");
  }
  {
    throw new IllegalStateException("dummy ise 6");
  }
  { jtbNode = new bp_iv6(n0); }
  { return jtbNode; }
}

private void bp_iv6$ (final int i) throws IllegalStateException /*!*/ :
{}
{
  {
    info("iv6$ 0");
  }
  "6$"
  {
    info("iv6$ 1");
  }
  < NUM_3_9 >
  {
    info("iv6$ 2");
  }
  {
    if (i == 6) {
      throw new IllegalStateException("dummy ise 6$");
    }
  }
}

private bp_iv7 bp_iv7(int[] i) throws IllegalStateException :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  bp_iv7 jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  {
    info("iv7 0");
  }
  n1 = "7*"
  { n0 = (NodeToken) n1; }
  {
    info("iv7 1");
  }
  < NUM_2$ >
    {
    info("iv7 2");
  }
  {
    throw new IllegalStateException("dummy ise 7");
  }
  { jtbNode = new bp_iv7(n0); }
  { return jtbNode; }
}

private void bp_iv7$ (final int i) throws IllegalStateException /*!*/ :
{}
{
  {
    info("iv7$ 0");
  }
  "7$"
  {
    info("iv7$ 1");
  }
  < NUM_3_9 >
  {
    info("iv7$ 2");
  }
  {
    if (i == 7) {
      throw new IllegalStateException("dummy ise 7$");
    }
  }
}

Identifier Identifier() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier jtbNode = null;
  // --- user BNFProduction java block ---
  Token tk = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = < IDENTIFIER >
  { n0 = (NodeToken) n1; }
  { tk = n1; }
  {
    System.err.println("--- Identifier found < " + tk.image + " > ---");
  }
  { jtbNode = new Identifier(n0); }
  { return jtbNode; }
}

Integer_literal_boum Integer_literal_boum() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Integer_literal_boum jtbNode = null;
  // --- user BNFProduction java block ---
  Token tk = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = < INTEGER_LITERAL >
  { n0 = (NodeToken) n1; }
  { tk = n1; }
  {
    System.err.println("--- Integer_literal_boum found < " + tk.image + " >; throwing boum ---");
    throw new NullPointerException("boum");
  }
  { jtbNode = new Integer_literal_boum(n0); }
  { return jtbNode; }
}

// dummy, not used, just for overall code coverage
JAVACODE void justSkip() throws IllegalStateException
{
  Token tk = getNextToken();
  throw new IllegalStateException();
}
