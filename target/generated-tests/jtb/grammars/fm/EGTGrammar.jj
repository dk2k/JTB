/* Generated by JTB 1.5.1 */
options
{
  STATIC = false;
  IGNORE_CASE = true;
  OUTPUT_DIRECTORY = "../../../../../target/generated-tests/jj/grammars/fm";
  // JTB_D = "../../../../../target/generated-tests/jtb/grammars/fm";
  // JTB_P = "grammars.fm";
  // JTB_O = "../../../../../target/generated-tests/jtb/grammars/fm/EGTGrammar.jj";
  // JTB_EG = "EDU.purdue.jtb.freemarker.egt.ExternalGeneratorTester";
  // JTB_VIS = "Void,void,None;Vis2,int,java.lang.String";
  // JTB_TK = true;
  // JTB_TKJJ = true;
  // JTB_JD = false;
}

PARSER_BEGIN(EGTGrammar)
package grammars.fm;

import grammars.fm.visitor.*;
import grammars.fm.syntaxtree.*;


public class EGTGrammar {


  /* --- User code --- */

  public static void main(String args[]) {
    System.err.flush();
    System.out.println("EGTGrammar Reading...");
    EGTGrammar egtg = new EGTGrammar(System.in);
    try {
      System.out.println("... Parsing...");
      classDeclaration cd = egtg.classDeclaration();
      IVis2Visitor v = new DepthFirstVis2Visitor();
      System.out.println("... Visiting...");
      int rc = cd.accept(v, "  ");
      System.out.println("EGTGrammar ended.");
      System.exit(0);
    }
    catch (final Exception e) {
      System.out.flush();
      System.err.println("Oops!");
      System.err.println(e.getMessage());
      System.exit(-1);
    }
  }
}

PARSER_END(EGTGrammar)

classDeclaration classDeclaration() :
{
  // --- JTB generated node declarations ---
  skip n0 = null;
  Token n1 = null;
  Token n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  method n4 = null;
  Token n5 = null;
  Token n6 = null;
  Token n7 = null;
  classDeclaration jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = skip()
  n1 = "class"
  className()
  n2 = "{"
  (
    n4 = method()
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  n5 = "}"
  n6 = "."
    n7 = < EOF >
  { n7.beginColumn++; }
  { n7.endColumn++; }
  { jtbNode = new classDeclaration(n0, n1, n2, n3, n5, n6, n7); }
  { return jtbNode; }
}

className className() :
{
  // --- JTB generated node declarations ---
  Token n0 = null;
  className jtbNode = null;
  // --- user BNFProduction java block ---
  char b, e = '\u0000';
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = < ID >
  {
    b = '\b';
  }
  { jtbNode = new className(n0); }
  { return jtbNode; }
}

method method() :
{
  // --- JTB generated node declarations ---
  methodName n0 = null;
  Token n1 = null;
  NodeList n2 = new NodeList();
  instruction n3 = null;
  Token n4 = null;
  method jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = methodName()
  n1 = "("
  (
    n3 = instruction()
    { n2.addNode(n3); }
  )+
  { n2.nodes.trimToSize(); }
  n4 = ")"
  { jtbNode = new method(n0, n1, n2, n4); }
  { return jtbNode; }
}

methodName methodName() :
{
  // --- JTB generated node declarations ---
  Token n0 = null;
  methodName jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = < ID >
  { jtbNode = new methodName(n0); }
  { return jtbNode; }
}

instruction instruction() :
{
  // --- JTB generated node declarations ---
  Token n0 = null;
  Token n1 = null;
  instruction jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = < ID >
  n1 = ";"
  { jtbNode = new instruction(n0, n1); }
  { return jtbNode; }
}

JAVACODE skip skip() /*%*/ 
{
  Token tk = getNextToken();
  return new skip();
}

TOKEN :
{
  < A_BS_B : "a\bb" >
| < ES : "\u00c3\u00a9\u00c3\u00a8\u00c3\u00aa" >
| < SYN_ESC : "\u0016\u001b" >
| < ID : ( ["a"-"z", "A"-"Z", "0"-"9"] )+ >
}

SKIP :
{
  < WS : 
    (
      " "
    | "\t"
    | "\n"
    | "\r"
    ) >
}

