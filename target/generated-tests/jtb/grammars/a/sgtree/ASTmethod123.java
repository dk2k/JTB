/* Generated by JTB 1.5.1 */
package grammars.a.sgtree;

import java.util.ArrayList;
import java.util.List;
import grammars.a.Token;
import grammars.a.sgvis.IVis2Visitor;
import grammars.a.sgvis.IVoidVisitor;


@SuppressWarnings("javadoc")
public class ASTmethod123 implements INode {

  public ASTmethodName123 methodName;

  public Token token;

  public NodeList nodeList;

  public Token token1;

  private INode parent;

  private static final long serialVersionUID = 151L;

  public ASTmethod123(final ASTmethodName123 n0, final Token n1, final NodeList n2, final Token n3) {
    methodName = n0;
    if (methodName != null)
      methodName.setParent(this);
    token = n1;
    if (token != null)
      token.setParent(this);
    nodeList = n2;
    if (nodeList != null)
      nodeList.setParent(this);
    token1 = n3;
    if (token1 != null)
      token1.setParent(this);
  }
  /*
   * Visitors accept methods (no -novis option, visitors specification : Void,void,None;Vis2,R,A,int[],short...)
   */

  @Override
  public <R, A> R accept(final IVis2Visitor<R, A> vis, final A argu, final int[] argu1, final short... argu2) {
    return vis.visit(this, argu, argu1, argu2);
  }

  @Override
  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }

  /*
   * Parent pointer getter and setter (-pp option)
   */

  @Override
  public INode getParent() {
    return parent;
  }

  @Override
  public void setParent(final INode n) {
    parent = n;
  }

  /*
   * Children methods (-chm option)
   */

  private List<INode> lac = null;

  private List<INode> lbc = null;

  private List<INode> luc = null;

  @Override
  public boolean isBaseNode() {
    return false;
  }


  @Override
  public int getNbAllChildren() {
    return 4;
  }

  @Override
  public int getNbBaseChildren() {
    return 1;
  }

  @Override
  public int getNbUserChildren() {
    return 3;
  }

  @Override
  public List<INode> getAllChildren() {
    if (lac == null) {
      lac = new ArrayList<>(4);
      lac.add(methodName);
      lac.add(token);
      lac.add(nodeList);
      lac.add(token1);
    }
    return lac;
  }

  @Override
  public List<INode> getBaseChildren() {
    if (lbc == null) {
      lbc = new ArrayList<>(1);
      lbc.add(nodeList);
    }
    return lbc;
  }

  @Override
  public List<INode> getUserChildren() {
    if (luc == null) {
      luc = new ArrayList<>(3);
      luc.add(methodName);
      luc.add(token);
      luc.add(token1);
    }
    return luc;
  }

}
