/* Generated by JTB 1.5.1 */
package examples.java.ex3jtb.syntaxtree;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.List;
import examples.java.ex3jtb.visitor.IGenVisitor;

import examples.java.ex3jtb.Token;

/**
 * Represents a single token in the grammar.<br>
 * If the "-tk" option is used, also contains a ArrayList of preceding special tokens.<br>
 * The class stores the token image, kind and position information, and the special tokens list.<br>
 */
public class NodeToken extends Token implements INode {

  /** The token image */
  public String tokenImage;

 /** The list of special tokens */
 public List<NodeToken> specialTokens;

  /** The parent node */
  private INode parent;

  /** The serial version UID */
  private static final long serialVersionUID = 151L;

  /**
   * Initializes a {@link NodeToken} with a given kind.
   *
   * @param aKind - the token kind
   */
  public NodeToken(final int aKind) {
    this(aKind, null);
  }

  /**
   * Initializes a {@link NodeToken} with a given kind and image.
   *
   * @param aKind - the token kind
   * @param aImage - the token image
   */
  public NodeToken(final int aKind, final String aImage) {
    kind = aKind;
    tokenImage = image = aImage;
  }

  /**
   * @return the token image
   */
  @Override
  public String toString() {
    return tokenImage;
  }

  /**
  * Gets the special token in the special tokens list at a given position.
  *
  * @param i - the special token's position
  * @return the special token
  */
  public NodeToken getSpecialAt(final int i) {
    if (specialTokens == null)
      throw new NoSuchElementException("No specialTokens in token"); //$NON-NLS-1$
    return specialTokens.get(i);
  }

  /**
  * @return the number of special tokens
  */
  public int numSpecials() {
    if (specialTokens == null)
      return 0;
    return specialTokens.size();
  }

  /**
  * Adds a special token to the special tokens list.
  *
  * @param s - the special token to add
  */
  public void addSpecial(final NodeToken s) {
    if (specialTokens == null)
     specialTokens = new ArrayList<>();
    specialTokens.add(s);
  s.setParent(this);
  }

  /**
  * Trims the special tokens list.
  */
  public void trimSpecials() {
    if (specialTokens == null)
      return;
    ((ArrayList<NodeToken>) specialTokens).trimToSize();
  }

  /**
  * Returns the string of the special tokens of the current {@link NodeToken},
  * taking in account a given indentation.
  * @param spc - the indentation
  * @return the string representing the special tokens list
  */
  public String getSpecials(final String spc) {
    if (specialTokens == null)
      return ""; //$NON-NLS-1$
    int stLastLine = -1;
    final StringBuilder buf = new StringBuilder(64);
    boolean hasEol = false;
    for (final Iterator<NodeToken> e = specialTokens.iterator(); e.hasNext();) {
      final NodeToken st = e.next();
      final char c = st.tokenImage.charAt(st.tokenImage.length() - 1);
      hasEol = c == '\n' || c == '\r';
      if (stLastLine != -1)
        // not first line 
        if (stLastLine != st.beginLine) {
          // if not on the same line as the previous
          for (int i = stLastLine + 1; i < st.beginLine; i++)
            // keep blank lines
          buf.append(LS);
          buf.append(spc);
        } else
          // on the same line as the previous
          buf.append(' ');
      buf.append(st.tokenImage);
      if (!hasEol && e.hasNext())
        // not a single line comment and not the last one
        buf.append(LS);
      stLastLine = st.endLine;
    }
    // keep the same number of blank lines before the current non special
    for (int i = stLastLine + (hasEol ? 1 : 0); i < beginLine; i++) {
      buf.append(LS);
      if (i != beginLine - 1)
      buf.append(spc);
    }
    // indent if the current non special is not on the same line
    if (stLastLine != beginLine)
      buf.append(spc);
    return buf.toString();
  }

  /**
  * Returns the string of the special tokens and the normal token of the current {@link NodeToken},
  * taking in account a given indentation.
  *
  * @param spc - the indentation
  * @return the string representing the special tokens list and the token
  */
  public String withSpecials(final String spc) {
    return withSpecials(spc, null);
  }

  /**
  * Returns the string of the special tokens and the normal token of the current {@link NodeToken},
  * taking in account a given indentation and a given assignment.
  *
  * @param spc - the indentation
  * @param var - the variable assignment to be inserted
  * @return the string representing the special tokens list and the token
  */
  public String withSpecials(final String spc, final String var) {
    final String specials = getSpecials(spc);
    int len = specials.length() + 1;
    if (len == 1)
      return (var == null ? tokenImage : var + tokenImage);
    if (var != null)
      len += var.length();
    StringBuilder buf = new StringBuilder(len + tokenImage.length());
    buf.append(specials);
    // see if needed to add a space
    int stLastLine = -1;
    if (specialTokens != null)
    for (NodeToken e : specialTokens) {
      stLastLine = e.endLine;
    }
    if (stLastLine == beginLine)
      buf.append(' ');
    if (var != null)
      buf.append(var);
    buf.append(tokenImage);
    return buf.toString();
  }

  /*
   * Visitors accept methods (no -novis option, visitors specification : Gen,void,java.lang.String)
   */

  /**
   * Accepts a {@link IGenVisitor} visitor with user argument data.
   *
   * @param vis - the visitor
   * @param argu - the user Argument data
   */
  @Override
  public void accept(final IGenVisitor vis, final String argu) {
    vis.visit(this, argu);
  }

  /*
   * Parent pointer getter and setter (-pp option)
   */

  /**
   * Gets the parent node.
   *
   * @return the parent node
   */
  @Override
  public INode getParent() {
    return parent;
  }

  /**
   * Sets the parent node.
   *
   * @param n - the parent node
   */
  @Override
  public void setParent(final INode n) {
    parent = n;
  }

  /*
   * Children methods (-chm option)
   */

  /** An empty list */
  private final List<INode> emptyList = new ArrayList<>(0);

  /**
   * @return the number of all direct children (base + user nodes) (always 0)
   */
  @Override
  public int getNbAllChildren() {
    return 0;
  }

  /**
   * @return the number of direct base nodes children (always 0)
   */
  @Override
  public int getNbBaseChildren() {
    return 0;
  }

  /**
   * @return the number of direct user nodes children (always 0)
   */
  @Override
  public int getNbUserChildren() {
    return 0;
  }

  /**
   * @return the list of all direct children (base + user nodes) (always empty)
   */
  @Override
  public List<INode> getAllChildren() {
    return emptyList;
  }

  /**
   * @return the list of direct base nodes children (always empty)
   */
  @Override
  public List<INode> getBaseChildren() {
    return emptyList;
  }

  /**
   * @return the list of direct user nodes children (always empty)
   */
  @Override
  public List<INode> getUserChildren() {
    return emptyList;
  }

  /**
   * @return true if the node is a base node, false otherwise (always true : the node is a base node)
   */
  @Override
  public boolean isBaseNode() {
    return true;
  }

}
