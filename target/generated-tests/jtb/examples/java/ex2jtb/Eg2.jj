/* Generated by JTB 1.5.1 */
options
{
  OUTPUT_DIRECTORY = "../../../../../../target/generated-tests/jj/examples/java/ex2jtb";
  // JTB_O = "../../../../../../target/generated-tests/jtb/examples/java/ex2jtb/Eg2.jj";
  // JTB_D = "../../../../../../target/generated-tests/jtb/examples/java/ex2jtb";
  // JTB_P = "examples.java.ex2jtb";
  // JTB_NPFX = "AST";
  // JTB_VIS = "Gen,void,java.lang.String";
  // JTB_JD = true;
  // JTB_TK = true;
  // JTB_HK = true;
  // JTB_W = true;
  TOKEN_FACTORY = "examples.java.ex2jtb.syntaxtree.NodeConstants"; // added by JTB 1.5.1

}

PARSER_BEGIN(Eg2)
package examples.java.ex2jtb;

import examples.java.ex2jtb.visitor.*;
import examples.java.ex2jtb.syntaxtree.*;
import examples.java.ex2jtb.hook.*;


public class Eg2 {

  /** The hook for enter / exit node scope hook methods (to be instantiated) */
static   public IEnterExitHook jtb_eeh;


  /** Return variable for the {@link #jc_1} JavaCodeProduction) */
  static int jtbrt_jc_1;

  public static void main(String args[]) {
    System.err.flush();
    System.out.println("Reading from standard input (JTB version)...");
    Eg2 t = new Eg2(System.in);
    try {
      DumpVisitor v = new DumpVisitor();
      ASTStart n = t.ASTStart();
      n.accept(v, "");
      System.out.println("Thank you.");
      System.exit(0);
    }
    catch (Exception e) {
      System.out.flush();
      System.err.println("Oops.");
      System.err.println(e.getMessage());
      e.printStackTrace();
      System.exit(-1);
    }
  }
}

PARSER_END(Eg2)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//"( ~["\n", "\r"] )*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*"( ~["*"] )* "*"( ~["/"]( ~["*"] )* "*" )* "/" >
}

TOKEN :
{
  < INTEGER_LITERAL :
      <DECIMAL_LITERAL>( ["l", "L"] )?
    | <HEX_LITERAL>( ["l", "L"] )?
    | <OCTAL_LITERAL>( ["l", "L"] )?
>
| < #DECIMAL_LITERAL : ["1"-"9"]( ["0"-"9"] )* >
| < #HEX_LITERAL : "0" ["x", "X"]( ["0"-"9", "a"-"f", "A"-"F"] )+ >
| < #OCTAL_LITERAL : "0"( ["0"-"7"] )* >
}

TOKEN :
{
  < IDENTIFIER : <LETTER>
    (
      <LETTER>
    | <DIGIT>
    )* >
| < #LETTER : ["_", "a"-"z", "A"-"Z"] >
| < #DIGIT : ["0"-"9"] >
}

ASTStart ASTStart() :
{
  ASTExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  ASTStart jtbNode = null;
}
{
  { if (jtb_eeh != null) jtb_eeh.ASTStartEnter(); }
  n0 = ASTExpression()
  n2 = ";"
  { n1 = (NodeToken) n2; }
  { jtbNode = new ASTStart(n0, n1); }
  { if (jtb_eeh != null) jtb_eeh.ASTStartExit(jtbNode); }
  { return jtbNode; }
}

ASTExpression ASTExpression() :
{
  ASTAdditiveExpression n0 = null;
  ASTExpression jtbNode = null;
}
{
  { if (jtb_eeh != null) jtb_eeh.ASTExpressionEnter(); }
  n0 = ASTAdditiveExpression()
  { jtbNode = new ASTExpression(n0); }
  { if (jtb_eeh != null) jtb_eeh.ASTExpressionExit(jtbNode); }
  { return jtbNode; }
}

ASTAdditiveExpression ASTAdditiveExpression() :
{
  ASTMultiplicativeExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  ASTMultiplicativeExpression n10 = null;
  ASTAdditiveExpression jtbNode = null;
}
{
  { if (jtb_eeh != null) jtb_eeh.ASTAdditiveExpressionEnter(); }
  n0 = ASTMultiplicativeExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        { n4 = new NodeSequence(1); }
        n6 = "+"
        { n5 = (NodeToken) n6; }
        { n4.addNode(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        { n7 = new NodeSequence(1); }
        n9 = "-"
        { n8 = (NodeToken) n9; }
        { n7.addNode(n8); }
        { n3 = new NodeChoice(n7, 1, 2); }
      )
    )
    { n2.addNode(n3); }
    n10 = ASTMultiplicativeExpression()
    { n2.addNode(n10); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new ASTAdditiveExpression(n0, n1); }
  { if (jtb_eeh != null) jtb_eeh.ASTAdditiveExpressionExit(jtbNode); }
  { return jtbNode; }
}

ASTMultiplicativeExpression ASTMultiplicativeExpression() :
{
  ASTUnaryExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  ASTUnaryExpression n13 = null;
  ASTMultiplicativeExpression jtbNode = null;
}
{
  { if (jtb_eeh != null) jtb_eeh.ASTMultiplicativeExpressionEnter(); }
  n0 = ASTUnaryExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        { n4 = new NodeSequence(1); }
        n6 = "*"
        { n5 = (NodeToken) n6; }
        { n4.addNode(n5); }
        { n3 = new NodeChoice(n4, 0, 3); }
      |
        { n7 = new NodeSequence(1); }
        n9 = "/"
        { n8 = (NodeToken) n9; }
        { n7.addNode(n8); }
        { n3 = new NodeChoice(n7, 1, 3); }
      |
        { n10 = new NodeSequence(1); }
        n12 = "%"
        { n11 = (NodeToken) n12; }
        { n10.addNode(n11); }
        { n3 = new NodeChoice(n10, 2, 3); }
      )
    )
    { n2.addNode(n3); }
    n13 = ASTUnaryExpression()
    { n2.addNode(n13); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new ASTMultiplicativeExpression(n0, n1); }
  { if (jtb_eeh != null) jtb_eeh.ASTMultiplicativeExpressionExit(jtbNode); }
  { return jtbNode; }
}

ASTUnaryExpression ASTUnaryExpression() :
{
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  ASTExpression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  ASTMyID n8 = null;
  NodeSequence n9 = null;
  ASTInteger n10 = null;
  ASTUnaryExpression jtbNode = null;
}
{
  { if (jtb_eeh != null) jtb_eeh.ASTUnaryExpressionEnter(); }
  (
    { n1 = new NodeSequence(3); }
    n3 = "("
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    n4 = ASTExpression()
    { n1.addNode(n4); }
    n6 = ")"
    { n5 = (NodeToken) n6; }
    { n1.addNode(n5); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    { n7 = new NodeSequence(1); }
    n8 = ASTMyID()
    { n7.addNode(n8); }
    { n0 = new NodeChoice(n7, 1, 3); }
    {
      ((ASTMyID)n7.elementAt(0)).f0.tokenImage = "reset";
    }
  |
    { n9 = new NodeSequence(1); }
    n10 = ASTInteger()
    { n9.addNode(n10); }
    { n0 = new NodeChoice(n9, 2, 3); }
  )
  { jtbNode = new ASTUnaryExpression(n0); }
  { if (jtb_eeh != null) jtb_eeh.ASTUnaryExpressionExit(jtbNode); }
  { return jtbNode; }
}

ASTMyID ASTMyID() :
{
  NodeToken n0 = null;
  Token n1 = null;
  ASTMyID jtbNode = null;
  Token t = null;
}
{
  { if (jtb_eeh != null) jtb_eeh.ASTMyIDEnter(); }
  n1 = < IDENTIFIER >
  { n0 = (NodeToken) n1; }
  { t = n1; }
  {
    n0.tokenImage = t.image + " modified";
  }
  jc_0()
  { jtbNode = new ASTMyID(n0); }
  { if (jtb_eeh != null) jtb_eeh.ASTMyIDExit(jtbNode); }
  { return jtbNode; }
}

ASTInteger ASTInteger() :
{
  NodeToken n0 = null;
  Token n1 = null;
  ASTjc_1 n2 = null;
  ASTInteger jtbNode = null;
}
{
  { if (jtb_eeh != null) jtb_eeh.ASTIntegerEnter(); }
  n1 = < INTEGER_LITERAL >
  { n0 = (NodeToken) n1; }
  n2 = ASTjc_1()
  { jtbNode = new ASTInteger(n0, n2); }
  { if (jtb_eeh != null) jtb_eeh.ASTIntegerExit(jtbNode); }
  { return jtbNode; }
}

JAVACODE int jc_0()
{
  int i = 0;
  return i;
}
JAVACODE ASTjc_1 ASTjc_1() /*%*/ 
{
  if (jtb_eeh != null) jtb_eeh.ASTjc_1Enter();
  int j = 0;jtbrt_jc_1 = j;
  ASTjc_1 jtbNode = new ASTjc_1();
  if (jtb_eeh != null) jtb_eeh.ASTjc_1Exit(jtbNode);
  return jtbNode;
}

