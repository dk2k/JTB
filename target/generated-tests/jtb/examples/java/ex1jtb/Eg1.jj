/* Generated by JTB 1.5.1 */
options
{
  OUTPUT_DIRECTORY = "../../../../../../target/generated-tests/jj/examples/java/ex1jtb";
  // JTB_O = "../../../../../../target/generated-tests/jtb/examples/java/ex1jtb/Eg1.jj";
  // JTB_D = "../../../../../../target/generated-tests/jtb/examples/java/ex1jtb";
  // JTB_P = "examples.java.ex1jtb";
  // JTB_VIS = "Gen,void,java.lang.String";
  // JTB_CHM = true;
  // JTB_PP = true;
}

PARSER_BEGIN(Eg1)
package examples.java.ex1jtb;

import examples.java.ex1jtb.visitor.*;
import examples.java.ex1jtb.syntaxtree.*;


public class Eg1 {


  /** Return variable for the {@link #jc_1} JavaCodeProduction) */
  static int jtbrt_jc_1;

  public static void main(String args[]) {
    System.err.flush();
    System.out.println("Reading from standard input (JTB version)...");
    Eg1 t = new Eg1(System.in);
    try {
      Start n = t.Start();
      n.accept(new DumpVisitor(), "");
      System.out.println("Thank you.");
      System.exit(0);
    }
    catch (Exception e) {
      System.out.flush();
      System.err.println("Oops.");
      System.err.println(e.getMessage());
      e.printStackTrace();
      System.exit(-1);
    }
  }
}

PARSER_END(Eg1)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//"( ~["\n", "\r"] )*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*"( ~["*"] )* "*"( ~["/"]( ~["*"] )* "*" )* "/" >
}

TOKEN :
{
  < INTEGER_LITERAL :
      <DECIMAL_LITERAL>( ["l", "L"] )?
    | <HEX_LITERAL>( ["l", "L"] )?
    | <OCTAL_LITERAL>( ["l", "L"] )?
>
| < #DECIMAL_LITERAL : ["1"-"9"]( ["0"-"9"] )* >
| < #HEX_LITERAL : "0" ["x", "X"]( ["0"-"9", "a"-"f", "A"-"F"] )+ >
| < #OCTAL_LITERAL : "0"( ["0"-"7"] )* >
}

TOKEN :
{
  < IDENTIFIER : <LETTER>
    (
      <LETTER>
    | <DIGIT>
    )* >
| < #LETTER : ["_", "a"-"z", "A"-"Z"] >
| < #DIGIT : ["0"-"9"] >
}

Start Start() :
{
  Expression n0 = null;
  Token n1 = null;
  Start jtbNode = null;
}
{
  n0 = Expression()
  n1 = ";"
  { jtbNode = new Start(n0, n1); }
  { return jtbNode; }
}

Expression Expression() :
{
  AdditiveExpression n0 = null;
  Expression jtbNode = null;
}
{
  n0 = AdditiveExpression()
  { jtbNode = new Expression(n0); }
  { return jtbNode; }
}

AdditiveExpression AdditiveExpression() :
{
  MultiplicativeExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  Token n4 = null;
  Token n5 = null;
  MultiplicativeExpression n6 = null;
  AdditiveExpression jtbNode = null;
}
{
  n0 = MultiplicativeExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n4 = "+"
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        n5 = "-"
        { n3 = new NodeChoice(n5, 1, 2); }
      )
    )
    { n2.addNode(n3); }
    n6 = MultiplicativeExpression()
    { n2.addNode(n6); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new AdditiveExpression(n0, n1); }
  { return jtbNode; }
}

MultiplicativeExpression MultiplicativeExpression() :
{
  UnaryExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  Token n4 = null;
  Token n5 = null;
  Token n6 = null;
  UnaryExpression n7 = null;
  MultiplicativeExpression jtbNode = null;
}
{
  n0 = UnaryExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n4 = "*"
        { n3 = new NodeChoice(n4, 0, 3); }
      |
        n5 = "/"
        { n3 = new NodeChoice(n5, 1, 3); }
      |
        n6 = "%"
        { n3 = new NodeChoice(n6, 2, 3); }
      )
    )
    { n2.addNode(n3); }
    n7 = UnaryExpression()
    { n2.addNode(n7); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new MultiplicativeExpression(n0, n1); }
  { return jtbNode; }
}

UnaryExpression UnaryExpression() :
{
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  Token n2 = null;
  Expression n3 = null;
  Token n4 = null;
  Identifier n5 = null;
  EgInteger n6 = null;
  UnaryExpression jtbNode = null;
}
{
  (
    { n1 = new NodeSequence(3); }
    n2 = "("
    { n1.addNode(n2); }
    n3 = Expression()
    { n1.addNode(n3); }
    n4 = ")"
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n5 = Identifier()
    { n0 = new NodeChoice(n5, 1, 3); }
  |
    n6 = EgInteger()
    { n0 = new NodeChoice(n6, 2, 3); }
  )
  { jtbNode = new UnaryExpression(n0); }
  { return jtbNode; }
}

Identifier Identifier() :
{
  Token n0 = null;
  Identifier jtbNode = null;
}
{
  n0 = < IDENTIFIER >
  jc_0()
  { jtbNode = new Identifier(n0); }
  { return jtbNode; }
}

EgInteger EgInteger() :
{
  Token n0 = null;
  jc_1 n1 = null;
  EgInteger jtbNode = null;
}
{
  n0 = < INTEGER_LITERAL >
  n1 = jc_1()
  { jtbNode = new EgInteger(n0, n1); }
  { return jtbNode; }
}

JAVACODE int jc_0()
{
  int i = 0;
  return i;
}

JAVACODE jc_1 jc_1() /*%*/ 
{
  int j = 0;jtbrt_jc_1 = j;
  return new jc_1();
}

