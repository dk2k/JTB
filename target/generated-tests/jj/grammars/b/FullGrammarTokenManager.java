/* FullGrammarTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. FullGrammarTokenManager.java */
package grammars.b;
import grammars.b.visitor.*;
import java.util.ArrayList;
import grammars.b.syntaxtree.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class FullGrammarTokenManager implements FullGrammarConstants {
  int stringSize;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x120000000L, 0x5c000L);
      case 34:
         jjmatchedKind = 16;
         return jjMoveNfa_0(0, 0);
      case 36:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x3800L, 0x20000L);
      case 42:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0xeeL);
      case 44:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x3c00000000000000L, 0x0L);
      case 46:
         jjmatchedKind = 21;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 41;
         return jjMoveNfa_0(0, 0);
      case 58:
         jjmatchedKind = 23;
         return jjMoveStringLiteralDfa1_0(0x1c000400000L, 0x0L);
      case 59:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x3fffc0000000000L, 0x3800L);
      case 63:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L);
      case 95:
         return jjMoveStringLiteralDfa1_0(0xc000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x600000000L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x1800000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 201:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L);
      case 233:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 8:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L, active1, 0L);
      case 33:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1c000L);
      case 49:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 1;
         }
         break;
      case 50:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         break;
      case 51:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 52:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         break;
      case 53:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         break;
      case 54:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         break;
      case 59:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3800L);
      case 61:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e00000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x100001000L, active1, 0L);
      case 94:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400a0000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x2800L, active1, 0x20000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x7d00000000000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000004000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 120:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 1;
         }
         break;
      case 121:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 122:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         break;
      case 200:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L);
      case 232:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 2;
         }
         break;
      case 33:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x18000L);
      case 36:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      case 57:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 59:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3000L);
      case 61:
         return jjMoveStringLiteralDfa3_0(active0, 0x1e00000000L, active1, 0L);
      case 66:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 2;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
      case 98:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400a0000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x90000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x7d00000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4004001000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000002800L, active1, 0x20000L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 122:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         break;
      case 202:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 2;
         }
         break;
      case 234:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 3;
         }
         break;
      case 33:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000L);
      case 42:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         break;
      case 48:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         break;
      case 49:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 3;
         }
         break;
      case 50:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         break;
      case 51:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
         }
         break;
      case 59:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
      case 94:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         break;
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2800L, active1, 0x20000L);
      case 99:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         break;
      case 102:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         break;
      case 105:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x7d00000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
         }
         break;
      case 111:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
         }
         break;
      case 114:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
         }
         break;
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
      case 117:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         break;
      case 122:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
         }
         break;
      case 49:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
         }
         break;
      case 50:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         break;
      case 51:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         break;
      case 52:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         break;
      case 53:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
         }
         break;
      case 54:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
         }
         break;
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2800L, active1, 0x20000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L);
      case 63:
         return jjMoveStringLiteralDfa6_0(active0, 0x2800L, active1, 0x20000L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0x20000L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 57:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L, active1, 0L);
      case 79:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L, active1, 0L);
      case 111:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 8;
         }
         break;
      case 42:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L, active1, 0L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 8;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000L);
      case 63:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 115;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(0, 1); }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if ((0x8200000000L & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                  }
                  else if (curChar == 35)
                     { jjCheckNAddStates(2, 15); }
                  else if (curChar == 59)
                     { jjCheckNAddStates(16, 19); }
                  else if (curChar == 43)
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 4;
                  if (curChar == 33)
                     { jjAddStates(20, 24); }
                  if (curChar == 33)
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 47)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 5:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 6:
                  if ((0x2400L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 7:
                  if (curChar == 10 && kind > 14)
                     kind = 14;
                  break;
               case 8:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 10:
                  if ((0x100002600L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 11:
                  if (curChar == 61 && kind > 63)
                     kind = 63;
                  break;
               case 12:
                  if (curChar == 43 && kind > 64)
                     kind = 64;
                  break;
               case 13:
                  if (curChar == 33 && kind > 85)
                     kind = 85;
                  break;
               case 14:
                  if ((0x8200000000L & l) != 0L && kind > 86)
                     kind = 86;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(28, 29); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(30, 31); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(0, 1); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAddStates(32, 36); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAdd(34); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAddTwoStates(34, 35); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAddStates(37, 39); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAddStates(40, 43); }
                  break;
               case 39:
                  if (curChar == 59)
                     { jjCheckNAddStates(16, 19); }
                  break;
               case 40:
                  if (curChar != 51)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if (curChar == 59)
                     { jjCheckNAdd(40); }
                  break;
               case 42:
                  if (curChar != 52)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if (curChar == 59)
                     { jjCheckNAdd(42); }
                  break;
               case 44:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 45:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 46:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 47:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 48:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 49:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 50:
                  if (curChar != 53)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 51:
                  if (curChar == 53 && kind > 73)
                     kind = 73;
                  break;
               case 52:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 54:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 55:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 56:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 57:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 58:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 59:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 60:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 61:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 62:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 63:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 64:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 65:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 66:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 67:
                  if (curChar == 54 && kind > 74)
                     kind = 74;
                  break;
               case 68:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 70:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 71:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 72:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 73:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 74:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 75:
                  if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 76:
                  if (curChar == 33)
                     { jjAddStates(20, 24); }
                  break;
               case 80:
                  if (curChar == 35)
                     { jjCheckNAddStates(2, 15); }
                  break;
               case 81:
                  if (curChar == 49 && kind > 85)
                     kind = 85;
                  break;
               case 82:
                  if (curChar == 55)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 84:
                  if (curChar == 56 && kind > 85)
                     kind = 85;
                  break;
               case 85:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 27 && kind > 85)
                     kind = 85;
                  break;
               case 87:
                  if (curChar == 22)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 8)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 90:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 91:
                  if (curChar == 51 && kind > 85)
                     kind = 85;
                  break;
               case 92:
                  if (curChar == 35)
                     { jjCheckNAdd(91); }
                  break;
               case 93:
                  if (curChar != 54)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if (curChar == 35)
                     { jjCheckNAdd(93); }
                  break;
               case 95:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(95, 97); }
                  break;
               case 97:
                  if (curChar == 53 && kind > 85)
                     kind = 85;
                  break;
               case 98:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(98, 100); }
                  break;
               case 100:
                  if (curChar == 53 && kind > 86)
                     kind = 86;
                  break;
               case 101:
                  if (curChar != 54)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 102:
                  if (curChar == 35)
                     { jjCheckNAdd(101); }
                  break;
               case 103:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 104:
                  if (curChar == 51 && kind > 86)
                     kind = 86;
                  break;
               case 105:
                  if (curChar == 35)
                     { jjCheckNAdd(104); }
                  break;
               case 106:
                  if (curChar == 55)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 108:
                  if (curChar == 56 && kind > 86)
                     kind = 86;
                  break;
               case 109:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 27 && kind > 86)
                     kind = 86;
                  break;
               case 111:
                  if (curChar == 22)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 8)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 114:
                  if (curChar == 49 && kind > 86)
                     kind = 86;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     { jjCheckNAdd(3); }
                  }
                  if ((0x600000006L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAddStates(44, 48); }
                  }
                  else if ((0x1800000018L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAdd(1); }
                  }
                  else if ((0x6000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     { jjCheckNAddStates(49, 53); }
                  }
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
               case 3:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(3); }
                  break;
               case 5:
                  { jjAddStates(25, 27); }
                  break;
               case 15:
                  if ((0x600000006L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddStates(44, 48); }
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(16); }
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 18:
               case 19:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAdd(19); }
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
               case 22:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAdd(22); }
                  break;
               case 23:
                  if ((0x6000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddStates(49, 53); }
                  break;
               case 24:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAdd(24); }
                  break;
               case 25:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAdd(25); }
                  break;
               case 26:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAdd(26); }
                  break;
               case 27:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAdd(27); }
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAdd(28); }
                  break;
               case 77:
                  if (curChar == 120 && kind > 83)
                     kind = 83;
                  break;
               case 78:
                  if (curChar == 120 && kind > 85)
                     kind = 85;
                  break;
               case 79:
                  if (curChar == 120 && kind > 86)
                     kind = 86;
                  break;
               case 83:
                  if (curChar == 98)
                     { jjAddStates(54, 55); }
                  break;
               case 89:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 107:
                  if (curChar == 98)
                     { jjAddStates(56, 57); }
                  break;
               case 113:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(25, 27); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 115 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 17);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 18;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 18)
                     kind = 18;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\45\143\164\142\165\77\171\145\163", null, null, null, null, null, "\73", "\54", "\56", "\72\171", "\72", "\41", 
"\171\41", "\137\146\157\157", "\137\142\141\162", "\170\171\172", "\41\141\142\143", 
"\77", "\77\141\142\143", "\41\116\125\115\137\63\137\71\41", "\151\75\75\60", 
"\151\75\75\61", "\152\75\75\62", "\152\75\75\63", "\52\63\71\52", "\72\160\157\151", 
"\72\165\171\164", "\72\162\145\172", "\57", "\73\141\142\143", "\73\144\145\146", 
"\73\147\150\151\61", "\73\170", "\73\147\150\151\62", "\73\147\150\151\63", "\73\147\150\151\64", 
"\73\147\150\151\65", "\73\147\150\151\66", "\73\171", "\73\172", "\73\61", "\73\62", "\73\63", 
"\73\64", "\73\65", "\54\152\153\154", "\54\155\156\157", "\54\160\161\162", 
"\54\163\164\165", "\44\136\44\136", null, null, "\52\61", "\52\62", "\52\63", null, "\52\64", 
"\52\65", "\52\66", null, null, null, "\73\73\40", "\73\73\73\40", "\73\73\73\73\40", 
"\41\41\40", "\41\41\41\40", "\41\41\41\41\40", "\45\143\164\142\165\77\156\157\52\52\52", 
"\41\170", null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = grammars.b.syntaxtree.NodeConstants.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   30, 31, 81, 82, 90, 91, 93, 95, 97, 98, 100, 101, 103, 104, 106, 114, 
   40, 42, 44, 59, 77, 78, 78, 79, 79, 5, 6, 8, 17, 18, 20, 21, 
   34, 35, 36, 37, 38, 34, 35, 36, 34, 35, 36, 37, 16, 17, 18, 20, 
   21, 24, 25, 26, 27, 28, 85, 87, 109, 111, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 16 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
      stringSize = 0;
         break;
      case 18 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
      stringSize++;
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 17 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      System.err.println("Size = " + stringSize);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public FullGrammarTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public FullGrammarTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 115; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinString",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffa3fe7L, 0x7fffffL, 
};
static final long[] jjtoSkip = {
   0xc000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x4000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x50000L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[115];
    private final int[] jjstateSet = new int[2 * 115];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
