/* SmallGrammar.java */
/* Generated By:JavaCC: Do not edit this line. SmallGrammar.java */
package grammars.a;

import grammars.a.sgvis.*;
import grammars.a.sghook.*;
// not needed, just for code coverage
import grammars.a.sgtree.*;
// not needed, just for code coverage
import java.util.ArrayList;


public class SmallGrammar implements SmallGrammarConstants {

  /** The hook for enter / exit node scope hook methods (to be instantiated) */
  public IEnterExitHook jtb_eeh;


  /* --- JTB generated return variables declarations --- */

  /** Return variable for the {@link #bp_jual} BNFProduction) */
  java.util.ArrayList<Float> jtbrt_bp_jual;

  /** Return variable for the {@link #bp_hm} BNFProduction) */
  java.util.HashMap<String, Float> jtbrt_bp_hm;

  /** Return variable for the {@link #jc_0} JavaCodeProduction) */
  int jtbrt_jc_0;

  /* --- User code --- */

  public static void main(String args[]) {
    System.err.flush();
    System.out.println("SmallGrammar Reading ...");
    SmallGrammar sg = new SmallGrammar(System.in);
    try {
      sg.jtb_eeh = new FancyEnterExitHook(sg, "blabla");
      System.out.println("... Parsing with fancy hook...");
      ASTclassDeclaration123 cd = sg.ASTclassDeclaration123();
      DepthFirstVoidVisitor v = new DepthFirstVoidVisitor();
      System.out.println("... Visiting...");
      cd.accept(v);
      System.out.println();
      System.out.println("... Dumping tree...");
      TreeDumper d = new TreeDumper();
      cd.accept(d);
      TreeFormatter f = new TreeFormatter();
      System.out.println();
      System.out.println("... Formatting tree...");
      cd.accept(f);
      FancyVisitor fv = new FancyVisitor();
      System.out.println("... Fancy visiting...");
      String res = cd.accept(fv, "", new int[]{  }, (short)0);
      System.out.println(res);
      System.out.println("SmallGrammar ended.");
      System.exit(0);
    }
    catch (final Exception e) {
      System.out.flush();
      System.err.println("Oops!");
      System.err.println(e.getMessage());
      System.exit(-1);
    }
  }

  /* For test case with user changed factory method */
  /**
   * Factory method used by JavaCC to create a new Token object, which will be a (JTB) subclassed NodeToken object.
   *
   * @param ofKind - the token kind
   * @param image - the token image
   *
   * @return a new Token (which is also a NodeToken)
   */
  public static Token newToken(int ofKind, String image) {
    return new NodeToken(ofKind, image);
  }

  final public ASTclassDeclaration123 ASTclassDeclaration123() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ASTclassName123 n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  NodeChoice n6 = null;
  NodeSequence n7 = null;
  ASTmethod123 n8 = null;
  NodeSequence n9 = null;
  ASTinstruction123 n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  ASTjc_0123 n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  ASTclassDeclaration123 jtbNode = null;
if (jtb_eeh != null) jtb_eeh.ASTclassDeclaration123Enter();
    n1 = jj_consume_token(1);
n0 = (NodeToken) n1;
    n2 = ASTclassName123();
    n4 = jj_consume_token(2);
n3 = (NodeToken) n4;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(2)) {
n7 = new NodeSequence(1);
        n8 = ASTmethod123();
n7.addNode(n8);
n6 = new NodeChoice(n7, 0, 2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
n9 = new NodeSequence(1);
          n10 = ASTinstruction123();
n9.addNode(n10);
n6 = new NodeChoice(n9, 1, 2);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
n5.addNode(n6);
    }
n5.nodes.trimToSize();
    n12 = jj_consume_token(3);
n11 = (NodeToken) n12;
    n14 = jj_consume_token(4);
n13 = (NodeToken) n14;
    n15 = ASTjc_0123();
    n17 = jj_consume_token(0);
n17.beginColumn++;
n17.endColumn++;
n16 = (NodeToken) n17;
jtbNode = new ASTclassDeclaration123(n0, n2, n3, n5, n11, n13, n15, n16);
if (jtb_eeh != null) jtb_eeh.ASTclassDeclaration123Exit(jtbNode);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ASTclassName123 ASTclassName123() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ASTclassName123 jtbNode = null;
  // --- user BNFProduction java block ---
  // leave b & e uninitialized
  char b, e;
  Token t = null;
if (jtb_eeh != null) jtb_eeh.ASTclassName123Enter();
    n1 = jj_consume_token(ID);
n0 = (NodeToken) n1;
t = n1;
//    e = 'Ã©';
    b = '\b';
jtbNode = new ASTclassName123(n0);
if (jtb_eeh != null) jtb_eeh.ASTclassName123Exit(jtbNode);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ASTmethod123 ASTmethod123() throws ParseException {// --- JTB generated node declarations ---
  ASTmethodName123 n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeList n3 = new NodeList();
  NodeSequence n4 = null;
  ASTinstruction123 n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  ASTmethod123 jtbNode = null;
if (jtb_eeh != null) jtb_eeh.ASTmethod123Enter();
    n0 = ASTmethodName123();
    n2 = jj_consume_token(5);
n1 = (NodeToken) n2;
    label_2:
    while (true) {
n4 = new NodeSequence(1);
      n5 = ASTinstruction123();
n4.addNode(n5);
n3.addNode(n4);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
n3.nodes.trimToSize();
    n7 = jj_consume_token(6);
n6 = (NodeToken) n7;
jtbNode = new ASTmethod123(n0, n1, n3, n6);
if (jtb_eeh != null) jtb_eeh.ASTmethod123Exit(jtbNode);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ASTmethodName123 ASTmethodName123() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ASTmethodName123 jtbNode = null;
if (jtb_eeh != null) jtb_eeh.ASTmethodName123Enter();
    /*com*/ n1 = jj_consume_token(ID);
n0 = (NodeToken) n1;
jtbNode = new ASTmethodName123(n0);
if (jtb_eeh != null) jtb_eeh.ASTmethodName123Exit(jtbNode);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ASTinstruction123 ASTinstruction123() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  ASTinstruction123 jtbNode = null;
if (jtb_eeh != null) jtb_eeh.ASTinstruction123Enter();
    if (jj_2_2(2)) {
n1 = new NodeSequence(2);
      n3 = jj_consume_token(ID);
n2 = (NodeToken) n3;
n1.addNode(n2);
      n5 = jj_consume_token(7);
n4 = (NodeToken) n5;
n1.addNode(n4);
n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
n6 = new NodeSequence(1);
        bp_al();
        n8 = jj_consume_token(8);
n7 = (NodeToken) n8;
n6.addNode(n7);
n0 = new NodeChoice(n6, 1, 2);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
jtbNode = new ASTinstruction123(n0);
if (jtb_eeh != null) jtb_eeh.ASTinstruction123Exit(jtbNode);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Float> bp_al() throws ParseException {ArrayList<Float> al = new ArrayList<>();
  java.util.ArrayList<Float> jual = null;
    jj_consume_token(ID);
al.add(-23.E-40F);
    jual = new java.util.ArrayList<>(al);
    jual.add(.12e+30F);
    {if ("" != null) return jual;}
    throw new Error("Missing return statement in function");
}

  final public ASTbp_jual123 ASTbp_jual123() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ASTbp_jual123 jtbNode = null;
  // --- user BNFProduction java block ---
  ArrayList<Float> al = new ArrayList<>();
  java.util.ArrayList<Float> jual = null;
if (jtb_eeh != null) jtb_eeh.ASTbp_jual123Enter();
    n1 = jj_consume_token(ID);
n0 = (NodeToken) n1;
jtbNode = new ASTbp_jual123(n0);
al.add(-23.E-40F);
    jual = new java.util.ArrayList<>(al);
    jual.add(.12e+30F);
    jtbrt_bp_jual = jual;
if (jtb_eeh != null) jtb_eeh.ASTbp_jual123Exit(jtbNode);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ASTbp_hm123 ASTbp_hm123(final java.util.ArrayList<Float> jual) throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ASTbp_hm123 jtbNode = null;
  // --- user BNFProduction java block ---
  java.util.HashMap<String , Float> hm = new java.util.HashMap<>();
if (jtb_eeh != null) jtb_eeh.ASTbp_hm123Enter();
    n1 = jj_consume_token(ID);
n0 = (NodeToken) n1;
jtbNode = new ASTbp_hm123(n0);
hm.put("nine", jual == null ? 9.9F : jual.get(9));
    jtbrt_bp_hm = hm;
if (jtb_eeh != null) jtb_eeh.ASTbp_hm123Exit(jtbNode);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  ASTjc_0123 ASTjc_0123() throws ParseException {if (jtb_eeh != null) jtb_eeh.ASTjc_0123Enter();
  int i = 0;jtbrt_jc_0 = i;
  ASTjc_0123 jtbNode = new ASTjc_0123();
  if (jtb_eeh != null) jtb_eeh.ASTjc_0123Exit(jtbNode);
  return jtbNode;
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_ASTmethodName123_267_3_4()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(7)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_ASTmethod123_240_3_3()) return true;
    return false;
  }

  private boolean jj_3R_ASTmethod123_240_3_3()
 {
    if (jj_3R_ASTmethodName123_267_3_4()) return true;
    if (jj_scan_token(5)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SmallGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1000,0x1000,0x1000,0x1000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SmallGrammar(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SmallGrammar(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SmallGrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SmallGrammar(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SmallGrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SmallGrammarTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SmallGrammar(SmallGrammarTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SmallGrammarTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[14];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 4; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 14; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
