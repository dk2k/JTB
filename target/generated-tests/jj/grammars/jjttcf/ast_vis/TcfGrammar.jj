/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. TcfGrammar.jj */
/*@egen*//*
   A small grammar for testing the (JavaCC) try/catch/finally statements,
    similar to the JTB grammar grammars/tcf/TcfGrammar.jtb
*/
options{  static = true;                                         
                                                                     
                                                                                               
  OUTPUT_DIRECTORY = "..";                            
                                                                                                         
                                                                                                         
                                                                
                                                                                                             
                         
                                                            
                                                                                                      
                 
                                                                                  
                                // (default "Object")
}PARSER_BEGIN(TcfGrammar)
// package is different to avoid overwriting the JTB grammar's generated filespackage grammars.jjttcf;
import grammars.jjttcf.ast_vis.*;


// Different from JTB
//import grammars.jjttcf.visitor.*;
public class TcfGrammar/*@bgen(jjtree)*/implements TcfGrammarTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTTcfGrammarState jjtree = new JJTTcfGrammarState();

/*@egen*/  public static void main(String args [])  {    System.err.println("TcfGrammar Reading ...");
    new TcfGrammar(System.in);    try    {      System.err.println("... Parsing ...");      // Different from JTB (class names, arguments)
      SimpleNode start = Start();
      System.err.println("... Parsing OK, now visiting ...");      TcfGrammarDefaultVisitor v = new MyVisitor();
      start.jjtAccept(v, "MyData");
      System.err.println("TcfGrammar ending.");
      System.exit(0);
    }    catch (ParseException e)
    {
      System.err.print("... Oops! ParseException: ");
      System.err.println(e.getMessage());
      e = null;
      System.err.println("TcfGrammar returning");
      System.exit(-2);
    }
    catch (final Exception e)
    {
      System.err.println("... Oops! Exception: ");
      e.printStackTrace();
      System.err.println("TcfGrammar exiting");
      System.exit(-1);
    }
  }
  private static void info(final String aMsg) {
    String tk0 = getToken(0).toString();
    String tk1 = getToken(1).toString();
    String ct0 = tk0 == null ? "!null!" : tk0.length() == 0 ? "!empty!" : tk0;
    String ct1 = tk1 == null ? "!null!" : tk1.length() == 0 ? "!empty!" : tk1;
    System.err.println(aMsg + ", current token = " + ct0 + ", next token = " + ct1);
  }

}

// Different from JTB (superclass name, arguments, return types)/** Tracing visitor, in same file for simplicity; just traces */
class MyVisitor extends TcfGrammarDefaultVisitor
{
  /** {@inheritDoc} */
  @Override
  public void visit(NodeTokenJJT n, Object data)
  {
//    System.err.println("*** Entering visit NodeTokenJJT ***");
    super.visit(n, data);
    System.err.println("*** Just visited <" + n.jjtGetFirstToken()+"> ***");
//    System.err.println("*** Exiting visit NodeTokenJJT ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(Start n, Object data)
  {
    System.err.println("*** Entering visit Start ***");
    super.visit(n, data);
    System.err.println("*** Exiting visit Start ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(Tcf n, Object data)
  {
    System.err.println("*** Entering visit Tcf ***");
    super.visit(n, data);
    System.err.println("*** Exiting visit Tcf ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(Tcf2 n, Object data)
  {
    System.err.println("*** Entering visit Tcf2 ***");
    super.visit(n, data);
    System.err.println("*** Exiting visit Tcf2 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv1 n, Object data)
  {
    System.err.println("*** Entering visit bp_iv1 ***");
    super.visit(n, data);
    System.err.println("*** Exiting visit bp_iv1 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv2 n, Object data)
  {
    System.err.println("*** Entering visit bp_iv2 ***");
    super.visit(n, data);
    System.err.println("*** Exiting visit bp_iv2 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv3 n, Object data)
  {
    System.err.println("*** Entering visit bp_iv3 ***");
    super.visit(n, data);
    System.err.println("*** Exiting visit bp_iv3 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv3_ n, Object data)
  {
    System.err.println("*** Entering visit bp_iv3_ ***");
    super.visit(n, data);
    System.err.println("*** Exiting visit bp_iv3_ ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv4 n, Object data)
  {
    System.err.println("*** Entering visit bp_iv4 ***");
    super.visit(n, data);
    System.err.println("*** Exiting visit bp_iv4 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv5 n, Object data)
  {
    System.err.println("*** Entering visit bp_iv5 ***");
    super.visit(n, data);
    System.err.println("*** Exiting visit bp_iv5 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv6 n, Object data)
  {
    System.err.println("*** Entering visit bp_iv6 ***");
    super.visit(n, data);
    System.err.println("*** Exiting visit bp_iv6 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv7 n, Object data)
  {
    System.err.println("*** Entering visit bp_iv7 ***");
    super.visit(n, data);
    System.err.println("*** Exiting visit bp_iv7 ***");
  }

  /** {@inheritDoc} */
  @Override
  public void visit(Identifier n, Object data)
  {
    System.err.println("*** Entering visit Identifier ***");
    super.visit(n, data);
    System.err.println("*** Just visited '" + n.jjtGetFirstToken() +"' ***");
    System.err.println("*** Exiting visit Identifier ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(Integer_literal n, Object data)
  {
    System.err.println("*** Entering visit Integer_literal ***");
    super.visit(n, data);
    System.err.println("*** Just visited '" + n.jjtGetFirstToken() +"' ***");
    System.err.println("*** Exiting visit Integer_literal ***");
  }
  
}
PARSER_END(TcfGrammar)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* INTEGER_LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL > ([ "l", "L" ])?
  | < HEX > ([ "l", "L" ])?
  | < OCTAL > ([ "l", "L" ])? 
    >
| < #DECIMAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL : "0" ([ "0"-"7" ])* >
| < NUM_2$  : ([ "0"-"9" ]) {2}    [ "N", "n" ] >
| < NUM_3_9 : ([ "0"-"9" ]) {3, 9} [ "N", "n" ] >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < DIGIT : [ "0"-"9" ] >
}
// Different from JTB (annotation); here SimpleNode return type for main
SimpleNode Start()        :
{/*@bgen(jjtree) Start */
  Start jjtn000 = new Start(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  int[] iva = new int[] { 11 };
}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  { info("before 1st choice"); }
  Tcf()
  { info("passed jjtTcf()"); }
  < EOF >
  { info("after 1st EOF"); }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    // Different from JTB (needs explicit return)
    return jjtn000;
  }
| 
  { System.err.println("nodes will be created or not depending on the input data and differently by JTB and JJT"); }
  { info("before 2nd choice"); }
  try { bp_iv1(iva) } catch (Exception e) {}
  { info("passed bp_iv1(iva)"); }
  try { bp_iv1$(1) } catch (Exception e) {}
  { info("passed bp_iv1$(1)"); }
  try { bp_iv2(iva) bp_iv2$(2) } catch (Exception e) {}
  { info("passed bp_iv2(iva) bp_iv2$(2)"); }
  try { bp_iv3(iva) | bp_iv3_(30) } catch (Exception e) {}
  { info("passed bp_iv3(iva) | bp_iv3_(30)"); }
  try { bp_iv3(iva) | bp_iv3$(3) } catch (Exception e) {}
  { info("passed bp_iv3(iva) | bp_iv3$(3)"); }
  try { bp_iv4(iva) bp_iv4$(4) bp_iv5(iva) bp_iv5$(5) } catch (Exception e) {}
  { info("passed bp_iv4(iva) bp_iv4$(4) bp_iv5(iva) bp_iv5$(5)"); }
  try { bp_iv6(iva) bp_iv7(iva) | bp_iv6$(6) bp_iv7$(7) } catch (Exception e) {}
  { info("passed bp_iv6(iva) bp_iv7(iva) | bp_iv6$(6) bp_iv7$(7)"); }
  < EOF >
  { info("after 2nd EOF"); }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    // Different from JTB (needs explicit return)
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof IllegalStateException) {
      throw (IllegalStateException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

// Different from JTB (annotation); here void return type
void Tcf()      :
{/*@bgen(jjtree) Tcf */
  Tcf jjtn000 = new Tcf(JJTTCF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Tcf */
  try {
/*@egen*/
  try
  {
    { System.err.println("--- jjtTcf in try ---"); }
    Identifier()
    ( Identifier() | Integer_literal() )*
    ";" // will not be a node, as not annotated
    { System.err.println("--- jjtTcf should not see a node ';' ---"); }
    Tcf2()
  }
  catch (NullPointerException npe)
  {
    System.err.println("--- jjtTcf in catch NPE: swallowed NPE: < " + npe.getMessage() + " >");
    // Different from JTB: must explicitly remove node otherwise will be in the tree
    jjtree.popNode();
  }
  catch (Exception e)
  {
    System.err.println("--- jjtTcf in catch Ex; could occurr with invalid input; " + e);
    e = null;
  }
  finally
  { System.err.println("--- jjtTcf in finally --- "); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  "."/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              /*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/// will not be a node, unless annotated like here
  { System.err.println("--- jjtTcf should see '.' and return ---"); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

// Different from JTB (annotation); here void return type
void Tcf2()       :
{/*@bgen(jjtree) Tcf2 */
  Tcf2 jjtn000 = new Tcf2(JJTTCF2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Tcf2 */
  try {
/*@egen*/
  try
  {
    { System.err.println("--- jjtTcf2 in try ---"); }
    Identifier()
    (
      Identifier()
    |
      try
      {
        { System.err.println("--- jjtTcf2 in subtry ---"); }
        Integer_literal()
      }
      catch (NullPointerException npe)
      {
        System.err.println("--- jjtTcf2 in subcatch NPE: swallowed NPE: < " + npe.getMessage() + " >");
        // Different from JTB: must explicitly remove node otherwise will be in the tree
        jjtree.popNode();
      }
    ) *
  }
  catch (Exception e)
  {
    System.err.println("--- jjtTcf2 in catch Ex; could occurr with invalid input; " + e);
    e = null;
  }
  finally
  { System.err.println("--- jjtTcf2 in finally --- "); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

// Different from JTB (annotation)
private void bp_iv1(int[] i) throws IllegalStateException         :
{/*@bgen(jjtree) bp_iv1 */
  bp_iv1 jjtn000 = new bp_iv1(JJTBP_IV1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) bp_iv1 */
  try {
/*@egen*/
  { info("iv1 0"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  "1*"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv1 1"); }
  < NUM_2$ >
  { info("iv1 2"); }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    throw new IllegalStateException("dummy ise 1");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

// Different from JTB (annotation)
private void bp_iv1$(final int i) throws IllegalStateException :
{}
{
  { info("iv1$ 0"); }
  "1$"
  { info("iv1$ 1"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  < NUM_3_9 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv1$ 2"); }
  {
    if (i == 1)
    {
      throw new IllegalStateException("dummy ise 1$");
    }
  }
}

// Different from JTB (annotation)
private void bp_iv2(int[] i) throws IllegalStateException         :
{/*@bgen(jjtree) bp_iv2 */
  bp_iv2 jjtn000 = new bp_iv2(JJTBP_IV2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) bp_iv2 */
  try {
/*@egen*/
  { info("iv2 0"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  "2*"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv2 1"); }
  < NUM_2$ >
  { info("iv2 2"); }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    throw new IllegalStateException("dummy ise 2");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

// Different from JTB (annotation)
private void bp_iv2$(final int i) throws IllegalStateException :
{}
{
  { info("iv2$ 0"); }
  "2$"
  { info("iv2$ 1"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  < NUM_3_9 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv2$ 2"); }
  {
    if (i == 2)
    {
      throw new IllegalStateException("dummy ise 2$");
    }
  }
}

// Different from JTB (annotation)
private void bp_iv3(int[] i) throws IllegalStateException         :
{/*@bgen(jjtree) bp_iv3 */
  bp_iv3 jjtn000 = new bp_iv3(JJTBP_IV3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) bp_iv3 */
  try {
/*@egen*/
  { info("iv3 0"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  "3*"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv3 1"); }
  < NUM_2$ >
  { info("iv3 2"); }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    throw new IllegalStateException("dummy ise 3");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

// Different from JTB (annotation)
private void bp_iv3$(final int i) throws IllegalStateException :
{}
{
  { info("iv3$ 0"); }
  "3$"
  { info("iv3$ 1"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  < NUM_3_9 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv3$ 2"); }
  {
    if (i == 3)
    {
      throw new IllegalStateException("dummy ise 3$");
    }
  }
}

// Different from JTB (annotation)
private void bp_iv3_(final int i) throws IllegalStateException          :
{/*@bgen(jjtree) bp_iv3_ */
  bp_iv3_ jjtn000 = new bp_iv3_(JJTBP_IV3_);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) bp_iv3_ */
  try {
/*@egen*/
  { info("iv3_ 0"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  "3_"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv3_ 1"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn002 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtn002.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  < NUM_3_9 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtn002.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv3_ 2"); }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    if (i == 3)
    {
      throw new IllegalStateException("dummy ise 3_");
    }
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

// Different from JTB (annotation)
private void bp_iv4(int[] i) throws IllegalStateException         :
{/*@bgen(jjtree) bp_iv4 */
  bp_iv4 jjtn000 = new bp_iv4(JJTBP_IV4);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) bp_iv4 */
  try {
/*@egen*/
  { info("iv4 0"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  "4*"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv4 1"); }
  < NUM_2$ >
  { info("iv4 2"); }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    throw new IllegalStateException("dummy ise 4");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

// Different from JTB (annotation)
private void bp_iv4$(final int i) throws IllegalStateException :
{}
{
  { info("iv4$ 0"); }
  "4$"
  { info("iv4$ 1"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  < NUM_3_9 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv4$ 2"); }
  {
    if (i == 4)
    {
      throw new IllegalStateException("dummy ise 4$");
    }
  }
}

// Different from JTB (annotation)
private void bp_iv5(int[] i) throws IllegalStateException         :
{/*@bgen(jjtree) bp_iv5 */
  bp_iv5 jjtn000 = new bp_iv5(JJTBP_IV5);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) bp_iv5 */
  try {
/*@egen*/
  { info("iv5 0"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  "5*"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv5 1"); }
  < NUM_2$ >
  { info("iv5 2"); }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    throw new IllegalStateException("dummy ise 5");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

// Different from JTB (annotation)
private void bp_iv5$(final int i) throws IllegalStateException :
{}
{
  { info("iv5$ 0"); }
  "5$"
  { info("iv5$ 1"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  < NUM_3_9 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv5$ 2"); }
  {
    if (i == 5)
    {
      throw new IllegalStateException("dummy ise 5$");
    }
  }
}

// Different from JTB (annotation)
private void bp_iv6(int[] i) throws IllegalStateException         :
{/*@bgen(jjtree) bp_iv6 */
  bp_iv6 jjtn000 = new bp_iv6(JJTBP_IV6);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) bp_iv6 */
  try {
/*@egen*/
  { info("iv6 0"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  "6*"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv6 1"); }
  < NUM_2$ >
  { info("iv6 2"); }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    throw new IllegalStateException("dummy ise 6");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

// Different from JTB (annotation)
private void bp_iv6$(final int i) throws IllegalStateException :
{}
{
  { info("iv6$ 0"); }
  "6$"
  { info("iv6$ 1"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  < NUM_3_9 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv6$ 2"); }
  {
    if (i == 6)
    {
      throw new IllegalStateException("dummy ise 6$");
    }
  }
}

// Different from JTB (annotation)
private void bp_iv7(int[] i) throws IllegalStateException         :
{/*@bgen(jjtree) bp_iv7 */
  bp_iv7 jjtn000 = new bp_iv7(JJTBP_IV7);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) bp_iv7 */
  try {
/*@egen*/
  { info("iv7 0"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  "7*"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv7 1"); }
  < NUM_2$ >
  { info("iv7 2"); }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    throw new IllegalStateException("dummy ise 7");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

// Different from JTB (annotation)
private void bp_iv7$(final int i) throws IllegalStateException :
{}
{
  { info("iv7$ 0"); }
  "7$"
  { info("iv7$ 1"); }/*@bgen(jjtree) NodeTokenJJT */
  {
    NodeTokenJJT jjtn001 = new NodeTokenJJT(JJTNODETOKENJJT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  < NUM_3_9>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              
  { info("iv7$ 2"); }
  {
    if (i == 7)
    {
      throw new IllegalStateException("dummy ise 7$");
    }
  }
}

// Different from JTB (annotation)
void Identifier()             :
{/*@bgen(jjtree) Identifier */
  Identifier jjtn000 = new Identifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token tk = null; }
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  tk = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { System.err.println("--- Identifier found < " + tk.image + " > ---"); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

// Different from JTB (annotation)
void Integer_literal()                  :
{/*@bgen(jjtree) Integer_literal */
  Integer_literal jjtn000 = new Integer_literal(JJTINTEGER_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token tk = null; }
{/*@bgen(jjtree) Integer_literal */
  try {
/*@egen*/
  tk = < INTEGER_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    System.err.println("--- Integer_literal found < " + tk.image + " > ---");
    throw new NullPointerException("boum");
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

// dummy, not used, just for overall code coverage
JAVACODE void justSkip() throws IllegalStateException
{
  Token tk = getNextToken();
  throw new IllegalStateException();
}