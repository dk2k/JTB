/* Generated by JTB 1.x.y from visitor/DepthFirstVoidVisitorTest.ftl */
package EDU.purdue.jtb.parser.visitor;

import EDU.purdue.jtb.parser.Token;
import EDU.purdue.jtb.parser.syntaxtree.*;

/**
 * Provides default methods which visit each node in the tree in depth-first order.<br>
 * In your "Void" visitors extend this class and override part or all of these methods.
 */
@SuppressWarnings("unused")
public class DepthFirstVoidVisitorTest implements IVoidVisitorTest {

  /*
   * Base nodes classes visit methods (to be overridden if necessary)
   */

  /**
   * Visits a {@link NodeChoice} node.
   *
   * @param n - the node to visit
   */
  @Override
  public void visit(final NodeChoice n) {
    int a = 0;
    return;
  }

  /**
   * Visits a {@link NodeList} node.
   *
   * @param n - the node to visit
   */
  @Override
  public void visit(final NodeList n) {
    int b = 1;
    return;
  }

  /**
   * Visits a {@link Token} node.
   *
   * @param n - the node to visit
   */
  @Override
  public void visit(final Token n) {
    int c = 2;
    return;
  }

  /*
   * User grammar generated visit methods (to be overridden if necessary)
   */

  /**
   * Visits a {@link CompilationUnit} node, whose children are the following :
   * <p>
   * f0 -> ( %0 < IDENTIFIER ><br>
   * .. .. | %1 "LOOKAHEAD"<br>
   * f1 -> "="<br>
   *
   * @param n - the node to visit
   */
  @Override
  public void visit(final CompilationUnit n) {
    int i = 0;
    return;
  }

  /**
   * Visits a {@link Expression} node, whose children are the following :
   * <p>
   * f0 -> [ #0 "options" #1 "{"<br>
   * .. .. . #2 ( OptionBinding() )*<br>
   *
   * @param n - the node to visit
   */
  @Override
  public void visit(final Expression n) {
    int j = 1;
    return;
  }

  /**
   * Visits a {@link IdentifierAsString} node, whose children are the following :
   * <p>
   * f0 -> JavaCCOptions()<br>
   * f1 -> "PARSER_BEGIN"<br>
   * f1 -> "="<br>
   *
   * @param n - the node to visit
   */
  @Override
  public void visit(final IdentifierAsString n) {
    int k = 2;
    return;
  }

}