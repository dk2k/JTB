/* JTBParser.java */
/* Generated By:JavaCC: Do not edit this line. JTBParser.java */
package EDU.purdue.jtb.parser;

import java.util.List;
import java.util.ArrayList;
import EDU.purdue.jtb.parser.syntaxtree.*;


/**
 * This file contains the code for JavaCCParser generated
 * by JavaCCParser itself.
 */
// ModMMa : adapted from JavaCC.jj to fit to JTB class name
public class JTBParser extends JavaCCParserInternals implements JTBParserConstants {


  /* --- JTB generated return variables declarations --- */

  /** Return variable for the {@link #LocalLookahead} BNFProduction) */
  Lookahead jtbrt_LocalLookahead;

  /** Return variable for the {@link #IdentifierAsString} BNFProduction) */
  String jtbrt_IdentifierAsString;

  /** Return variable for the {@link #JavaIdentifier} BNFProduction) */
  Token jtbrt_JavaIdentifier;

  /** Return variable for the {@link #Modifiers} BNFProduction) */
  int jtbrt_Modifiers;

  /** Return variable for the {@link #Name} BNFProduction) */
  String jtbrt_Name;

  /** Return variable for the {@link #IntegerLiteral} BNFProduction) */
  int jtbrt_IntegerLiteral;

  /** Return variable for the {@link #BooleanLiteral} BNFProduction) */
  boolean jtbrt_BooleanLiteral;

  /** Return variable for the {@link #StringLiteral} BNFProduction) */
  String jtbrt_StringLiteral;

  /* --- User code --- */

  /**
   * The name of the parser class.
   */
  String parser_class_name;

  /**
   * The options, shared with JTB.
   */
  Options opt;

  /**
   * This flag is set to true when the part between PARSER_BEGIN and
   * PARSER_END is being parsed.
   */
  boolean processing_cu = false;

  /**
   * The level of class nesting.
   */
  int class_nesting = 0;

  /**
   * This int variable is incremented while parsing local lookaheads.
   * Hence it keeps track of *syntactic* lookahead nesting.
   * This is used to provide warnings when actions and nested lookaheads
   * are used in syntactic lookahead productions.  This is to prevent
   * typos such as leaving out the comma in LOOKAHEAD( foo(), {check()} ).
   */
  int inLocalLA = 0;

  /**
   * Set to true when the parser is within an action.
   */
  boolean inAction = false;

  /**
   * This flag keeps track of whether or not return and throw
   * statements have been patched during the parsing of a production.
   * The value of this flag is assigned the field with the same
   * name in BNFProduction_.java.
   */
  boolean jumpPatched = false;

  // ModMMa 2023/07 : added
  /** The grammar package */
  public String grammarPackage = null;

  /*
   * Returns true if the next token is not in the FOLLOW list of "expansion".
   * It is used to decide when the end of an "expansion" has been reached.
   */
  private boolean notTailOfExpansionUnit() {
    final Token t = getToken(1);
    if (t.kind == BIT_OR || t.kind == COMMA || t.kind == RPAREN || t.kind == RBRACE || t.kind == RBRACKET)
      return false;
    return true;
  }

  /**
   * Class to hold modifiers.
   */
  static public final class ModifierSet {
    /* --- User code --- */

    /* Definitions of the bits in the modifiers field */

    public static final int M_PUBLIC = 0x0001;

    public static final int M_PROTECTED = 0x0002;

    public static final int M_PRIVATE = 0x0004;

    public static final int M_ABSTRACT = 0x0008;

    public static final int M_STATIC = 0x0010;

    public static final int M_FINAL = 0x0020;

    public static final int M_SYNCHRONIZED = 0x0040;

    public static final int M_NATIVE = 0x0080;

    public static final int M_TRANSIENT = 0x0100;

    public static final int M_VOLATILE = 0x0200;

    public static final int M_STRICTFP = 0x1000;

    /* A set of accessors that indicate whether the specified modifier is in the set */

    public boolean isPublic(int modifiers) {
      return (modifiers & M_PUBLIC) != 0;
    }

    public boolean isProtected(int modifiers) {
      return (modifiers & M_PROTECTED) != 0;
    }

    public boolean isPrivate(int modifiers) {
      return (modifiers & M_PRIVATE) != 0;
    }

    public boolean isStatic(int modifiers) {
      return (modifiers & M_STATIC) != 0;
    }

    public boolean isAbstract(int modifiers) {
      return (modifiers & M_ABSTRACT) != 0;
    }

    public boolean isFinal(int modifiers) {
      return (modifiers & M_FINAL) != 0;
    }

    public boolean isNative(int modifiers) {
      return (modifiers & M_NATIVE) != 0;
    }

    public boolean isStrictfp(int modifiers) {
      return (modifiers & M_STRICTFP) != 0;
    }

    public boolean isSynchronized(int modifiers) {
      return (modifiers & M_SYNCHRONIZED) != 0;
    }

    public boolean isTransient(int modifiers) {
      return (modifiers & M_TRANSIENT) != 0;
    }

    public boolean isVolatile(int modifiers) {
      return (modifiers & M_VOLATILE) != 0;
    }

    /* Removes the given modifier */

    static int removeModifier(int modifiers, int mod) {
      return modifiers & ~mod;
    }
  }

  final public JavaCCInput JavaCCInput(final Options aOptions) throws ParseException {// --- JTB generated node declarations ---
  JavaCCOptions n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  IdentifierAsString n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  CompilationUnit n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  IdentifierAsString n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeList n16 = new NodeList();
  NodeSequence n17 = null;
  Production n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  JavaCCInput jtbNode = null;
  // --- user BNFProduction java block ---
  opt = aOptions;
  String id1 = null;
  String id2 = null;
  initialize();
// ModMMa : added to JavaCC as called in parser.Main in Javacc 4.2
// ModMMa 2017/03 removed as done in JTB
//  opt.init();

    // --- user BNFProduction ExpansionChoices ---
      n0 = JavaCCOptions();
    n2 = jj_consume_token(_PARSER_BEGIN);
n1 = (NodeToken) n2;
    n4 = jj_consume_token(LPAREN);
n3 = (NodeToken) n4;
String oldJtbrt_IdentifierAsString_1 = jtbrt_IdentifierAsString;
    n5 = IdentifierAsString();
id1 = jtbrt_IdentifierAsString;
jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_1;
addcuname(id1);
    n7 = jj_consume_token(RPAREN);
n6 = (NodeToken) n7;
processing_cu = true;
    parser_class_name = id1;
    n8 = CompilationUnit();
processing_cu = false;
    n10 = jj_consume_token(_PARSER_END);
n9 = (NodeToken) n10;
    n12 = jj_consume_token(LPAREN);
n11 = (NodeToken) n12;
String oldJtbrt_IdentifierAsString_2 = jtbrt_IdentifierAsString;
    n13 = IdentifierAsString();
id2 = jtbrt_IdentifierAsString;
jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_2;
compare(getToken(0), id1, id2);
    n15 = jj_consume_token(RPAREN);
n14 = (NodeToken) n15;
    label_1:
    while (true) {
n17 = new NodeSequence(1);
      n18 = Production();
n17.addNode(n18);
n16.addNode(n17);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case VOID:
      case LT:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
n16.nodes.trimToSize();
    // ModMMa 2012/09 : added to forbid punctuation between productions
        n20 = jj_consume_token(0);
n20.beginColumn++;
n20.endColumn++;
n19 = (NodeToken) n20;
jtbNode = new JavaCCInput(n0, n1, n3, n5, n6, n8, n9, n11, n13, n14, n16, n19);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public JavaCCOptions JavaCCOptions() throws ParseException {// --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeListOptional n6 = null;
  NodeSequence n7 = null;
  OptionBinding n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  JavaCCOptions jtbNode = null;
    if (getToken(1).image.equals("options")) {
n6 = new NodeListOptional();
n1 = new NodeSequence(4);
      n3 = jj_consume_token(140);
n2 = (NodeToken) n3;
n1.addNode(n2);
      n5 = jj_consume_token(LBRACE);
n4 = (NodeToken) n5;
n1.addNode(n4);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case STATIC:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
n7 = new NodeSequence(1);
        n8 = OptionBinding();
n7.addNode(n8);
n6.addNode(n7);
      }
n6.nodes.trimToSize();
n1.addNode(n6);
      n10 = jj_consume_token(RBRACE);
n9 = (NodeToken) n10;
n1.addNode(n9);
n0.addNode(n1);
    } else {
      ;
    }
opt.normalize();
jtbNode = new JavaCCOptions(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public OptionBinding OptionBinding() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeChoice n15 = null;
  NodeSequence n16 = null;
  IntegerLiteral n17 = null;
  NodeSequence n18 = null;
  BooleanLiteral n19 = null;
  NodeSequence n20 = null;
  StringLiteral n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  OptionBinding jtbNode = null;
  // --- user BNFProduction java block ---
  String option_name = null;
  int int_val = 0;
  boolean bool_val = false;
  String string_val = null;
  Token t = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
n1 = new NodeSequence(1);
      n3 = jj_consume_token(IDENTIFIER);
n2 = (NodeToken) n3;
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 4);
      break;
      }
    case _LOOKAHEAD:{
n4 = new NodeSequence(1);
      n6 = jj_consume_token(_LOOKAHEAD);
n5 = (NodeToken) n6;
n4.addNode(n5);
n0 = new NodeChoice(n4, 1, 4);
      break;
      }
    case _IGNORE_CASE:{
n7 = new NodeSequence(1);
      n9 = jj_consume_token(_IGNORE_CASE);
n8 = (NodeToken) n9;
n7.addNode(n8);
n0 = new NodeChoice(n7, 2, 4);
      break;
      }
    case STATIC:{
n10 = new NodeSequence(1);
      n12 = jj_consume_token(STATIC);
n11 = (NodeToken) n12;
n10.addNode(n11);
n0 = new NodeChoice(n10, 3, 4);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
option_name = t.image;
    n14 = jj_consume_token(ASSIGN);
n13 = (NodeToken) n14;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
n16 = new NodeSequence(1);
int oldJtbrt_IntegerLiteral_1 = jtbrt_IntegerLiteral;
      n17 = IntegerLiteral();
int_val = jtbrt_IntegerLiteral;
jtbrt_IntegerLiteral = oldJtbrt_IntegerLiteral_1;
n16.addNode(n17);
// ModMMa Integer(int) in Integer has been deprecated and marked for removal
        //      opt.setInputFileOption(t, getToken(0), option_name, new Integer(int_val));
        opt.setInputFileOption(t, getToken(0), option_name, int_val);
n15 = new NodeChoice(n16, 0, 3);
      break;
      }
    case FALSE:
    case TRUE:{
n18 = new NodeSequence(1);
boolean oldJtbrt_BooleanLiteral_2 = jtbrt_BooleanLiteral;
      n19 = BooleanLiteral();
bool_val = jtbrt_BooleanLiteral;
jtbrt_BooleanLiteral = oldJtbrt_BooleanLiteral_2;
n18.addNode(n19);
// ModMMa Integer(int) in Integer has been deprecated and marked for removal
        //      opt.setInputFileOption(t, getToken(0), option_name, new Boolean(bool_val));
        opt.setInputFileOption(t, getToken(0), option_name, bool_val);
n15 = new NodeChoice(n18, 1, 3);
      break;
      }
    case STRING_LITERAL:{
n20 = new NodeSequence(1);
String oldJtbrt_StringLiteral_3 = jtbrt_StringLiteral;
      n21 = StringLiteral();
string_val = jtbrt_StringLiteral;
jtbrt_StringLiteral = oldJtbrt_StringLiteral_3;
n20.addNode(n21);
opt.setInputFileOption(t, getToken(0), option_name, string_val);
n15 = new NodeChoice(n20, 2, 3);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n23 = jj_consume_token(SEMICOLON);
n22 = (NodeToken) n23;
jtbNode = new OptionBinding(n0, n13, n15, n22);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public Production Production() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  JavaCodeProduction n2 = null;
  NodeSequence n3 = null;
  RegularExprProduction n4 = null;
  NodeSequence n5 = null;
  TokenManagerDecls n6 = null;
  NodeSequence n7 = null;
  BNFProduction n8 = null;
  Production jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case _JAVACODE:{
n1 = new NodeSequence(1);
      /*
         * Since JAVACODE is both a JavaCC reserved word and a Java identifier,
         * we need to give preference to "JavaCodeProduction" over "BNFProduction"
         */
          n2 = JavaCodeProduction();
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 4);
      break;
      }
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case LT:{
n3 = new NodeSequence(1);
      /*
         * Since SKIP, TOKEN, etc. are both JavaCC reserved words and Java identifiers,
         * we need to give preference to "RegularExprProduction" over "BNFProduction"
         */
          n4 = RegularExprProduction();
n3.addNode(n4);
n0 = new NodeChoice(n3, 1, 4);
      break;
      }
    case _TOKEN_MGR_DECLS:{
n5 = new NodeSequence(1);
      /*
         * Since TOKEN_MGR_DECLS is both a JavaCC reserved word and a Java identifier,
         * we need to give preference to "TokenManagerDecls" over "BNFProduction"
         */
          n6 = TokenManagerDecls();
n5.addNode(n6);
n0 = new NodeChoice(n5, 2, 4);
      break;
      }
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case VOID:
    case IDENTIFIER:{
n7 = new NodeSequence(1);
      n8 = BNFProduction();
n7.addNode(n8);
n0 = new NodeChoice(n7, 3, 4);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new Production(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public JavaCodeProduction JavaCodeProduction() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  AccessModifier n2 = null;
  ResultType n3 = null;
  IdentifierAsString n4 = null;
  FormalParameters n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Name n10 = null;
  NodeListOptional n11 = null;
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  Name n15 = null;
  NodeOptional n16 = new NodeOptional();
  NodeSequence n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  Block n20 = null;
  JavaCodeProduction jtbNode = null;
  // --- user BNFProduction java block ---
  JavaCodeProduction_ p = new JavaCodeProduction_();
  String lhs = null;
  Token t = getToken(1);
  p.setFirstToken(t);
  List<Token> excName = null;
  p.setThrowsList(new ArrayList<List<Token>>());
  p.setLine(t.beginLine);
  p.setColumn(t.beginColumn);
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(_JAVACODE);
n0 = (NodeToken) n1;
    n2 = AccessModifier(p);
    n3 = ResultType(p.getReturnTypeTokens());
String oldJtbrt_IdentifierAsString_1 = jtbrt_IdentifierAsString;
    n4 = IdentifierAsString();
lhs = jtbrt_IdentifierAsString;
jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_1;
p.setLhs(lhs);
    n5 = FormalParameters(p.getParameterListTokens());
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case THROWS:{
n11 = new NodeListOptional();
n7 = new NodeSequence(3);
      n9 = jj_consume_token(THROWS);
n8 = (NodeToken) n9;
n7.addNode(n8);
excName = new ArrayList<Token>();
      n10 = Name(excName);
n7.addNode(n10);
p.getThrowsList().add(excName);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
excName = new ArrayList<Token>();
n12 = new NodeSequence(2);
        n14 = jj_consume_token(COMMA);
n13 = (NodeToken) n14;
n12.addNode(n13);
        n15 = Name(excName);
n12.addNode(n15);
p.getThrowsList().add(excName);
n11.addNode(n12);
      }
n11.nodes.trimToSize();
n6.addNode(n7);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REM:{
n17 = new NodeSequence(1);
      n19 = jj_consume_token(REM);
n18 = (NodeToken) n19;
n17.addNode(n18);
n16.addNode(n17);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    n20 = Block(p.getCodeTokens());
p.setLastToken(getToken(0));
    addproduction(p);
jtbNode = new JavaCodeProduction(n0, n2, n3, n4, n5, n6, n16, n20);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public BNFProduction BNFProduction() throws ParseException {// --- JTB generated node declarations ---
  AccessModifier n0 = null;
  ResultType n1 = null;
  IdentifierAsString n2 = null;
  FormalParameters n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Name n8 = null;
  NodeListOptional n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  Name n13 = null;
  NodeOptional n14 = new NodeOptional();
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  Block n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  ExpansionChoices n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  BNFProduction jtbNode = null;
  // --- user BNFProduction java block ---
  BNFProduction_ p = new BNFProduction_();
  Container c = new Container();
  Token t = getToken(1);
  p.setFirstToken(t);
  List<Token> excName = null;
  String lhs = null;
  p.setThrowsList(new ArrayList<List<Token>>());
  p.setLine(t.beginLine);
  p.setColumn(t.beginColumn);
  jumpPatched = false;
    // --- user BNFProduction ExpansionChoices ---
      n0 = AccessModifier(p);
    n1 = ResultType(p.getReturnTypeTokens());
String oldJtbrt_IdentifierAsString_1 = jtbrt_IdentifierAsString;
    n2 = IdentifierAsString();
lhs = jtbrt_IdentifierAsString;
jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_1;
p.setLhs(lhs);
    n3 = FormalParameters(p.getParameterListTokens());
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case THROWS:{
n9 = new NodeListOptional();
n5 = new NodeSequence(3);
      n7 = jj_consume_token(THROWS);
n6 = (NodeToken) n7;
n5.addNode(n6);
excName = new ArrayList<Token>();
      n8 = Name(excName);
n5.addNode(n8);
p.getThrowsList().add(excName);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
excName = new ArrayList<Token>();
n10 = new NodeSequence(2);
        n12 = jj_consume_token(COMMA);
n11 = (NodeToken) n12;
n10.addNode(n11);
        n13 = Name(excName);
n10.addNode(n13);
p.getThrowsList().add(excName);
n9.addNode(n10);
      }
n9.nodes.trimToSize();
n4.addNode(n5);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BANG:{
n15 = new NodeSequence(1);
      n17 = jj_consume_token(BANG);
n16 = (NodeToken) n17;
n15.addNode(n16);
n14.addNode(n15);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    n19 = jj_consume_token(COLON);
n18 = (NodeToken) n19;
    n20 = Block(p.getDeclarationTokens());
    n22 = jj_consume_token(LBRACE);
n21 = (NodeToken) n22;
    n23 = ExpansionChoices(c);
    n25 = jj_consume_token(RBRACE);
n24 = (NodeToken) n25;
t = n25;
p.setLastToken(t);
    p.setJumpPatched(jumpPatched);
    production_addexpansion(p, (Expansion_)(c.member));
    addproduction(p);
jtbNode = new BNFProduction(n0, n1, n2, n3, n4, n14, n18, n20, n21, n23, n24);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public AccessModifier AccessModifier(NormalProduction p) throws ParseException {// --- JTB generated node declarations ---
  NodeListOptional n0 = new NodeListOptional();
  NodeChoice n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  AccessModifier jtbNode = null;
  // --- user BNFProduction java block ---
  Token t = null;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC:{
n2 = new NodeSequence(1);
        n4 = jj_consume_token(PUBLIC);
n3 = (NodeToken) n4;
t = n4;
n2.addNode(n3);
n1 = new NodeChoice(n2, 0, 4);
        break;
        }
      case PROTECTED:{
n5 = new NodeSequence(1);
        n7 = jj_consume_token(PROTECTED);
n6 = (NodeToken) n7;
t = n7;
n5.addNode(n6);
n1 = new NodeChoice(n5, 1, 4);
        break;
        }
      case PRIVATE:{
n8 = new NodeSequence(1);
        n10 = jj_consume_token(PRIVATE);
n9 = (NodeToken) n10;
t = n10;
n8.addNode(n9);
n1 = new NodeChoice(n8, 2, 4);
        break;
        }
      case FINAL:{
n11 = new NodeSequence(1);
        n13 = jj_consume_token(FINAL);
n12 = (NodeToken) n13;
n11.addNode(n12);
n1 = new NodeChoice(n11, 3, 4);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n0.addNode(n1);
    }
n0.nodes.trimToSize();
if (t != null)
      p.setAccessMod(t.image);
jtbNode = new AccessModifier(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public RegularExprProduction RegularExprProduction() throws ParseException {// --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeChoice n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeListOptional n14 = null;
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  RegExprKind n22 = null;
  NodeOptional n23 = new NodeOptional();
  NodeSequence n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  RegExprSpec n35 = null;
  NodeListOptional n36 = new NodeListOptional();
  NodeSequence n37 = null;
  NodeToken n38 = null;
  Token n39 = null;
  RegExprSpec n40 = null;
  NodeToken n41 = null;
  Token n42 = null;
  RegularExprProduction jtbNode = null;
  // --- user BNFProduction java block ---
  TokenProduction p = new TokenProduction();
  List<String> states = null;
  Token t = p.firstToken = getToken(1);
  p.setLine(t.beginLine);
  p.setColumn(t.beginColumn);
/* Set p.lexStates assuming there is no lexical state specified, and then override if necessary */
    p.lexStates = new String[]{ "DEFAULT" };
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LT:{
n14 = new NodeListOptional();
      if (jj_2_1(2)) {
n2 = new NodeSequence(3);
        n4 = jj_consume_token(LT);
n3 = (NodeToken) n4;
n2.addNode(n3);
        n6 = jj_consume_token(STAR);
n5 = (NodeToken) n6;
n2.addNode(n5);
        n8 = jj_consume_token(GT);
n7 = (NodeToken) n8;
n2.addNode(n7);
p.lexStates = null;
n1 = new NodeChoice(n2, 0, 2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LT:{
n9 = new NodeSequence(4);
          n11 = jj_consume_token(LT);
n10 = (NodeToken) n11;
n9.addNode(n10);
states = new ArrayList<String>();
          n13 = jj_consume_token(IDENTIFIER);
n12 = (NodeToken) n13;
t = n13;
n9.addNode(n12);
states.add(t.image);
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[13] = jj_gen;
              break label_6;
            }
n15 = new NodeSequence(2);
            n17 = jj_consume_token(COMMA);
n16 = (NodeToken) n17;
n15.addNode(n16);
            n19 = jj_consume_token(IDENTIFIER);
n18 = (NodeToken) n19;
t = n19;
n15.addNode(n18);
states.add(t.image);
n14.addNode(n15);
          }
n14.nodes.trimToSize();
n9.addNode(n14);
          n21 = jj_consume_token(GT);
n20 = (NodeToken) n21;
n9.addNode(n20);
p.lexStates = new String[states.size()];
        // ModMMa : workaround for Eclipse plugin color syntax problem
        // for (int i = 0; i < states.size(); i++) {
        for (int i = 0; i != states.size(); i++)
          p.lexStates[i] = states.get(i);
n1 = new NodeChoice(n9, 1, 2);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
n0.addNode(n1);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    n22 = RegExprKind(p);
if (p.kind != TokenProduction.TOKEN && opt.getUserTokenManager())
      JavaCCErrors.warning(getToken(0), "Regular expression is being treated as if it were a TOKEN since option USER_TOKEN_MANAGER has been set to true.");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
n24 = new NodeSequence(3);
      n26 = jj_consume_token(LBRACKET);
n25 = (NodeToken) n26;
n24.addNode(n25);
      n28 = jj_consume_token(_IGNORE_CASE);
n27 = (NodeToken) n28;
t = n28;
n24.addNode(n27);
      n30 = jj_consume_token(RBRACKET);
n29 = (NodeToken) n30;
n24.addNode(n29);
p.ignoreCase = true;
      if (opt.getUserTokenManager())
        JavaCCErrors.warning(t, "Ignoring \"IGNORE_CASE\" specification since option USER_TOKEN_MANAGER has been set to true.");
n23.addNode(n24);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    n32 = jj_consume_token(COLON);
n31 = (NodeToken) n32;
    n34 = jj_consume_token(LBRACE);
n33 = (NodeToken) n34;
    n35 = RegExprSpec(p);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_OR:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
n37 = new NodeSequence(2);
      n39 = jj_consume_token(BIT_OR);
n38 = (NodeToken) n39;
n37.addNode(n38);
      n40 = RegExprSpec(p);
n37.addNode(n40);
n36.addNode(n37);
    }
n36.nodes.trimToSize();
    n42 = jj_consume_token(RBRACE);
n41 = (NodeToken) n42;
t = n42;
p.lastToken = t;
    addregexpr(p, opt.getUserTokenManager());
jtbNode = new RegularExprProduction(n0, n22, n23, n31, n33, n35, n36, n41);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public TokenManagerDecls TokenManagerDecls() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  ClassOrInterfaceBody n4 = null;
  TokenManagerDecls jtbNode = null;
  // --- user BNFProduction java block ---
  List<Token> decls = new ArrayList<Token>();
  Token t = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(_TOKEN_MGR_DECLS);
n0 = (NodeToken) n1;
t = n1;
    n3 = jj_consume_token(COLON);
n2 = (NodeToken) n3;
    n4 = ClassOrInterfaceBody(false, decls);
add_token_manager_decls(t, decls, opt.getUserTokenManager());
jtbNode = new TokenManagerDecls(n0, n2, n4);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public RegExprKind RegExprKind(TokenProduction p) throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  RegExprKind jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case _TOKEN:{
n1 = new NodeSequence(1);
      n3 = jj_consume_token(_TOKEN);
n2 = (NodeToken) n3;
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 4);
p.kind = TokenProduction.TOKEN;
      break;
      }
    case _SPECIAL_TOKEN:{
n4 = new NodeSequence(1);
      n6 = jj_consume_token(_SPECIAL_TOKEN);
n5 = (NodeToken) n6;
n4.addNode(n5);
n0 = new NodeChoice(n4, 1, 4);
p.kind = TokenProduction.SPECIAL;
      break;
      }
    case _SKIP:{
n7 = new NodeSequence(1);
      n9 = jj_consume_token(_SKIP);
n8 = (NodeToken) n9;
n7.addNode(n8);
n0 = new NodeChoice(n7, 2, 4);
p.kind = TokenProduction.SKIP;
      break;
      }
    case _MORE:{
n10 = new NodeSequence(1);
      n12 = jj_consume_token(_MORE);
n11 = (NodeToken) n12;
n10.addNode(n11);
n0 = new NodeChoice(n10, 3, 4);
p.kind = TokenProduction.MORE;
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new RegExprKind(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public RegExprSpec RegExprSpec(TokenProduction p) throws ParseException {// --- JTB generated node declarations ---
  RegularExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeSequence n6 = null;
  Block n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  RegExprSpec jtbNode = null;
  // --- user BNFProduction java block ---
  Container c = new Container();
  Action act = new Action();
  Token t = null;
  RegExprSpec_ res = new RegExprSpec_();
    // --- user BNFProduction ExpansionChoices ---
      n0 = RegularExpression(c);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BANG:{
n2 = new NodeSequence(1);
      n4 = jj_consume_token(BANG);
n3 = (NodeToken) n4;
n2.addNode(n3);
n1.addNode(n2);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
res.rexp = (RegularExpression_)c.member;
    res.rexp.tpContext = p;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
t = getToken(1);
n6 = new NodeSequence(1);
      n7 = Block(act.getActionTokens());
n6.addNode(n7);
if (opt.getUserTokenManager())
        JavaCCErrors.warning(t, "Ignoring action in regular expression specification since option USER_TOKEN_MANAGER has been set to true.");
      if (res.rexp.private_rexp)
        JavaCCErrors.parse_error(t, "Actions are not permitted on private (#) regular expressions.");
n5.addNode(n6);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON:{
n9 = new NodeSequence(2);
      n11 = jj_consume_token(COLON);
n10 = (NodeToken) n11;
n9.addNode(n10);
      n13 = jj_consume_token(IDENTIFIER);
n12 = (NodeToken) n13;
t = n13;
n9.addNode(n12);
res.nextState = t.image;
      if (res.rexp.private_rexp)
        JavaCCErrors.parse_error(t, "Lexical state changes are not permitted after private (#) regular expressions.");
n8.addNode(n9);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
res.act = act;
    res.nsTok = t;
    p.respecs.add(res);
jtbNode = new RegExprSpec(n0, n1, n5, n8);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ExpansionChoices ExpansionChoices(Container c1) throws ParseException {// --- JTB generated node declarations ---
  Expansion n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expansion n5 = null;
  ExpansionChoices jtbNode = null;
  // --- user BNFProduction java block ---
  boolean morethanone = false;
  Choice ch = new Choice();
  Container c2 = new Container();
    // --- user BNFProduction ExpansionChoices ---
      n0 = Expansion(c1);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_OR:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_8;
      }
n2 = new NodeSequence(2);
      n4 = jj_consume_token(BIT_OR);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = Expansion(c2);
n2.addNode(n5);
if (morethanone) {
        ch.getChoices().add((Expansion_)c2.member);
        ((Expansion_)c2.member).parent = ch;
      } else {
        morethanone = true;
        ch = new Choice((Expansion_)c1.member);
        ((Expansion_)c1.member).parent = ch;
        ch.getChoices().add((Expansion_)c2.member);
        ((Expansion_)c2.member).parent = ch;
      }
n1.addNode(n2);
    }
n1.nodes.trimToSize();
if (morethanone)
      c1.member = ch;
jtbNode = new ExpansionChoices(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public Expansion Expansion(Container c1) throws ParseException {// --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  LocalLookahead n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeList n9 = new NodeList();
  NodeSequence n10 = null;
  ExpansionUnit n11 = null;
  Expansion jtbNode = null;
  // --- user BNFProduction java block ---
  Sequence seq = new Sequence();
  Container c2 = new Container();
  Lookahead la = new Lookahead();
  Token t = getToken(1);
  seq.setLine(t.beginLine);
  seq.setColumn(t.beginColumn);
  la.setLine(t.beginLine);
  la.setColumn(t.beginColumn);
la.setAmount(opt.getLookahead());
    la.setLaExpansion(null);
    la.setExplicit(false);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case _LOOKAHEAD:{
n1 = new NodeSequence(4);
      n3 = jj_consume_token(_LOOKAHEAD);
n2 = (NodeToken) n3;
t = n3;
n1.addNode(n2);
      n5 = jj_consume_token(LPAREN);
n4 = (NodeToken) n5;
n1.addNode(n4);
Lookahead oldJtbrt_LocalLookahead_1 = jtbrt_LocalLookahead;
      n6 = LocalLookahead();
la = jtbrt_LocalLookahead;
jtbrt_LocalLookahead = oldJtbrt_LocalLookahead_1;
n1.addNode(n6);
      n8 = jj_consume_token(RPAREN);
n7 = (NodeToken) n8;
n1.addNode(n7);
if (inLocalLA != 0 && la.getAmount() != 0)
        JavaCCErrors.warning(t, "Only semantic lookahead specifications within other lookahead specifications is considered.  Syntactic lookahead is ignored.");
n0.addNode(n1);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
seq.units.add(la);
    label_9:
    while (true) {
n10 = new NodeSequence(1);
      n11 = ExpansionUnit(c2);
n10.addNode(n11);
seq.units.add((Expansion_)c2.member);
      ((Expansion_)c2.member).parent = seq;
      ((Expansion_)c2.member).ordinal = seq.units.size() - 1;
n9.addNode(n10);
      if (notTailOfExpansionUnit()) {
        ;
      } else {
        break label_9;
      }
    }
n9.nodes.trimToSize();
if (la.getLaExpansion() == null)
      la.setLaExpansion(seq);
    c1.member = seq;
jtbNode = new Expansion(n0, n9);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public LocalLookahead LocalLookahead() throws ParseException {// --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  IntegerLiteral n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeSequence n8 = null;
  ExpansionChoices n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeOptional n14 = new NodeOptional();
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeOptional n18 = null;
  NodeSequence n19 = null;
  Expression n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  LocalLookahead jtbNode = null;
  // --- user BNFProduction java block ---
  Lookahead la = new Lookahead();
  la.setExplicit(true);
  Token t = getToken(1);
  la.setLine(t.beginLine);
  la.setColumn(t.beginColumn);
  la.setLaExpansion(null);
  Container c = new Container();
  boolean commaAtEnd = false, emptyLA = true;
  int laAmount = 0;
  inLocalLA++;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
n1 = new NodeSequence(1);
int oldJtbrt_IntegerLiteral_1 = jtbrt_IntegerLiteral;
      n2 = IntegerLiteral();
laAmount = jtbrt_IntegerLiteral;
jtbrt_IntegerLiteral = oldJtbrt_IntegerLiteral_1;
n1.addNode(n2);
emptyLA = false;
      la.setAmount(laAmount);
n0.addNode(n1);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    if (!emptyLA && (getToken(1).kind != RPAREN)) {
n4 = new NodeSequence(1);
      n6 = jj_consume_token(COMMA);
n5 = (NodeToken) n6;
n4.addNode(n5);
commaAtEnd = true;
n3.addNode(n4);
    } else {
      ;
    }
    if (getToken(1).kind != RPAREN && getToken(1).kind != LBRACE) {
n8 = new NodeSequence(1);
      n9 = ExpansionChoices(c);
n8.addNode(n9);
emptyLA = false;
      commaAtEnd = false;
      la.setLaExpansion((Expansion_)c.member);
n7.addNode(n8);
    } else {
      ;
    }
    if (!emptyLA && !commaAtEnd && (getToken(1).kind != RPAREN)) {
n11 = new NodeSequence(1);
      n13 = jj_consume_token(COMMA);
n12 = (NodeToken) n13;
n11.addNode(n12);
commaAtEnd = true;
n10.addNode(n11);
    } else {
      ;
    }
    if (emptyLA || commaAtEnd) {
n18 = new NodeOptional();
n15 = new NodeSequence(3);
      n17 = jj_consume_token(LBRACE);
n16 = (NodeToken) n17;
n15.addNode(n16);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case IDENTIFIER:{
n19 = new NodeSequence(1);
        n20 = Expression(la.getActionTokens());
n19.addNode(n20);
n18.addNode(n19);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
n15.addNode(n18);
      n22 = jj_consume_token(RBRACE);
n21 = (NodeToken) n22;
n15.addNode(n21);
if (emptyLA)
        la.setAmount(0);
n14.addNode(n15);
    } else {
      ;
    }
jtbNode = new LocalLookahead(n0, n3, n7, n10, n14);
inLocalLA--;
    jtbrt_LocalLookahead = la;
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ExpansionUnit ExpansionUnit(Container c) throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  LocalLookahead n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  Block n10 = null;
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  ExpansionChoices n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeSequence n17 = null;
  ExpansionUnitTCF n18 = null;
  NodeSequence n19 = null;
  NodeOptional n20 = new NodeOptional();
  NodeSequence n21 = null;
  PrimaryExpression n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeChoice n25 = null;
  NodeSequence n26 = null;
  IdentifierAsString n27 = null;
  Arguments n28 = null;
  NodeOptional n29 = new NodeOptional();
  NodeSequence n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeSequence n33 = null;
  RegularExpression n34 = null;
  NodeOptional n35 = new NodeOptional();
  NodeSequence n36 = null;
  NodeToken n37 = null;
  Token n38 = null;
  NodeToken n39 = null;
  Token n40 = null;
  NodeOptional n41 = new NodeOptional();
  NodeSequence n42 = null;
  NodeToken n43 = null;
  Token n44 = null;
  NodeSequence n45 = null;
  NodeToken n46 = null;
  Token n47 = null;
  ExpansionChoices n48 = null;
  NodeToken n49 = null;
  Token n50 = null;
  NodeOptional n51 = new NodeOptional();
  NodeChoice n52 = null;
  NodeSequence n53 = null;
  NodeToken n54 = null;
  Token n55 = null;
  NodeSequence n56 = null;
  NodeToken n57 = null;
  Token n58 = null;
  NodeSequence n59 = null;
  NodeToken n60 = null;
  Token n61 = null;
  ExpansionUnit jtbNode = null;
  // --- user BNFProduction java block ---
  String name = null;
  List<Token> lhsTokens = new ArrayList<Token>();
  NonTerminal nt = null;
  Action act = null;
  Token t = null;
  Lookahead la = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case _LOOKAHEAD:{
n1 = new NodeSequence(4);
      n3 = jj_consume_token(_LOOKAHEAD);
n2 = (NodeToken) n3;
// We give this priority over primary expressions which use LOOKAHEAD as the name of its identifier
    t = n3;
n1.addNode(n2);
      n5 = jj_consume_token(LPAREN);
n4 = (NodeToken) n5;
n1.addNode(n4);
Lookahead oldJtbrt_LocalLookahead_1 = jtbrt_LocalLookahead;
      n6 = LocalLookahead();
la = jtbrt_LocalLookahead;
jtbrt_LocalLookahead = oldJtbrt_LocalLookahead_1;
n1.addNode(n6);
      n8 = jj_consume_token(RPAREN);
n7 = (NodeToken) n8;
n1.addNode(n7);
n0 = new NodeChoice(n1, 0, 6);
// Now set the la_expansion field of la with a dummy expansion (we use EOF)
      la.setLaExpansion(new REndOfFile());
      // Create a singleton choice with an empty action
      Choice ch = new Choice(t);
      Sequence seq = new Sequence(t, la);
      la.parent = seq;
      la.ordinal = 0;
      act = new Action();
      act.setLine(t.beginLine);
      act.setColumn(t.beginColumn);
      seq.units.add(act);
      act.parent = seq;
      act.ordinal = 1;
      ch.getChoices().add(seq);
      seq.parent = ch;
      seq.ordinal = 0;
      if (la.getAmount() != 0)
        if (la.getActionTokens().size() != 0)
          JavaCCErrors.warning(t, "Encountered LOOKAHEAD(...) at a non-choice location.  Only semantic lookahead will be considered here.");
        else
          JavaCCErrors.warning(t, "Encountered LOOKAHEAD(...) at a non-choice location.  This will be ignored.");
      c.member = ch;
      break;
      }
    case LBRACE:{
act = new Action();
      t = getToken(1);
      act.setLine(t.beginLine);
      act.setColumn(t.beginColumn);
      inAction = true;
n9 = new NodeSequence(1);
      n10 = Block(act.getActionTokens());
n9.addNode(n10);
n0 = new NodeChoice(n9, 1, 6);
inAction = false;
      if (inLocalLA != 0)
        JavaCCErrors.warning(t, "Action within lookahead specification will be ignored.");
      c.member = act;
      break;
      }
    case LBRACKET:{
n11 = new NodeSequence(3);
      n13 = jj_consume_token(LBRACKET);
n12 = (NodeToken) n13;
t = n13;
n11.addNode(n12);
      n14 = ExpansionChoices(c);
n11.addNode(n14);
      n16 = jj_consume_token(RBRACKET);
n15 = (NodeToken) n16;
n11.addNode(n15);
n0 = new NodeChoice(n11, 2, 6);
c.member = new ZeroOrOne(t, (Expansion_)c.member);
      break;
      }
    case TRY:{
n17 = new NodeSequence(1);
      n18 = ExpansionUnitTCF(c);
n17.addNode(n18);
n0 = new NodeChoice(n17, 3, 6);
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      if (jj_2_3(2147483647)) {
n19 = new NodeSequence(2);
        if (jj_2_2(2147483647)) {
Token first = getToken(1);
n21 = new NodeSequence(2);
          n22 = PrimaryExpression();
n21.addNode(n22);
Token last = getToken(0);
          n24 = jj_consume_token(ASSIGN);
n23 = (NodeToken) n24;
n21.addNode(n23);
t = first;
        while (true) {
          lhsTokens.add(t);
          if (t == last)
            break;
          t = t.next;
        }
n20.addNode(n21);
        } else {
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
nt = new NonTerminal();
          t = getToken(1);
          nt.setLine(t.beginLine);
          nt.setColumn(t.beginColumn);
          nt.setLhsTokens(lhsTokens);
n26 = new NodeSequence(3);
String oldJtbrt_IdentifierAsString_2 = jtbrt_IdentifierAsString;
          n27 = IdentifierAsString();
name = jtbrt_IdentifierAsString;
jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_2;
n26.addNode(n27);
          n28 = Arguments(nt.getArgumentTokens());
n26.addNode(n28);
nt.setName(name);
          c.member = nt;
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BANG:{
n30 = new NodeSequence(1);
            n32 = jj_consume_token(BANG);
n31 = (NodeToken) n32;
n30.addNode(n31);
n29.addNode(n30);
            break;
            }
          default:
            jj_la1[26] = jj_gen;
            ;
          }
n26.addNode(n29);
n25 = new NodeChoice(n26, 0, 2);
          break;
          }
        case STRING_LITERAL:
        case LT:{
n33 = new NodeSequence(3);
          n34 = RegularExpression(c);
n33.addNode(n34);
((RegularExpression_)(c.member)).lhsTokens = lhsTokens;
          add_inline_regexpr((RegularExpression_)(c.member));
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DOT:{
n36 = new NodeSequence(2);
            // ModMMa 2022/10 : looks this does not correspond to any real meaningful use, could disappear
                      n38 = jj_consume_token(DOT);
n37 = (NodeToken) n38;
n36.addNode(n37);
            n40 = jj_consume_token(IDENTIFIER);
n39 = (NodeToken) n40;
t = n40;
n36.addNode(n39);
((RegularExpression_)(c.member)).rhsToken = t;
n35.addNode(n36);
            break;
            }
          default:
            jj_la1[27] = jj_gen;
            ;
          }
n33.addNode(n35);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BANG:{
n42 = new NodeSequence(1);
            n44 = jj_consume_token(BANG);
n43 = (NodeToken) n44;
n42.addNode(n43);
n41.addNode(n42);
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            ;
          }
n33.addNode(n41);
n25 = new NodeChoice(n33, 1, 2);
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
n19.addNode(n25);
n0 = new NodeChoice(n19, 4, 6);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
n45 = new NodeSequence(4);
          n47 = jj_consume_token(LPAREN);
n46 = (NodeToken) n47;
t = n47;
n45.addNode(n46);
          n48 = ExpansionChoices(c);
n45.addNode(n48);
          n50 = jj_consume_token(RPAREN);
n49 = (NodeToken) n50;
n45.addNode(n49);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case HOOK:
          case PLUS:
          case STAR:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case PLUS:{
n53 = new NodeSequence(1);
              n55 = jj_consume_token(PLUS);
n54 = (NodeToken) n55;
n53.addNode(n54);
c.member = new OneOrMore(t, (Expansion_)c.member);
n52 = new NodeChoice(n53, 0, 3);
              break;
              }
            case STAR:{
n56 = new NodeSequence(1);
              n58 = jj_consume_token(STAR);
n57 = (NodeToken) n58;
n56.addNode(n57);
c.member = new ZeroOrMore(t, (Expansion_)c.member);
n52 = new NodeChoice(n56, 1, 3);
              break;
              }
            case HOOK:{
n59 = new NodeSequence(1);
              n61 = jj_consume_token(HOOK);
n60 = (NodeToken) n61;
n59.addNode(n60);
c.member = new ZeroOrOne(t, (Expansion_)c.member);
n52 = new NodeChoice(n59, 2, 3);
              break;
              }
            default:
              jj_la1[30] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
n51.addNode(n52);
            break;
            }
          default:
            jj_la1[31] = jj_gen;
            ;
          }
n45.addNode(n51);
n0 = new NodeChoice(n45, 5, 6);
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
jtbNode = new ExpansionUnit(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ExpansionUnitTCF ExpansionUnitTCF(Container c) throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  ExpansionChoices n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeListOptional n7 = new NodeListOptional();
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeListOptional n13 = null;
  NodeSequence n14 = null;
  Annotation n15 = null;
  NodeOptional n16 = null;
  NodeSequence n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  Name n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  Block n25 = null;
  NodeOptional n26 = new NodeOptional();
  NodeSequence n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  Block n30 = null;
  ExpansionUnitTCF jtbNode = null;
  // --- user BNFProduction java block ---
  Token t = null;
Container expch = new Container();
    List<List<Token>> types = new ArrayList<List<Token>>();
    List<Token> ids = new ArrayList<Token>();
    List<List<Token>> catchblks = new ArrayList<List<Token>>();
    List<Token> finallyblk = null;
    List<Token> vec = new ArrayList<Token>();
    Token t0 = null;
    n1 = jj_consume_token(TRY);
n0 = (NodeToken) n1;
t0 = n1;
    n3 = jj_consume_token(LBRACE);
n2 = (NodeToken) n3;
    n4 = ExpansionChoices(expch);
    n6 = jj_consume_token(RBRACE);
n5 = (NodeToken) n6;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CATCH:{
        ;
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        break label_10;
      }
n13 = new NodeListOptional();
n16 = new NodeOptional();
n8 = new NodeSequence(8);
      // ModMMa 2017/05 added optional final (but JavaCC does not yet accepts it)
          // ModMMa 2023/08 added optional annotations (but JavaCC does not yet accepts them)
          //    "catch" "(" ["final"] Name(vec) t = < IDENTIFIER > ")"
          n10 = jj_consume_token(CATCH);
n9 = (NodeToken) n10;
n8.addNode(n9);
      n12 = jj_consume_token(LPAREN);
n11 = (NodeToken) n12;
n8.addNode(n11);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 147:{
          ;
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          break label_11;
        }
n14 = new NodeSequence(1);
        n15 = Annotation();
n14.addNode(n15);
n13.addNode(n14);
      }
n13.nodes.trimToSize();
n8.addNode(n13);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINAL:{
n17 = new NodeSequence(1);
        n19 = jj_consume_token(FINAL);
n18 = (NodeToken) n19;
n17.addNode(n18);
n16.addNode(n17);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
n8.addNode(n16);
      n20 = Name(vec);
n8.addNode(n20);
      n22 = jj_consume_token(IDENTIFIER);
n21 = (NodeToken) n22;
t = n22;
n8.addNode(n21);
      n24 = jj_consume_token(RPAREN);
n23 = (NodeToken) n24;
n8.addNode(n23);
types.add(vec);
      ids.add(t);
      vec = new ArrayList<Token>();
      inAction = true;
      n25 = Block(vec);
n8.addNode(n25);
inAction = false;
      catchblks.add(vec);
      vec = new ArrayList<Token>();
n7.addNode(n8);
    }
n7.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FINALLY:{
inAction = true;
n27 = new NodeSequence(2);
      n29 = jj_consume_token(FINALLY);
n28 = (NodeToken) n29;
n27.addNode(n28);
      n30 = Block(vec);
n27.addNode(n30);
inAction = false;
      finallyblk = vec;
n26.addNode(n27);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      ;
    }
makeTryBlock(t0, c, expch, types, ids, catchblks, finallyblk);
jtbNode = new ExpansionUnitTCF(n0, n2, n4, n5, n7, n26);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public RegularExpression RegularExpression(Container c) throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  StringLiteral n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  NodeOptional n8 = null;
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  IdentifierAsString n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  ComplexRegularExpressionChoices n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeSequence n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  IdentifierAsString n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeSequence n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  RegularExpression jtbNode = null;
  // --- user BNFProduction java block ---
  REndOfFile ef = null;
  String image = null;
  boolean private_rexp = false;
  Token t = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL:{
n1 = new NodeSequence(1);
String oldJtbrt_StringLiteral_1 = jtbrt_StringLiteral;
      n2 = StringLiteral();
image = jtbrt_StringLiteral;
jtbrt_StringLiteral = oldJtbrt_StringLiteral_1;
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 4);
c.member = new RStringLiteral(t, image);
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      if (jj_2_4(3)) {
image = "";
n3 = new NodeSequence(4);
        // ModMMa 2012/07 : no definition needed (otherwise it supersedes LT)
            //    < LANGLE : "<" >
            n5 = jj_consume_token(LT);
n4 = (NodeToken) n5;
n3.addNode(n4);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 141:
        case IDENTIFIER:{
n8 = new NodeOptional();
n7 = new NodeSequence(3);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 141:{
n9 = new NodeSequence(1);
            n11 = jj_consume_token(141);
n10 = (NodeToken) n11;
n9.addNode(n10);
private_rexp = true;
n8.addNode(n9);
            break;
            }
          default:
            jj_la1[38] = jj_gen;
            ;
          }
n7.addNode(n8);
String oldJtbrt_IdentifierAsString_2 = jtbrt_IdentifierAsString;
          n12 = IdentifierAsString();
image = jtbrt_IdentifierAsString;
jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_2;
n7.addNode(n12);
          n14 = jj_consume_token(COLON);
n13 = (NodeToken) n14;
n7.addNode(n13);
n6.addNode(n7);
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          ;
        }
n3.addNode(n6);
        n15 = ComplexRegularExpressionChoices(c);
n3.addNode(n15);
        // ModMMa 2012/07 : no definition needed (otherwise it supersedes GT)
            //    < RANGLE : ">" >
            n17 = jj_consume_token(GT);
n16 = (NodeToken) n17;
n3.addNode(n16);
n0 = new NodeChoice(n3, 1, 4);
RegularExpression_ re = null;
      if (c.member instanceof RJustName) {
        RSequence seq = new RSequence();
        seq.units.add((RegularExpression_)c.member);
        re = seq;
      } else
        re = (RegularExpression_)c.member;
      re.label = image;
      re.private_rexp = private_rexp;
      re.setLine(t.beginLine);
      re.setColumn(t.beginColumn);
      c.member = re;
      } else if (jj_2_5(2)) {
n18 = new NodeSequence(3);
        n20 = jj_consume_token(LT);
n19 = (NodeToken) n20;
n18.addNode(n19);
String oldJtbrt_IdentifierAsString_3 = jtbrt_IdentifierAsString;
        n21 = IdentifierAsString();
image = jtbrt_IdentifierAsString;
jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_3;
n18.addNode(n21);
        n23 = jj_consume_token(GT);
n22 = (NodeToken) n23;
n18.addNode(n22);
n0 = new NodeChoice(n18, 2, 4);
c.member = new RJustName(t, image);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LT:{
n24 = new NodeSequence(3);
          n26 = jj_consume_token(LT);
n25 = (NodeToken) n26;
n24.addNode(n25);
          n28 = jj_consume_token(_EOF);
n27 = (NodeToken) n28;
n24.addNode(n27);
          n30 = jj_consume_token(GT);
n29 = (NodeToken) n30;
n24.addNode(n29);
n0 = new NodeChoice(n24, 3, 4);
ef = new REndOfFile();
      ef.setLine(t.beginLine);
      ef.setColumn(t.beginColumn);
      ef.ordinal = 0;
      c.member = ef;
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
jtbNode = new RegularExpression(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ComplexRegularExpressionChoices ComplexRegularExpressionChoices(Container c1) throws ParseException {// --- JTB generated node declarations ---
  ComplexRegularExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ComplexRegularExpression n5 = null;
  ComplexRegularExpressionChoices jtbNode = null;
  // --- user BNFProduction java block ---
  boolean morethanone = false;
  RChoice ch = new RChoice();
  Container c2 = new Container();
    // --- user BNFProduction ExpansionChoices ---
      n0 = ComplexRegularExpression(c1);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_OR:{
        ;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        break label_12;
      }
n2 = new NodeSequence(2);
      n4 = jj_consume_token(BIT_OR);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = ComplexRegularExpression(c2);
n2.addNode(n5);
if (morethanone)
        ch.getChoices().add((RegularExpression_)c2.member);
      else {
        morethanone = true;
        ch = new RChoice();
        ch.setLine(((RegularExpression_)c1.member).getLine());
        ch.setColumn(((RegularExpression_)c1.member).getColumn());
        ch.getChoices().add((RegularExpression_)c1.member);
        ch.getChoices().add((RegularExpression_)c2.member);
      }
n1.addNode(n2);
    }
n1.nodes.trimToSize();
if (morethanone)
      c1.member = ch;
jtbNode = new ComplexRegularExpressionChoices(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ComplexRegularExpression ComplexRegularExpression(Container c1) throws ParseException {// --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  NodeSequence n1 = null;
  ComplexRegularExpressionUnit n2 = null;
  ComplexRegularExpression jtbNode = null;
  // --- user BNFProduction java block ---
  int count = 0;
  RSequence seq = new RSequence();
  Container c2 = new Container();
    label_13:
    while (true) {
n1 = new NodeSequence(1);
      n2 = ComplexRegularExpressionUnit(c2);
n1.addNode(n2);
count++;
      if (count == 1)
        c1.member = c2.member;
      // if count does not go beyond 1, we are done.
      else
        if (count == 2) {
          // more than 1, so create a sequence.
          seq = new RSequence();
          seq.setLine(((RegularExpression_)c1.member).getLine());
          seq.setColumn(((RegularExpression_)c1.member).getColumn());
          seq.units.add((RegularExpression_)c1.member);
          seq.units.add((RegularExpression_)c2.member);
        } else
          seq.units.add((RegularExpression_)c2.member);
n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_LITERAL:
      case LPAREN:
      case LBRACKET:
      case LT:
      case TILDE:{
        ;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_13;
      }
    }
n0.nodes.trimToSize();
if (count > 1)
      c1.member = seq;
jtbNode = new ComplexRegularExpression(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ComplexRegularExpressionUnit ComplexRegularExpressionUnit(Container c) throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  StringLiteral n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  IdentifierAsString n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  CharacterList n10 = null;
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  ComplexRegularExpressionChoices n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeOptional n17 = new NodeOptional();
  NodeChoice n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeSequence n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeSequence n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeSequence n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  IntegerLiteral n31 = null;
  NodeOptional n32 = null;
  NodeSequence n33 = null;
  NodeToken n34 = null;
  Token n35 = null;
  NodeOptional n36 = null;
  NodeSequence n37 = null;
  IntegerLiteral n38 = null;
  NodeToken n39 = null;
  Token n40 = null;
  ComplexRegularExpressionUnit jtbNode = null;
  // --- user BNFProduction java block ---
  String image = null;
  Token t = getToken(1);
  int r1 = 0, r2 = -1;
  boolean hasMax = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL:{
n1 = new NodeSequence(1);
String oldJtbrt_StringLiteral_1 = jtbrt_StringLiteral;
      n2 = StringLiteral();
image = jtbrt_StringLiteral;
jtbrt_StringLiteral = oldJtbrt_StringLiteral_1;
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 4);
c.member = new RStringLiteral(t, image);
      break;
      }
    case LT:{
n3 = new NodeSequence(3);
      n5 = jj_consume_token(LT);
n4 = (NodeToken) n5;
n3.addNode(n4);
String oldJtbrt_IdentifierAsString_2 = jtbrt_IdentifierAsString;
      n6 = IdentifierAsString();
image = jtbrt_IdentifierAsString;
jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_2;
n3.addNode(n6);
      n8 = jj_consume_token(GT);
n7 = (NodeToken) n8;
n3.addNode(n7);
n0 = new NodeChoice(n3, 1, 4);
c.member = new RJustName(t, image);
      break;
      }
    case LBRACKET:
    case TILDE:{
n9 = new NodeSequence(1);
      n10 = CharacterList(c);
n9.addNode(n10);
n0 = new NodeChoice(n9, 2, 4);
      break;
      }
    case LPAREN:{
n11 = new NodeSequence(4);
      n13 = jj_consume_token(LPAREN);
n12 = (NodeToken) n13;
n11.addNode(n12);
      n14 = ComplexRegularExpressionChoices(c);
n11.addNode(n14);
      n16 = jj_consume_token(RPAREN);
n15 = (NodeToken) n16;
n11.addNode(n15);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:
      case HOOK:
      case PLUS:
      case STAR:{
n32 = new NodeOptional();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
n19 = new NodeSequence(1);
          n21 = jj_consume_token(PLUS);
n20 = (NodeToken) n21;
n19.addNode(n20);
c.member = new ROneOrMore(t, (RegularExpression_)c.member);
n18 = new NodeChoice(n19, 0, 4);
          break;
          }
        case STAR:{
n22 = new NodeSequence(1);
          n24 = jj_consume_token(STAR);
n23 = (NodeToken) n24;
n22.addNode(n23);
c.member = new RZeroOrMore(t, (RegularExpression_)c.member);
n18 = new NodeChoice(n22, 1, 4);
          break;
          }
        case HOOK:{
n25 = new NodeSequence(1);
          n27 = jj_consume_token(HOOK);
n26 = (NodeToken) n27;
n25.addNode(n26);
RZeroOrOne zorexp = new RZeroOrOne();
          zorexp.setLine(t.beginLine);
          zorexp.setColumn(t.beginColumn);
          zorexp.regexpr = (RegularExpression_)c.member;
          c.member = zorexp;
n18 = new NodeChoice(n25, 2, 4);
          break;
          }
        case LBRACE:{
n28 = new NodeSequence(4);
          n30 = jj_consume_token(LBRACE);
n29 = (NodeToken) n30;
n28.addNode(n29);
int oldJtbrt_IntegerLiteral_3 = jtbrt_IntegerLiteral;
          n31 = IntegerLiteral();
r1 = jtbrt_IntegerLiteral;
jtbrt_IntegerLiteral = oldJtbrt_IntegerLiteral_3;
n28.addNode(n31);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
n36 = new NodeOptional();
n33 = new NodeSequence(2);
            n35 = jj_consume_token(COMMA);
n34 = (NodeToken) n35;
n33.addNode(n34);
hasMax = true;
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INTEGER_LITERAL:{
n37 = new NodeSequence(1);
int oldJtbrt_IntegerLiteral_4 = jtbrt_IntegerLiteral;
              n38 = IntegerLiteral();
r2 = jtbrt_IntegerLiteral;
jtbrt_IntegerLiteral = oldJtbrt_IntegerLiteral_4;
n37.addNode(n38);
n36.addNode(n37);
              break;
              }
            default:
              jj_la1[44] = jj_gen;
              ;
            }
n33.addNode(n36);
n32.addNode(n33);
            break;
            }
          default:
            jj_la1[45] = jj_gen;
            ;
          }
n28.addNode(n32);
          n40 = jj_consume_token(RBRACE);
n39 = (NodeToken) n40;
n28.addNode(n39);
RRepetitionRange rrrexp = new RRepetitionRange();
          rrrexp.setLine(t.beginLine);
          rrrexp.setColumn(t.beginColumn);
          rrrexp.min = r1;
          rrrexp.max = r2;
          rrrexp.hasMax = hasMax;
          rrrexp.regexpr = (RegularExpression_)c.member;
          c.member = rrrexp;
n18 = new NodeChoice(n28, 3, 4);
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
n17.addNode(n18);
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        ;
      }
n11.addNode(n17);
n0 = new NodeChoice(n11, 3, 4);
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new ComplexRegularExpressionUnit(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public CharacterList CharacterList(Container c1) throws ParseException {// --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  CharacterDescriptor n8 = null;
  NodeListOptional n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  CharacterDescriptor n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  CharacterList jtbNode = null;
  // --- user BNFProduction java block ---
  RCharacterList chlist = new RCharacterList();
  Token t = getToken(1);
  chlist.setLine(t.beginLine);
  chlist.setColumn(t.beginColumn);
  Container c2 = new Container();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TILDE:{
n1 = new NodeSequence(1);
      n3 = jj_consume_token(TILDE);
n2 = (NodeToken) n3;
n1.addNode(n2);
chlist.negated_list = true;
n0.addNode(n1);
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    n5 = jj_consume_token(LBRACKET);
n4 = (NodeToken) n5;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL:{
n9 = new NodeListOptional();
n7 = new NodeSequence(2);
      n8 = CharacterDescriptor(c2);
n7.addNode(n8);
chlist.descriptors.add(c2.member);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          break label_14;
        }
n10 = new NodeSequence(2);
        n12 = jj_consume_token(COMMA);
n11 = (NodeToken) n12;
n10.addNode(n11);
        n13 = CharacterDescriptor(c2);
n10.addNode(n13);
chlist.descriptors.add(c2.member);
n9.addNode(n10);
      }
n9.nodes.trimToSize();
n7.addNode(n9);
n6.addNode(n7);
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    n15 = jj_consume_token(RBRACKET);
n14 = (NodeToken) n15;
c1.member = chlist;
jtbNode = new CharacterList(n0, n4, n6, n14);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public CharacterDescriptor CharacterDescriptor(Container c) throws ParseException {// --- JTB generated node declarations ---
  StringLiteral n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  StringLiteral n5 = null;
  CharacterDescriptor jtbNode = null;
  // --- user BNFProduction java block ---
  char c1 = ' ';
  char c2 = ' ';
  boolean isrange = false;
  String imageL = null;
  String imageR = null;
  Token t = getToken(1);
String oldJtbrt_StringLiteral_1 = jtbrt_StringLiteral;
    n0 = StringLiteral();
imageL = jtbrt_StringLiteral;
jtbrt_StringLiteral = oldJtbrt_StringLiteral_1;
c1 = character_descriptor_assign(getToken(0), imageL);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
n2 = new NodeSequence(2);
      n4 = jj_consume_token(MINUS);
n3 = (NodeToken) n4;
n2.addNode(n3);
String oldJtbrt_StringLiteral_2 = jtbrt_StringLiteral;
      n5 = StringLiteral();
imageR = jtbrt_StringLiteral;
jtbrt_StringLiteral = oldJtbrt_StringLiteral_2;
n2.addNode(n5);
isrange = true;
      c2 = character_descriptor_assign(getToken(0), imageR, imageL);
n1.addNode(n2);
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      ;
    }
if (isrange) {
      CharacterRange cr = new CharacterRange();
      cr.setLine(t.beginLine);
      cr.setColumn(t.beginColumn);
      cr.setLeft(c1);
      cr.setRight(c2);
      c.member = cr;
    } else {
      SingleCharacter sc = new SingleCharacter();
      sc.setLine(t.beginLine);
      sc.setColumn(t.beginColumn);
      sc.ch = c1;
      c.member = sc;
    }
jtbNode = new CharacterDescriptor(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public IdentifierAsString IdentifierAsString() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  IdentifierAsString jtbNode = null;
  // --- user BNFProduction java block ---
  Token t = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(IDENTIFIER);
n0 = (NodeToken) n1;
t = n1;
jtbNode = new IdentifierAsString(n0);
jtbrt_IdentifierAsString = t.image;
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public JavaIdentifier JavaIdentifier() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeSequence n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeSequence n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeSequence n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeSequence n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeSequence n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  NodeSequence n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  JavaIdentifier jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
n1 = new NodeSequence(1);
      n3 = jj_consume_token(IDENTIFIER);
n2 = (NodeToken) n3;
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 12);
      break;
      }
    case _LOOKAHEAD:{
n4 = new NodeSequence(1);
      n6 = jj_consume_token(_LOOKAHEAD);
n5 = (NodeToken) n6;
n4.addNode(n5);
n0 = new NodeChoice(n4, 1, 12);
      break;
      }
    case _IGNORE_CASE:{
n7 = new NodeSequence(1);
      n9 = jj_consume_token(_IGNORE_CASE);
n8 = (NodeToken) n9;
n7.addNode(n8);
n0 = new NodeChoice(n7, 2, 12);
      break;
      }
    case _PARSER_BEGIN:{
n10 = new NodeSequence(1);
      n12 = jj_consume_token(_PARSER_BEGIN);
n11 = (NodeToken) n12;
n10.addNode(n11);
n0 = new NodeChoice(n10, 3, 12);
      break;
      }
    case _PARSER_END:{
n13 = new NodeSequence(1);
      n15 = jj_consume_token(_PARSER_END);
n14 = (NodeToken) n15;
n13.addNode(n14);
n0 = new NodeChoice(n13, 4, 12);
      break;
      }
    case _JAVACODE:{
n16 = new NodeSequence(1);
      n18 = jj_consume_token(_JAVACODE);
n17 = (NodeToken) n18;
n16.addNode(n17);
n0 = new NodeChoice(n16, 5, 12);
      break;
      }
    case _TOKEN:{
n19 = new NodeSequence(1);
      n21 = jj_consume_token(_TOKEN);
n20 = (NodeToken) n21;
n19.addNode(n20);
n0 = new NodeChoice(n19, 6, 12);
      break;
      }
    case _SPECIAL_TOKEN:{
n22 = new NodeSequence(1);
      n24 = jj_consume_token(_SPECIAL_TOKEN);
n23 = (NodeToken) n24;
n22.addNode(n23);
n0 = new NodeChoice(n22, 7, 12);
      break;
      }
    case _MORE:{
n25 = new NodeSequence(1);
      n27 = jj_consume_token(_MORE);
n26 = (NodeToken) n27;
n25.addNode(n26);
n0 = new NodeChoice(n25, 8, 12);
      break;
      }
    case _SKIP:{
n28 = new NodeSequence(1);
      n30 = jj_consume_token(_SKIP);
n29 = (NodeToken) n30;
n28.addNode(n29);
n0 = new NodeChoice(n28, 9, 12);
      break;
      }
    case _TOKEN_MGR_DECLS:{
n31 = new NodeSequence(1);
      n33 = jj_consume_token(_TOKEN_MGR_DECLS);
n32 = (NodeToken) n33;
n31.addNode(n32);
n0 = new NodeChoice(n31, 10, 12);
      break;
      }
    case _EOF:{
n34 = new NodeSequence(1);
      n36 = jj_consume_token(_EOF);
n35 = (NodeToken) n36;
n34.addNode(n35);
n0 = new NodeChoice(n34, 11, 12);
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new JavaIdentifier(n0);
Token retval = getToken(0);
    retval.kind = IDENTIFIER;
    jtbrt_JavaIdentifier = retval;
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public CompilationUnit CompilationUnit() throws ParseException {// --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  PackageDeclaration n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  ImportDeclaration n5 = null;
  NodeListOptional n6 = new NodeListOptional();
  NodeSequence n7 = null;
  TypeDeclaration n8 = null;
  CompilationUnit jtbNode = null;
  // --- user BNFProduction java block ---
  set_initial_cu_token(getToken(1));
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PACKAGE:{
n1 = new NodeSequence(1);
      // ModMMa 2012/07 : fixed grammar
          // LOOKAHEAD((Annotation())* "package")
          n2 = PackageDeclaration();
n1.addNode(n2);
n0.addNode(n1);
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:{
        ;
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        break label_15;
      }
n4 = new NodeSequence(1);
      n5 = ImportDeclaration();
n4.addNode(n5);
n3.addNode(n4);
    }
n3.nodes.trimToSize();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case 147:{
        ;
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        break label_16;
      }
n7 = new NodeSequence(1);
      n8 = TypeDeclaration();
n7.addNode(n8);
n6.addNode(n7);
    }
n6.nodes.trimToSize();
insertionpointerrors(getToken(1));
jtbNode = new CompilationUnit(n0, n3, n6);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public PackageDeclaration PackageDeclaration() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Name n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  PackageDeclaration jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      // ModMMa 2012/07 : fixed grammar : only at most one Annotation is permitted,
      // and must be in package-info.java, so we should not encounter it in the parsed file
      // Modifiers() "package" Name(null) ";"
      n1 = jj_consume_token(PACKAGE);
n0 = (NodeToken) n1;
String oldJtbrt_Name_1 = jtbrt_Name;
    n2 = Name(null);
// ModMMa 2023/07 : added assignment
  grammarPackage = jtbrt_Name;
jtbrt_Name = oldJtbrt_Name_1;
    n4 = jj_consume_token(SEMICOLON);
n3 = (NodeToken) n4;
jtbNode = new PackageDeclaration(n0, n2, n3);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ImportDeclaration ImportDeclaration() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Name n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  ImportDeclaration jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(IMPORT);
n0 = (NodeToken) n1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STATIC:{
n3 = new NodeSequence(1);
      n5 = jj_consume_token(STATIC);
n4 = (NodeToken) n5;
n3.addNode(n4);
n2.addNode(n3);
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    n6 = Name(null);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
n8 = new NodeSequence(2);
      n10 = jj_consume_token(DOT);
n9 = (NodeToken) n10;
n8.addNode(n9);
      n12 = jj_consume_token(STAR);
n11 = (NodeToken) n12;
n8.addNode(n11);
n7.addNode(n8);
      break;
      }
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    n14 = jj_consume_token(SEMICOLON);
n13 = (NodeToken) n14;
jtbNode = new ImportDeclaration(n0, n2, n6, n7, n13);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public Modifiers Modifiers() throws ParseException {// --- JTB generated node declarations ---
  NodeListOptional n0 = new NodeListOptional();
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeSequence n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeSequence n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeSequence n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeSequence n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeSequence n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeSequence n33 = null;
  NodeToken n34 = null;
  Token n35 = null;
  NodeSequence n36 = null;
  Annotation n37 = null;
  Modifiers jtbNode = null;
  // --- user BNFProduction java block ---
  int modifiers = 0;
    label_17:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_17;
      }
n1 = new NodeSequence(1);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC:{
n3 = new NodeSequence(1);
        n5 = jj_consume_token(PUBLIC);
n4 = (NodeToken) n5;
n3.addNode(n4);
modifiers |= ModifierSet.M_PUBLIC;
n2 = new NodeChoice(n3, 0, 12);
        break;
        }
      case STATIC:{
n6 = new NodeSequence(1);
        n8 = jj_consume_token(STATIC);
n7 = (NodeToken) n8;
n6.addNode(n7);
modifiers |= ModifierSet.M_STATIC;
n2 = new NodeChoice(n6, 1, 12);
        break;
        }
      case PROTECTED:{
n9 = new NodeSequence(1);
        n11 = jj_consume_token(PROTECTED);
n10 = (NodeToken) n11;
n9.addNode(n10);
modifiers |= ModifierSet.M_PROTECTED;
n2 = new NodeChoice(n9, 2, 12);
        break;
        }
      case PRIVATE:{
n12 = new NodeSequence(1);
        n14 = jj_consume_token(PRIVATE);
n13 = (NodeToken) n14;
n12.addNode(n13);
modifiers |= ModifierSet.M_PRIVATE;
n2 = new NodeChoice(n12, 3, 12);
        break;
        }
      case FINAL:{
n15 = new NodeSequence(1);
        n17 = jj_consume_token(FINAL);
n16 = (NodeToken) n17;
n15.addNode(n16);
modifiers |= ModifierSet.M_FINAL;
n2 = new NodeChoice(n15, 4, 12);
        break;
        }
      case ABSTRACT:{
n18 = new NodeSequence(1);
        n20 = jj_consume_token(ABSTRACT);
n19 = (NodeToken) n20;
n18.addNode(n19);
modifiers |= ModifierSet.M_ABSTRACT;
n2 = new NodeChoice(n18, 5, 12);
        break;
        }
      case SYNCHRONIZED:{
n21 = new NodeSequence(1);
        n23 = jj_consume_token(SYNCHRONIZED);
n22 = (NodeToken) n23;
n21.addNode(n22);
modifiers |= ModifierSet.M_SYNCHRONIZED;
n2 = new NodeChoice(n21, 6, 12);
        break;
        }
      case NATIVE:{
n24 = new NodeSequence(1);
        n26 = jj_consume_token(NATIVE);
n25 = (NodeToken) n26;
n24.addNode(n25);
modifiers |= ModifierSet.M_NATIVE;
n2 = new NodeChoice(n24, 7, 12);
        break;
        }
      case TRANSIENT:{
n27 = new NodeSequence(1);
        n29 = jj_consume_token(TRANSIENT);
n28 = (NodeToken) n29;
n27.addNode(n28);
modifiers |= ModifierSet.M_TRANSIENT;
n2 = new NodeChoice(n27, 8, 12);
        break;
        }
      case VOLATILE:{
n30 = new NodeSequence(1);
        n32 = jj_consume_token(VOLATILE);
n31 = (NodeToken) n32;
n30.addNode(n31);
modifiers |= ModifierSet.M_VOLATILE;
n2 = new NodeChoice(n30, 9, 12);
        break;
        }
      case STRICTFP:{
n33 = new NodeSequence(1);
        n35 = jj_consume_token(STRICTFP);
n34 = (NodeToken) n35;
n33.addNode(n34);
modifiers |= ModifierSet.M_STRICTFP;
n2 = new NodeChoice(n33, 10, 12);
        break;
        }
      case 147:{
n36 = new NodeSequence(1);
        n37 = Annotation();
n36.addNode(n37);
n2 = new NodeChoice(n36, 11, 12);
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n1.addNode(n2);
n0.addNode(n1);
    }
n0.nodes.trimToSize();
jtbrt_Modifiers = modifiers;
jtbNode = new Modifiers(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public TypeDeclaration TypeDeclaration() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  Modifiers n5 = null;
  NodeChoice n6 = null;
  NodeSequence n7 = null;
  ClassOrInterfaceDeclaration n8 = null;
  NodeSequence n9 = null;
  EnumDeclaration n10 = null;
  NodeSequence n11 = null;
  AnnotationTypeDeclaration n12 = null;
  TypeDeclaration jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
n1 = new NodeSequence(1);
      n3 = jj_consume_token(SEMICOLON);
n2 = (NodeToken) n3;
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 2);
      break;
      }
    case ABSTRACT:
    case CLASS:
    case ENUM:
    case FINAL:
    case INTERFACE:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case 147:{
n4 = new NodeSequence(2);
      n5 = Modifiers();
n4.addNode(n5);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:
      case INTERFACE:{
n7 = new NodeSequence(1);
        n8 = ClassOrInterfaceDeclaration();
n7.addNode(n8);
n6 = new NodeChoice(n7, 0, 3);
        break;
        }
      case ENUM:{
n9 = new NodeSequence(1);
        n10 = EnumDeclaration();
n9.addNode(n10);
n6 = new NodeChoice(n9, 1, 3);
        break;
        }
      case 147:{
n11 = new NodeSequence(1);
        n12 = AnnotationTypeDeclaration();
n11.addNode(n12);
n6 = new NodeChoice(n11, 2, 3);
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n4.addNode(n6);
n0 = new NodeChoice(n4, 1, 2);
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new TypeDeclaration(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ClassOrInterfaceDeclaration ClassOrInterfaceDeclaration() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeOptional n9 = new NodeOptional();
  NodeSequence n10 = null;
  TypeParameters n11 = null;
  NodeOptional n12 = new NodeOptional();
  NodeSequence n13 = null;
  ExtendsList n14 = null;
  NodeOptional n15 = new NodeOptional();
  NodeSequence n16 = null;
  ImplementsList n17 = null;
  ClassOrInterfaceBody n18 = null;
  ClassOrInterfaceDeclaration jtbNode = null;
  // --- user BNFProduction java block ---
  boolean isInterface = false;
  class_nesting++;
  Token t = null;
  boolean is_parser_class = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CLASS:{
n1 = new NodeSequence(1);
      n3 = jj_consume_token(CLASS);
n2 = (NodeToken) n3;
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 2);
      break;
      }
    case INTERFACE:{
n4 = new NodeSequence(1);
      n6 = jj_consume_token(INTERFACE);
n5 = (NodeToken) n6;
n4.addNode(n5);
isInterface = true;
n0 = new NodeChoice(n4, 1, 2);
      break;
      }
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n8 = jj_consume_token(IDENTIFIER);
n7 = (NodeToken) n8;
t = n8;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LT:{
n10 = new NodeSequence(1);
      n11 = TypeParameters();
n10.addNode(n11);
n9.addNode(n10);
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENDS:{
n13 = new NodeSequence(1);
      n14 = ExtendsList(isInterface);
n13.addNode(n14);
n12.addNode(n13);
      break;
      }
    default:
      jj_la1[64] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IMPLEMENTS:{
n16 = new NodeSequence(1);
      n17 = ImplementsList(isInterface);
n16.addNode(n17);
n15.addNode(n16);
      break;
      }
    default:
      jj_la1[65] = jj_gen;
      ;
    }
if (t.image.equals(parser_class_name) && class_nesting == 1 && processing_cu) {
      is_parser_class = true;
      setinsertionpoint(getToken(1), 1);
    }
    n18 = ClassOrInterfaceBody(isInterface, null);
if (is_parser_class)
      setinsertionpoint(getToken(0), 2);
    class_nesting--;
jtbNode = new ClassOrInterfaceDeclaration(n0, n7, n9, n12, n15, n18);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ExtendsList ExtendsList(boolean isInterface) throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ClassOrInterfaceType n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  ClassOrInterfaceType n7 = null;
  ExtendsList jtbNode = null;
  // --- user BNFProduction java block ---
  boolean extendsMoreThanOne = false;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(EXTENDS);
n0 = (NodeToken) n1;
    n2 = ClassOrInterfaceType();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[66] = jj_gen;
        break label_18;
      }
n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
n5 = (NodeToken) n6;
n4.addNode(n5);
      n7 = ClassOrInterfaceType();
n4.addNode(n7);
extendsMoreThanOne = true;
n3.addNode(n4);
    }
n3.nodes.trimToSize();
if (extendsMoreThanOne && !isInterface)
      {if (true) throw new ParseException("A class cannot extend more than one other class");}
jtbNode = new ExtendsList(n0, n2, n3);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ImplementsList ImplementsList(boolean isInterface) throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ClassOrInterfaceType n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  ClassOrInterfaceType n7 = null;
  ImplementsList jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(IMPLEMENTS);
n0 = (NodeToken) n1;
    n2 = ClassOrInterfaceType();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        break label_19;
      }
n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
n5 = (NodeToken) n6;
n4.addNode(n5);
      n7 = ClassOrInterfaceType();
n4.addNode(n7);
n3.addNode(n4);
    }
n3.nodes.trimToSize();
if (isInterface)
      {if (true) throw new ParseException("An interface cannot implement other interfaces");}
jtbNode = new ImplementsList(n0, n2, n3);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public EnumDeclaration EnumDeclaration() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeSequence n5 = null;
  ImplementsList n6 = null;
  EnumBody n7 = null;
  EnumDeclaration jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(ENUM);
n0 = (NodeToken) n1;
    n3 = jj_consume_token(IDENTIFIER);
n2 = (NodeToken) n3;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IMPLEMENTS:{
n5 = new NodeSequence(1);
      n6 = ImplementsList(false);
n5.addNode(n6);
n4.addNode(n5);
      break;
      }
    default:
      jj_la1[68] = jj_gen;
      ;
    }
    n7 = EnumBody();
jtbNode = new EnumDeclaration(n0, n2, n4, n7);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public EnumBody EnumBody() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  EnumConstant n4 = null;
  NodeListOptional n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  EnumConstant n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeOptional n14 = new NodeOptional();
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeListOptional n18 = null;
  NodeSequence n19 = null;
  ClassOrInterfaceBodyDeclaration n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  EnumBody jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(LBRACE);
n0 = (NodeToken) n1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case 147:
    case IDENTIFIER:{
n5 = new NodeListOptional();
n3 = new NodeSequence(2);
      n4 = EnumConstant();
n3.addNode(n4);
      label_20:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_20;
        }
n6 = new NodeSequence(2);
        n8 = jj_consume_token(COMMA);
n7 = (NodeToken) n8;
n6.addNode(n7);
        n9 = EnumConstant();
n6.addNode(n9);
n5.addNode(n6);
      }
n5.nodes.trimToSize();
n3.addNode(n5);
n2.addNode(n3);
      break;
      }
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
n11 = new NodeSequence(1);
      n13 = jj_consume_token(COMMA);
n12 = (NodeToken) n13;
n11.addNode(n12);
n10.addNode(n11);
      break;
      }
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
n18 = new NodeListOptional();
n15 = new NodeSequence(2);
      n17 = jj_consume_token(SEMICOLON);
n16 = (NodeToken) n17;
n15.addNode(n16);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case LBRACE:
        case SEMICOLON:
        case LT:
        case 147:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[71] = jj_gen;
          break label_21;
        }
n19 = new NodeSequence(1);
        n20 = ClassOrInterfaceBodyDeclaration(false);
n19.addNode(n20);
n18.addNode(n19);
      }
n18.nodes.trimToSize();
n15.addNode(n18);
n14.addNode(n15);
      break;
      }
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    n22 = jj_consume_token(RBRACE);
n21 = (NodeToken) n22;
jtbNode = new EnumBody(n0, n2, n10, n14, n21);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public EnumConstant EnumConstant() throws ParseException {// --- JTB generated node declarations ---
  Modifiers n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  Arguments n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  ClassOrInterfaceBody n8 = null;
  EnumConstant jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = Modifiers();
    n2 = jj_consume_token(IDENTIFIER);
n1 = (NodeToken) n2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
n4 = new NodeSequence(1);
      n5 = Arguments(null);
n4.addNode(n5);
n3.addNode(n4);
      break;
      }
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
n7 = new NodeSequence(1);
      n8 = ClassOrInterfaceBody(false, null);
n7.addNode(n8);
n6.addNode(n7);
      break;
      }
    default:
      jj_la1[74] = jj_gen;
      ;
    }
jtbNode = new EnumConstant(n0, n1, n3, n6);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public TypeParameters TypeParameters() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  TypeParameter n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  TypeParameter n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  TypeParameters jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(LT);
n0 = (NodeToken) n1;
    n2 = TypeParameter();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[75] = jj_gen;
        break label_22;
      }
n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
n5 = (NodeToken) n6;
n4.addNode(n5);
      n7 = TypeParameter();
n4.addNode(n7);
n3.addNode(n4);
    }
n3.nodes.trimToSize();
    n9 = jj_consume_token(GT);
n8 = (NodeToken) n9;
jtbNode = new TypeParameters(n0, n2, n3, n8);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public TypeParameter TypeParameter() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  TypeBound n4 = null;
  TypeParameter jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(IDENTIFIER);
n0 = (NodeToken) n1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENDS:{
n3 = new NodeSequence(1);
      n4 = TypeBound();
n3.addNode(n4);
n2.addNode(n3);
      break;
      }
    default:
      jj_la1[76] = jj_gen;
      ;
    }
jtbNode = new TypeParameter(n0, n2);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public TypeBound TypeBound() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ClassOrInterfaceType n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  ClassOrInterfaceType n7 = null;
  TypeBound jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(EXTENDS);
n0 = (NodeToken) n1;
    n2 = ClassOrInterfaceType();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_AND:{
        ;
        break;
        }
      default:
        jj_la1[77] = jj_gen;
        break label_23;
      }
n4 = new NodeSequence(2);
      n6 = jj_consume_token(BIT_AND);
n5 = (NodeToken) n6;
n4.addNode(n5);
      n7 = ClassOrInterfaceType();
n4.addNode(n7);
n3.addNode(n4);
    }
n3.nodes.trimToSize();
jtbNode = new TypeBound(n0, n2, n3);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ClassOrInterfaceBody ClassOrInterfaceBody(boolean isInterface, List<Token> tokens) throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  ClassOrInterfaceBodyDeclaration n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  ClassOrInterfaceBody jtbNode = null;
  // --- user BNFProduction java block ---
  Token first = null;
  Token last = null;
  if (tokens == null)
    tokens = new ArrayList<Token>();
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(LBRACE);
n0 = (NodeToken) n1;
first = getToken(1);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case LBRACE:
      case SEMICOLON:
      case LT:
      case 147:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[78] = jj_gen;
        break label_24;
      }
n3 = new NodeSequence(1);
      n4 = ClassOrInterfaceBodyDeclaration(isInterface);
n3.addNode(n4);
n2.addNode(n3);
    }
n2.nodes.trimToSize();
last = getToken(0);
    n6 = jj_consume_token(RBRACE);
n5 = (NodeToken) n6;
if (last.next != first) {
      // i.e., this is not an empty sequence
      Token t = first;
      while (true) {
        tokens.add(t);
        if (t == last)
          break;
        t = t.next;
      }
    }
jtbNode = new ClassOrInterfaceBody(n0, n2, n5);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ClassOrInterfaceBodyDeclaration ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  Initializer n2 = null;
  NodeSequence n3 = null;
  Modifiers n4 = null;
  NodeChoice n5 = null;
  NodeSequence n6 = null;
  ClassOrInterfaceDeclaration n7 = null;
  NodeSequence n8 = null;
  EnumDeclaration n9 = null;
  NodeSequence n10 = null;
  AnnotationTypeDeclaration n11 = null;
  NodeSequence n12 = null;
  ConstructorDeclaration n13 = null;
  NodeSequence n14 = null;
  FieldDeclaration n15 = null;
  NodeSequence n16 = null;
  MethodDeclaration n17 = null;
  NodeSequence n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  ClassOrInterfaceBodyDeclaration jtbNode = null;
    if (jj_2_10(2)) {
n1 = new NodeSequence(1);
      n2 = Initializer();
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 3);
if (isInterface)
        {if (true) throw new ParseException("An interface cannot have initializers");}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case LT:
      case 147:
      case IDENTIFIER:{
n3 = new NodeSequence(2);
        n4 = Modifiers();
n3.addNode(n4);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CLASS:
        case INTERFACE:{
n6 = new NodeSequence(1);
          n7 = ClassOrInterfaceDeclaration();
n6.addNode(n7);
n5 = new NodeChoice(n6, 0, 6);
          break;
          }
        case ENUM:{
n8 = new NodeSequence(1);
          n9 = EnumDeclaration();
n8.addNode(n9);
n5 = new NodeChoice(n8, 1, 6);
          break;
          }
        case 147:{
n10 = new NodeSequence(1);
          n11 = AnnotationTypeDeclaration();
n10.addNode(n11);
n5 = new NodeChoice(n10, 2, 6);
          break;
          }
        default:
          jj_la1[79] = jj_gen;
          if (jj_2_8(2147483647)) {
n12 = new NodeSequence(1);
            n13 = ConstructorDeclaration();
n12.addNode(n13);
n5 = new NodeChoice(n12, 3, 6);
          } else if (jj_2_9(2147483647)) {
n14 = new NodeSequence(1);
            n15 = FieldDeclaration();
n14.addNode(n15);
n5 = new NodeChoice(n14, 4, 6);
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case VOID:
            case LT:
            case IDENTIFIER:{
n16 = new NodeSequence(1);
              n17 = MethodDeclaration();
n16.addNode(n17);
n5 = new NodeChoice(n16, 5, 6);
              break;
              }
            default:
              jj_la1[80] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
n3.addNode(n5);
n0 = new NodeChoice(n3, 1, 3);
        break;
        }
      case SEMICOLON:{
n18 = new NodeSequence(1);
        n20 = jj_consume_token(SEMICOLON);
n19 = (NodeToken) n20;
n18.addNode(n19);
n0 = new NodeChoice(n18, 2, 3);
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
jtbNode = new ClassOrInterfaceBodyDeclaration(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public FieldDeclaration FieldDeclaration() throws ParseException {// --- JTB generated node declarations ---
  Type n0 = null;
  VariableDeclarator n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  VariableDeclarator n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  FieldDeclaration jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      // Modifiers already matched in the caller
      n0 = Type();
    n1 = VariableDeclarator();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        break label_25;
      }
n3 = new NodeSequence(2);
      n5 = jj_consume_token(COMMA);
n4 = (NodeToken) n5;
n3.addNode(n4);
      n6 = VariableDeclarator();
n3.addNode(n6);
n2.addNode(n3);
    }
n2.nodes.trimToSize();
    n8 = jj_consume_token(SEMICOLON);
n7 = (NodeToken) n8;
jtbNode = new FieldDeclaration(n0, n1, n2, n7);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public VariableDeclarator VariableDeclarator() throws ParseException {// --- JTB generated node declarations ---
  VariableDeclaratorId n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  VariableInitializer n5 = null;
  VariableDeclarator jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
n2 = new NodeSequence(2);
      n4 = jj_consume_token(ASSIGN);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = VariableInitializer();
n2.addNode(n5);
n1.addNode(n2);
      break;
      }
    default:
      jj_la1[83] = jj_gen;
      ;
    }
jtbNode = new VariableDeclarator(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public VariableDeclaratorId VariableDeclaratorId() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  VariableDeclaratorId jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(IDENTIFIER);
n0 = (NodeToken) n1;
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[84] = jj_gen;
        break label_26;
      }
n3 = new NodeSequence(2);
      n5 = jj_consume_token(LBRACKET);
n4 = (NodeToken) n5;
n3.addNode(n4);
      n7 = jj_consume_token(RBRACKET);
n6 = (NodeToken) n7;
n3.addNode(n6);
n2.addNode(n3);
    }
n2.nodes.trimToSize();
jtbNode = new VariableDeclaratorId(n0, n2);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public VariableInitializer VariableInitializer() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  ArrayInitializer n2 = null;
  NodeSequence n3 = null;
  Expression n4 = null;
  VariableInitializer jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
n1 = new NodeSequence(1);
      n2 = ArrayInitializer();
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 2);
      break;
      }
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case IDENTIFIER:{
n3 = new NodeSequence(1);
      n4 = Expression(null);
n3.addNode(n4);
n0 = new NodeChoice(n3, 1, 2);
      break;
      }
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new VariableInitializer(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ArrayInitializer ArrayInitializer() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  VariableInitializer n4 = null;
  NodeListOptional n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  VariableInitializer n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  ArrayInitializer jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(LBRACE);
n0 = (NodeToken) n1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case IDENTIFIER:{
n5 = new NodeListOptional();
n3 = new NodeSequence(2);
      n4 = VariableInitializer();
n3.addNode(n4);
      label_27:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_27;
        }
n6 = new NodeSequence(2);
        n8 = jj_consume_token(COMMA);
n7 = (NodeToken) n8;
n6.addNode(n7);
        n9 = VariableInitializer();
n6.addNode(n9);
n5.addNode(n6);
      }
n5.nodes.trimToSize();
n3.addNode(n5);
n2.addNode(n3);
      break;
      }
    default:
      jj_la1[86] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
n11 = new NodeSequence(1);
      n13 = jj_consume_token(COMMA);
n12 = (NodeToken) n13;
n11.addNode(n12);
n10.addNode(n11);
      break;
      }
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    n15 = jj_consume_token(RBRACE);
n14 = (NodeToken) n15;
jtbNode = new ArrayInitializer(n0, n2, n10, n14);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public MethodDeclaration MethodDeclaration() throws ParseException {// --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  TypeParameters n2 = null;
  ResultType n3 = null;
  MethodDeclarator n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NameList n9 = null;
  NodeChoice n10 = null;
  NodeSequence n11 = null;
  Block n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  MethodDeclaration jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LT:{
n1 = new NodeSequence(1);
      n2 = TypeParameters();
n1.addNode(n2);
n0.addNode(n1);
      break;
      }
    default:
      jj_la1[88] = jj_gen;
      ;
    }
    n3 = ResultType(null);
    n4 = MethodDeclarator();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case THROWS:{
n6 = new NodeSequence(2);
      n8 = jj_consume_token(THROWS);
n7 = (NodeToken) n8;
n6.addNode(n7);
      n9 = NameList();
n6.addNode(n9);
n5.addNode(n6);
      break;
      }
    default:
      jj_la1[89] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
n11 = new NodeSequence(1);
      n12 = Block(null);
n11.addNode(n12);
n10 = new NodeChoice(n11, 0, 2);
      break;
      }
    case SEMICOLON:{
n13 = new NodeSequence(1);
      n15 = jj_consume_token(SEMICOLON);
n14 = (NodeToken) n15;
n13.addNode(n14);
n10 = new NodeChoice(n13, 1, 2);
      break;
      }
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new MethodDeclaration(n0, n3, n4, n5, n10);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public MethodDeclarator MethodDeclarator() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  FormalParameters n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  MethodDeclarator jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(IDENTIFIER);
n0 = (NodeToken) n1;
    n2 = FormalParameters(null);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[91] = jj_gen;
        break label_28;
      }
n4 = new NodeSequence(2);
      n6 = jj_consume_token(LBRACKET);
n5 = (NodeToken) n6;
n4.addNode(n5);
      n8 = jj_consume_token(RBRACKET);
n7 = (NodeToken) n8;
n4.addNode(n7);
n3.addNode(n4);
    }
n3.nodes.trimToSize();
jtbNode = new MethodDeclarator(n0, n2, n3);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public FormalParameters FormalParameters(List<Token> tokens) throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  FormalParameter n4 = null;
  NodeListOptional n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  FormalParameter n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  FormalParameters jtbNode = null;
  // --- user BNFProduction java block ---
  Token first = null;
  Token last = null;
  if (tokens == null)
    tokens = new ArrayList<Token>();
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(LPAREN);
n0 = (NodeToken) n1;
first = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case 147:
    case IDENTIFIER:{
n5 = new NodeListOptional();
n3 = new NodeSequence(2);
      n4 = FormalParameter();
n3.addNode(n4);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[92] = jj_gen;
          break label_29;
        }
n6 = new NodeSequence(2);
        n8 = jj_consume_token(COMMA);
n7 = (NodeToken) n8;
n6.addNode(n7);
        n9 = FormalParameter();
n6.addNode(n9);
n5.addNode(n6);
      }
n5.nodes.trimToSize();
n3.addNode(n5);
n2.addNode(n3);
      break;
      }
    default:
      jj_la1[93] = jj_gen;
      ;
    }
last = getToken(0);
    n11 = jj_consume_token(RPAREN);
n10 = (NodeToken) n11;
if (last.next != first) {
      // i.e., this is not an empty sequence
      Token t = first;
      while (true) {
        tokens.add(t);
        if (t == last)
          break;
        t = t.next;
      }
    }
jtbNode = new FormalParameters(n0, n2, n10);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public FormalParameter FormalParameter() throws ParseException {// --- JTB generated node declarations ---
  Modifiers n0 = null;
  Type n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  VariableDeclaratorId n6 = null;
  FormalParameter jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = Modifiers();
    n1 = Type();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 142:{
n3 = new NodeSequence(1);
      n5 = jj_consume_token(142);
n4 = (NodeToken) n5;
n3.addNode(n4);
n2.addNode(n3);
      break;
      }
    default:
      jj_la1[94] = jj_gen;
      ;
    }
    n6 = VariableDeclaratorId();
jtbNode = new FormalParameter(n0, n1, n2, n6);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ConstructorDeclaration ConstructorDeclaration() throws ParseException {// --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  TypeParameters n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  FormalParameters n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NameList n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeOptional n13 = new NodeOptional();
  NodeSequence n14 = null;
  ExplicitConstructorInvocation n15 = null;
  NodeListOptional n16 = new NodeListOptional();
  NodeSequence n17 = null;
  BlockStatement n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  ConstructorDeclaration jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LT:{
n1 = new NodeSequence(1);
      n2 = TypeParameters();
n1.addNode(n2);
n0.addNode(n1);
      break;
      }
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    n4 = jj_consume_token(IDENTIFIER);
n3 = (NodeToken) n4;
    n5 = FormalParameters(null);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case THROWS:{
n7 = new NodeSequence(2);
      n9 = jj_consume_token(THROWS);
n8 = (NodeToken) n9;
n7.addNode(n8);
      n10 = NameList();
n7.addNode(n10);
n6.addNode(n7);
      break;
      }
    default:
      jj_la1[96] = jj_gen;
      ;
    }
    n12 = jj_consume_token(LBRACE);
n11 = (NodeToken) n12;
    if (jj_2_12(2147483647)) {
n14 = new NodeSequence(1);
      n15 = ExplicitConstructorInvocation();
n14.addNode(n15);
n13.addNode(n14);
    } else {
      ;
    }
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
      case 147:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[97] = jj_gen;
        break label_30;
      }
n17 = new NodeSequence(1);
      n18 = BlockStatement();
n17.addNode(n18);
n16.addNode(n17);
    }
n16.nodes.trimToSize();
    n20 = jj_consume_token(RBRACE);
n19 = (NodeToken) n20;
jtbNode = new ConstructorDeclaration(n0, n3, n5, n6, n11, n13, n16, n19);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ExplicitConstructorInvocation ExplicitConstructorInvocation() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  ReferenceType n6 = null;
  NodeListOptional n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  ReferenceType n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeChoice n14 = null;
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  Arguments n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeSequence n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  Arguments n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeSequence n27 = null;
  NodeSequence n28 = null;
  PrimaryExpression n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  Arguments n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  ExplicitConstructorInvocation jtbNode = null;
    if (jj_2_13(3)) {
n1 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
n7 = new NodeListOptional();
n3 = new NodeSequence(4);
        n5 = jj_consume_token(LT);
n4 = (NodeToken) n5;
n3.addNode(n4);
        n6 = ReferenceType();
n3.addNode(n6);
        label_31:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[98] = jj_gen;
            break label_31;
          }
n8 = new NodeSequence(2);
          n10 = jj_consume_token(COMMA);
n9 = (NodeToken) n10;
n8.addNode(n9);
          n11 = ReferenceType();
n8.addNode(n11);
n7.addNode(n8);
        }
n7.nodes.trimToSize();
n3.addNode(n7);
        n13 = jj_consume_token(GT);
n12 = (NodeToken) n13;
n3.addNode(n12);
n2.addNode(n3);
        break;
        }
      default:
        jj_la1[99] = jj_gen;
        ;
      }
n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THIS:{
n15 = new NodeSequence(3);
        n17 = jj_consume_token(THIS);
n16 = (NodeToken) n17;
n15.addNode(n16);
        n18 = Arguments(null);
n15.addNode(n18);
        n20 = jj_consume_token(SEMICOLON);
n19 = (NodeToken) n20;
n15.addNode(n19);
n14 = new NodeChoice(n15, 0, 2);
        break;
        }
      case SUPER:{
n21 = new NodeSequence(3);
        n23 = jj_consume_token(SUPER);
n22 = (NodeToken) n23;
n21.addNode(n22);
        n24 = Arguments(null);
n21.addNode(n24);
        n26 = jj_consume_token(SEMICOLON);
n25 = (NodeToken) n26;
n21.addNode(n25);
n14 = new NodeChoice(n21, 1, 2);
        break;
        }
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n1.addNode(n14);
n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case IDENTIFIER:{
n27 = new NodeSequence(1);
n28 = new NodeSequence(5);
        n29 = PrimaryExpression();
n28.addNode(n29);
        n31 = jj_consume_token(DOT);
n30 = (NodeToken) n31;
n28.addNode(n30);
        n33 = jj_consume_token(SUPER);
n32 = (NodeToken) n33;
n28.addNode(n32);
        n34 = Arguments(null);
n28.addNode(n34);
        n36 = jj_consume_token(SEMICOLON);
n35 = (NodeToken) n36;
n28.addNode(n35);
n27.addNode(n28);
n0 = new NodeChoice(n27, 1, 2);
        break;
        }
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
jtbNode = new ExplicitConstructorInvocation(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public Initializer Initializer() throws ParseException {// --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Block n4 = null;
  Initializer jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STATIC:{
n1 = new NodeSequence(1);
      n3 = jj_consume_token(STATIC);
n2 = (NodeToken) n3;
n1.addNode(n2);
n0.addNode(n1);
      break;
      }
    default:
      jj_la1[102] = jj_gen;
      ;
    }
    n4 = Block(null);
jtbNode = new Initializer(n0, n4);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public Type Type() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  ReferenceType n2 = null;
  NodeSequence n3 = null;
  PrimitiveType n4 = null;
  Type jtbNode = null;
    if (jj_2_14(2)) {
n1 = new NodeSequence(1);
      n2 = ReferenceType();
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:{
n3 = new NodeSequence(1);
        n4 = PrimitiveType();
n3.addNode(n4);
n0 = new NodeChoice(n3, 1, 2);
        break;
        }
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
jtbNode = new Type(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ReferenceType ReferenceType() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  PrimitiveType n2 = null;
  NodeList n3 = new NodeList();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  ClassOrInterfaceType n10 = null;
  NodeListOptional n11 = new NodeListOptional();
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  ReferenceType jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:{
n1 = new NodeSequence(2);
      n2 = PrimitiveType();
n1.addNode(n2);
      label_32:
      while (true) {
n4 = new NodeSequence(2);
        n6 = jj_consume_token(LBRACKET);
n5 = (NodeToken) n6;
n4.addNode(n5);
        n8 = jj_consume_token(RBRACKET);
n7 = (NodeToken) n8;
n4.addNode(n7);
n3.addNode(n4);
        if (jj_2_15(2)) {
          ;
        } else {
          break label_32;
        }
      }
n3.nodes.trimToSize();
n1.addNode(n3);
n0 = new NodeChoice(n1, 0, 2);
      break;
      }
    case IDENTIFIER:{
n9 = new NodeSequence(2);
      n10 = ClassOrInterfaceType();
n9.addNode(n10);
      label_33:
      while (true) {
        if (jj_2_16(2)) {
          ;
        } else {
          break label_33;
        }
n12 = new NodeSequence(2);
        n14 = jj_consume_token(LBRACKET);
n13 = (NodeToken) n14;
n12.addNode(n13);
        n16 = jj_consume_token(RBRACKET);
n15 = (NodeToken) n16;
n12.addNode(n15);
n11.addNode(n12);
      }
n11.nodes.trimToSize();
n9.addNode(n11);
n0 = new NodeChoice(n9, 1, 2);
      break;
      }
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new ReferenceType(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ClassOrInterfaceType ClassOrInterfaceType() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  TypeArguments n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeOptional n11 = null;
  NodeSequence n12 = null;
  TypeArguments n13 = null;
  ClassOrInterfaceType jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(IDENTIFIER);
n0 = (NodeToken) n1;
    if (jj_2_17(2)) {
n3 = new NodeSequence(1);
      n4 = TypeArguments();
n3.addNode(n4);
n2.addNode(n3);
    } else {
      ;
    }
    label_34:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_34;
      }
n11 = new NodeOptional();
n6 = new NodeSequence(3);
      n8 = jj_consume_token(DOT);
n7 = (NodeToken) n8;
n6.addNode(n7);
      n10 = jj_consume_token(IDENTIFIER);
n9 = (NodeToken) n10;
n6.addNode(n9);
      if (jj_2_19(2)) {
n12 = new NodeSequence(1);
        n13 = TypeArguments();
n12.addNode(n13);
n11.addNode(n12);
      } else {
        ;
      }
n6.addNode(n11);
n5.addNode(n6);
    }
n5.nodes.trimToSize();
jtbNode = new ClassOrInterfaceType(n0, n2, n5);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public TypeArguments TypeArguments() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  TypeArgument n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  TypeArgument n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  TypeArguments jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(LT);
n0 = (NodeToken) n1;
    n2 = TypeArgument();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[105] = jj_gen;
        break label_35;
      }
n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
n5 = (NodeToken) n6;
n4.addNode(n5);
      n7 = TypeArgument();
n4.addNode(n7);
n3.addNode(n4);
    }
n3.nodes.trimToSize();
    n9 = jj_consume_token(GT);
n8 = (NodeToken) n9;
jtbNode = new TypeArguments(n0, n2, n3, n8);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public EmptyTypeArguments EmptyTypeArguments() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  EmptyTypeArguments jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(LT);
n0 = (NodeToken) n1;
    n3 = jj_consume_token(GT);
n2 = (NodeToken) n3;
jtbNode = new EmptyTypeArguments(n0, n2);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public TypeArgument TypeArgument() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  ReferenceType n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  WildcardBounds n8 = null;
  TypeArgument jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:{
n1 = new NodeSequence(1);
      n2 = ReferenceType();
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 2);
      break;
      }
    case HOOK:{
n3 = new NodeSequence(2);
      n5 = jj_consume_token(HOOK);
n4 = (NodeToken) n5;
n3.addNode(n4);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:
      case SUPER:{
n7 = new NodeSequence(1);
        n8 = WildcardBounds();
n7.addNode(n8);
n6.addNode(n7);
        break;
        }
      default:
        jj_la1[106] = jj_gen;
        ;
      }
n3.addNode(n6);
n0 = new NodeChoice(n3, 1, 2);
      break;
      }
    default:
      jj_la1[107] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new TypeArgument(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public WildcardBounds WildcardBounds() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  ReferenceType n4 = null;
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  ReferenceType n8 = null;
  WildcardBounds jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENDS:{
n1 = new NodeSequence(2);
      n3 = jj_consume_token(EXTENDS);
n2 = (NodeToken) n3;
n1.addNode(n2);
      n4 = ReferenceType();
n1.addNode(n4);
n0 = new NodeChoice(n1, 0, 2);
      break;
      }
    case SUPER:{
n5 = new NodeSequence(2);
      n7 = jj_consume_token(SUPER);
n6 = (NodeToken) n7;
n5.addNode(n6);
      n8 = ReferenceType();
n5.addNode(n8);
n0 = new NodeChoice(n5, 1, 2);
      break;
      }
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new WildcardBounds(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public PrimitiveType PrimitiveType() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeSequence n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeSequence n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  PrimitiveType jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:{
n1 = new NodeSequence(1);
      n3 = jj_consume_token(BOOLEAN);
n2 = (NodeToken) n3;
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 8);
      break;
      }
    case CHAR:{
n4 = new NodeSequence(1);
      n6 = jj_consume_token(CHAR);
n5 = (NodeToken) n6;
n4.addNode(n5);
n0 = new NodeChoice(n4, 1, 8);
      break;
      }
    case BYTE:{
n7 = new NodeSequence(1);
      n9 = jj_consume_token(BYTE);
n8 = (NodeToken) n9;
n7.addNode(n8);
n0 = new NodeChoice(n7, 2, 8);
      break;
      }
    case SHORT:{
n10 = new NodeSequence(1);
      n12 = jj_consume_token(SHORT);
n11 = (NodeToken) n12;
n10.addNode(n11);
n0 = new NodeChoice(n10, 3, 8);
      break;
      }
    case INT:{
n13 = new NodeSequence(1);
      n15 = jj_consume_token(INT);
n14 = (NodeToken) n15;
n13.addNode(n14);
n0 = new NodeChoice(n13, 4, 8);
      break;
      }
    case LONG:{
n16 = new NodeSequence(1);
      n18 = jj_consume_token(LONG);
n17 = (NodeToken) n18;
n16.addNode(n17);
n0 = new NodeChoice(n16, 5, 8);
      break;
      }
    case FLOAT:{
n19 = new NodeSequence(1);
      n21 = jj_consume_token(FLOAT);
n20 = (NodeToken) n21;
n19.addNode(n20);
n0 = new NodeChoice(n19, 6, 8);
      break;
      }
    case DOUBLE:{
n22 = new NodeSequence(1);
      n24 = jj_consume_token(DOUBLE);
n23 = (NodeToken) n24;
n22.addNode(n23);
n0 = new NodeChoice(n22, 7, 8);
      break;
      }
    default:
      jj_la1[109] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new PrimitiveType(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ResultType ResultType(List<Token> tokens) throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  Type n5 = null;
  ResultType jtbNode = null;
  // --- user BNFProduction java block ---
  Token first = getToken(1);
  if (tokens == null)
    tokens = new ArrayList<Token>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:{
n1 = new NodeSequence(1);
      n3 = jj_consume_token(VOID);
n2 = (NodeToken) n3;
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 2);
      break;
      }
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:{
n4 = new NodeSequence(1);
      n5 = Type();
n4.addNode(n5);
n0 = new NodeChoice(n4, 1, 2);
      break;
      }
    default:
      jj_la1[110] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
Token last = getToken(0);
    Token t = first;
    while (true) {
      tokens.add(t);
      if (t == last)
        break;
      t = t.next;
    }
jtbNode = new ResultType(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public Name Name(List<Token> tokens) throws ParseException {// --- JTB generated node declarations ---
  JavaIdentifier n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  JavaIdentifier n5 = null;
  Name jtbNode = null;
  // --- user BNFProduction java block ---
  if (tokens == null)
    tokens = new ArrayList<Token>();
  Token first = getToken(1);
  String name = "";
    // --- user BNFProduction ExpansionChoices ---
      n0 = JavaIdentifier();
    label_36:
    while (true) {
      if (jj_2_20(2)) {
        ;
      } else {
        break label_36;
      }
n2 = new NodeSequence(2);
      n4 = jj_consume_token(DOT);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = JavaIdentifier();
n2.addNode(n5);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new Name(n0, n1);
Token last = getToken(0);
    Token t = first;
    while (true) {
      tokens.add(t);
      name += t.image;
      if (t == last)
        break;
      t = t.next;
    }
    jtbrt_Name = name;
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public NameList NameList() throws ParseException {// --- JTB generated node declarations ---
  Name n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Name n5 = null;
  NameList jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = Name(null);
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[111] = jj_gen;
        break label_37;
      }
n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = Name(null);
n2.addNode(n5);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new NameList(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public Expression Expression(List<Token> tokens) throws ParseException {// --- JTB generated node declarations ---
  ConditionalExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  AssignmentOperator n3 = null;
  Expression n4 = null;
  Expression jtbNode = null;
  // --- user BNFProduction java block ---
  Token first = getToken(1);
  if (tokens == null)
    tokens = new ArrayList<Token>();
    // --- user BNFProduction ExpansionChoices ---
      n0 = ConditionalExpression();
    if (jj_2_21(2)) {
n2 = new NodeSequence(2);
      n3 = AssignmentOperator();
n2.addNode(n3);
      n4 = Expression(null);
n2.addNode(n4);
n1.addNode(n2);
    } else {
      ;
    }
Token last = getToken(0);
    Token t = first;
    while (true) {
      tokens.add(t);
      if (t == last)
        break;
      t = t.next;
    }
jtbNode = new Expression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public AssignmentOperator AssignmentOperator() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeSequence n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeSequence n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeSequence n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeSequence n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeSequence n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  NodeSequence n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  AssignmentOperator jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
n1 = new NodeSequence(1);
      n3 = jj_consume_token(ASSIGN);
n2 = (NodeToken) n3;
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 12);
      break;
      }
    case STARASSIGN:{
n4 = new NodeSequence(1);
      n6 = jj_consume_token(STARASSIGN);
n5 = (NodeToken) n6;
n4.addNode(n5);
n0 = new NodeChoice(n4, 1, 12);
      break;
      }
    case SLASHASSIGN:{
n7 = new NodeSequence(1);
      n9 = jj_consume_token(SLASHASSIGN);
n8 = (NodeToken) n9;
n7.addNode(n8);
n0 = new NodeChoice(n7, 2, 12);
      break;
      }
    case REMASSIGN:{
n10 = new NodeSequence(1);
      n12 = jj_consume_token(REMASSIGN);
n11 = (NodeToken) n12;
n10.addNode(n11);
n0 = new NodeChoice(n10, 3, 12);
      break;
      }
    case PLUSASSIGN:{
n13 = new NodeSequence(1);
      n15 = jj_consume_token(PLUSASSIGN);
n14 = (NodeToken) n15;
n13.addNode(n14);
n0 = new NodeChoice(n13, 4, 12);
      break;
      }
    case MINUSASSIGN:{
n16 = new NodeSequence(1);
      n18 = jj_consume_token(MINUSASSIGN);
n17 = (NodeToken) n18;
n16.addNode(n17);
n0 = new NodeChoice(n16, 5, 12);
      break;
      }
    case 143:{
n19 = new NodeSequence(1);
      n21 = jj_consume_token(143);
n20 = (NodeToken) n21;
n19.addNode(n20);
n0 = new NodeChoice(n19, 6, 12);
      break;
      }
    case 144:{
n22 = new NodeSequence(1);
      n24 = jj_consume_token(144);
n23 = (NodeToken) n24;
n22.addNode(n23);
n0 = new NodeChoice(n22, 7, 12);
      break;
      }
    case 145:{
n25 = new NodeSequence(1);
      n27 = jj_consume_token(145);
n26 = (NodeToken) n27;
n25.addNode(n26);
n0 = new NodeChoice(n25, 8, 12);
      break;
      }
    case ANDASSIGN:{
n28 = new NodeSequence(1);
      n30 = jj_consume_token(ANDASSIGN);
n29 = (NodeToken) n30;
n28.addNode(n29);
n0 = new NodeChoice(n28, 9, 12);
      break;
      }
    case XORASSIGN:{
n31 = new NodeSequence(1);
      n33 = jj_consume_token(XORASSIGN);
n32 = (NodeToken) n33;
n31.addNode(n32);
n0 = new NodeChoice(n31, 10, 12);
      break;
      }
    case ORASSIGN:{
n34 = new NodeSequence(1);
      n36 = jj_consume_token(ORASSIGN);
n35 = (NodeToken) n36;
n34.addNode(n35);
n0 = new NodeChoice(n34, 11, 12);
      break;
      }
    default:
      jj_la1[112] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new AssignmentOperator(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ConditionalExpression ConditionalExpression() throws ParseException {// --- JTB generated node declarations ---
  ConditionalOrExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Expression n8 = null;
  ConditionalExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HOOK:{
n2 = new NodeSequence(4);
      n4 = jj_consume_token(HOOK);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = Expression(null);
n2.addNode(n5);
      n7 = jj_consume_token(COLON);
n6 = (NodeToken) n7;
n2.addNode(n6);
      n8 = Expression(null);
n2.addNode(n8);
n1.addNode(n2);
      break;
      }
    default:
      jj_la1[113] = jj_gen;
      ;
    }
jtbNode = new ConditionalExpression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ConditionalOrExpression ConditionalOrExpression() throws ParseException {// --- JTB generated node declarations ---
  ConditionalAndExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ConditionalAndExpression n5 = null;
  ConditionalOrExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = ConditionalAndExpression();
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_OR:{
        ;
        break;
        }
      default:
        jj_la1[114] = jj_gen;
        break label_38;
      }
n2 = new NodeSequence(2);
      n4 = jj_consume_token(SC_OR);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = ConditionalAndExpression();
n2.addNode(n5);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new ConditionalOrExpression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ConditionalAndExpression ConditionalAndExpression() throws ParseException {// --- JTB generated node declarations ---
  InclusiveOrExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  InclusiveOrExpression n5 = null;
  ConditionalAndExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = InclusiveOrExpression();
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_AND:{
        ;
        break;
        }
      default:
        jj_la1[115] = jj_gen;
        break label_39;
      }
n2 = new NodeSequence(2);
      n4 = jj_consume_token(SC_AND);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = InclusiveOrExpression();
n2.addNode(n5);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new ConditionalAndExpression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public InclusiveOrExpression InclusiveOrExpression() throws ParseException {// --- JTB generated node declarations ---
  ExclusiveOrExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ExclusiveOrExpression n5 = null;
  InclusiveOrExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = ExclusiveOrExpression();
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_OR:{
        ;
        break;
        }
      default:
        jj_la1[116] = jj_gen;
        break label_40;
      }
n2 = new NodeSequence(2);
      n4 = jj_consume_token(BIT_OR);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = ExclusiveOrExpression();
n2.addNode(n5);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new InclusiveOrExpression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ExclusiveOrExpression ExclusiveOrExpression() throws ParseException {// --- JTB generated node declarations ---
  AndExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  AndExpression n5 = null;
  ExclusiveOrExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = AndExpression();
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case XOR:{
        ;
        break;
        }
      default:
        jj_la1[117] = jj_gen;
        break label_41;
      }
n2 = new NodeSequence(2);
      n4 = jj_consume_token(XOR);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = AndExpression();
n2.addNode(n5);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new ExclusiveOrExpression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public AndExpression AndExpression() throws ParseException {// --- JTB generated node declarations ---
  EqualityExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  EqualityExpression n5 = null;
  AndExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = EqualityExpression();
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_AND:{
        ;
        break;
        }
      default:
        jj_la1[118] = jj_gen;
        break label_42;
      }
n2 = new NodeSequence(2);
      n4 = jj_consume_token(BIT_AND);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = EqualityExpression();
n2.addNode(n5);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new AndExpression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public EqualityExpression EqualityExpression() throws ParseException {// --- JTB generated node declarations ---
  InstanceOfExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  InstanceOfExpression n10 = null;
  EqualityExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = InstanceOfExpression();
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:
      case NE:{
        ;
        break;
        }
      default:
        jj_la1[119] = jj_gen;
        break label_43;
      }
n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
n4 = new NodeSequence(1);
        n6 = jj_consume_token(EQ);
n5 = (NodeToken) n6;
n4.addNode(n5);
n3 = new NodeChoice(n4, 0, 2);
        break;
        }
      case NE:{
n7 = new NodeSequence(1);
        n9 = jj_consume_token(NE);
n8 = (NodeToken) n9;
n7.addNode(n8);
n3 = new NodeChoice(n7, 1, 2);
        break;
        }
      default:
        jj_la1[120] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n2.addNode(n3);
      n10 = InstanceOfExpression();
n2.addNode(n10);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new EqualityExpression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public InstanceOfExpression InstanceOfExpression() throws ParseException {// --- JTB generated node declarations ---
  RelationalExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Type n5 = null;
  InstanceOfExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSTANCEOF:{
n2 = new NodeSequence(2);
      n4 = jj_consume_token(INSTANCEOF);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = Type();
n2.addNode(n5);
n1.addNode(n2);
      break;
      }
    default:
      jj_la1[121] = jj_gen;
      ;
    }
jtbNode = new InstanceOfExpression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public RelationalExpression RelationalExpression() throws ParseException {// --- JTB generated node declarations ---
  ShiftExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  ShiftExpression n16 = null;
  RelationalExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = ShiftExpression();
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:
      case LE:
      case GE:
      case GT:{
        ;
        break;
        }
      default:
        jj_la1[122] = jj_gen;
        break label_44;
      }
n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
n4 = new NodeSequence(1);
        n6 = jj_consume_token(LT);
n5 = (NodeToken) n6;
n4.addNode(n5);
n3 = new NodeChoice(n4, 0, 4);
        break;
        }
      case GT:{
n7 = new NodeSequence(1);
        n9 = jj_consume_token(GT);
n8 = (NodeToken) n9;
n7.addNode(n8);
n3 = new NodeChoice(n7, 1, 4);
        break;
        }
      case LE:{
n10 = new NodeSequence(1);
        n12 = jj_consume_token(LE);
n11 = (NodeToken) n12;
n10.addNode(n11);
n3 = new NodeChoice(n10, 2, 4);
        break;
        }
      case GE:{
n13 = new NodeSequence(1);
        n15 = jj_consume_token(GE);
n14 = (NodeToken) n15;
n13.addNode(n14);
n3 = new NodeChoice(n13, 3, 4);
        break;
        }
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n2.addNode(n3);
      n16 = ShiftExpression();
n2.addNode(n16);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new RelationalExpression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ShiftExpression ShiftExpression() throws ParseException {// --- JTB generated node declarations ---
  AdditiveExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  RUnsignedShift n8 = null;
  NodeSequence n9 = null;
  RSignedShift n10 = null;
  AdditiveExpression n11 = null;
  ShiftExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = AdditiveExpression();
    label_45:
    while (true) {
      if (jj_2_22(1)) {
        ;
      } else {
        break label_45;
      }
n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 146:{
n4 = new NodeSequence(1);
        n6 = jj_consume_token(146);
n5 = (NodeToken) n6;
n4.addNode(n5);
n3 = new NodeChoice(n4, 0, 3);
        break;
        }
      default:
        jj_la1[124] = jj_gen;
        if (jj_2_23(1)) {
n7 = new NodeSequence(1);
          n8 = RUnsignedShift();
n7.addNode(n8);
n3 = new NodeChoice(n7, 1, 3);
        } else if (jj_2_24(1)) {
n9 = new NodeSequence(1);
          n10 = RSignedShift();
n9.addNode(n10);
n3 = new NodeChoice(n9, 2, 3);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
n2.addNode(n3);
      n11 = AdditiveExpression();
n2.addNode(n11);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new ShiftExpression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public RSignedShift RSignedShift() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  RSignedShift jtbNode = null;
    if (getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    // ModMMa 2012/07 : '">" ">"' changed to '">>"'
      n1 = jj_consume_token(RSIGNEDSHIFT);
n0 = (NodeToken) n1;
jtbNode = new RSignedShift(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public RUnsignedShift RUnsignedShift() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  RUnsignedShift jtbNode = null;
    if (getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    // ModMMa 2012/07 : '">" ">" ">"' changed to '">>>"'
      n1 = jj_consume_token(RUNSIGNEDSHIFT);
n0 = (NodeToken) n1;
jtbNode = new RUnsignedShift(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public AdditiveExpression AdditiveExpression() throws ParseException {// --- JTB generated node declarations ---
  MultiplicativeExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  MultiplicativeExpression n10 = null;
  AdditiveExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = MultiplicativeExpression();
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[125] = jj_gen;
        break label_46;
      }
n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
n4 = new NodeSequence(1);
        n6 = jj_consume_token(PLUS);
n5 = (NodeToken) n6;
n4.addNode(n5);
n3 = new NodeChoice(n4, 0, 2);
        break;
        }
      case MINUS:{
n7 = new NodeSequence(1);
        n9 = jj_consume_token(MINUS);
n8 = (NodeToken) n9;
n7.addNode(n8);
n3 = new NodeChoice(n7, 1, 2);
        break;
        }
      default:
        jj_la1[126] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n2.addNode(n3);
      n10 = MultiplicativeExpression();
n2.addNode(n10);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new AdditiveExpression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {// --- JTB generated node declarations ---
  UnaryExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  UnaryExpression n13 = null;
  MultiplicativeExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = UnaryExpression();
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:{
        ;
        break;
        }
      default:
        jj_la1[127] = jj_gen;
        break label_47;
      }
n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
n4 = new NodeSequence(1);
        n6 = jj_consume_token(STAR);
n5 = (NodeToken) n6;
n4.addNode(n5);
n3 = new NodeChoice(n4, 0, 3);
        break;
        }
      case SLASH:{
n7 = new NodeSequence(1);
        n9 = jj_consume_token(SLASH);
n8 = (NodeToken) n9;
n7.addNode(n8);
n3 = new NodeChoice(n7, 1, 3);
        break;
        }
      case REM:{
n10 = new NodeSequence(1);
        n12 = jj_consume_token(REM);
n11 = (NodeToken) n12;
n10.addNode(n11);
n3 = new NodeChoice(n10, 2, 3);
        break;
        }
      default:
        jj_la1[128] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n2.addNode(n3);
      n13 = UnaryExpression();
n2.addNode(n13);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new MultiplicativeExpression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public UnaryExpression UnaryExpression() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  UnaryExpression n9 = null;
  NodeSequence n10 = null;
  PreIncrementExpression n11 = null;
  NodeSequence n12 = null;
  PreDecrementExpression n13 = null;
  NodeSequence n14 = null;
  UnaryExpressionNotPlusMinus n15 = null;
  UnaryExpression jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:{
n1 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
n3 = new NodeSequence(1);
        n5 = jj_consume_token(PLUS);
n4 = (NodeToken) n5;
n3.addNode(n4);
n2 = new NodeChoice(n3, 0, 2);
        break;
        }
      case MINUS:{
n6 = new NodeSequence(1);
        n8 = jj_consume_token(MINUS);
n7 = (NodeToken) n8;
n6.addNode(n7);
n2 = new NodeChoice(n6, 1, 2);
        break;
        }
      default:
        jj_la1[129] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n1.addNode(n2);
      n9 = UnaryExpression();
n1.addNode(n9);
n0 = new NodeChoice(n1, 0, 4);
      break;
      }
    case INCR:{
n10 = new NodeSequence(1);
      n11 = PreIncrementExpression();
n10.addNode(n11);
n0 = new NodeChoice(n10, 1, 4);
      break;
      }
    case DECR:{
n12 = new NodeSequence(1);
      n13 = PreDecrementExpression();
n12.addNode(n13);
n0 = new NodeChoice(n12, 2, 4);
      break;
      }
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case IDENTIFIER:{
n14 = new NodeSequence(1);
      n15 = UnaryExpressionNotPlusMinus();
n14.addNode(n15);
n0 = new NodeChoice(n14, 3, 4);
      break;
      }
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new UnaryExpression(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public PreIncrementExpression PreIncrementExpression() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  PrimaryExpression n2 = null;
  PreIncrementExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(INCR);
n0 = (NodeToken) n1;
    n2 = PrimaryExpression();
jtbNode = new PreIncrementExpression(n0, n2);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public PreDecrementExpression PreDecrementExpression() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  PrimaryExpression n2 = null;
  PreDecrementExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(DECR);
n0 = (NodeToken) n1;
    n2 = PrimaryExpression();
jtbNode = new PreDecrementExpression(n0, n2);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  UnaryExpression n9 = null;
  NodeSequence n10 = null;
  CastExpression n11 = null;
  NodeSequence n12 = null;
  PostfixExpression n13 = null;
  UnaryExpressionNotPlusMinus jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BANG:
    case TILDE:{
n1 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TILDE:{
n3 = new NodeSequence(1);
        n5 = jj_consume_token(TILDE);
n4 = (NodeToken) n5;
n3.addNode(n4);
n2 = new NodeChoice(n3, 0, 2);
        break;
        }
      case BANG:{
n6 = new NodeSequence(1);
        n8 = jj_consume_token(BANG);
n7 = (NodeToken) n8;
n6.addNode(n7);
n2 = new NodeChoice(n6, 1, 2);
        break;
        }
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n1.addNode(n2);
      n9 = UnaryExpression();
n1.addNode(n9);
n0 = new NodeChoice(n1, 0, 3);
      break;
      }
    default:
      jj_la1[132] = jj_gen;
      if (jj_2_25(2147483647)) {
n10 = new NodeSequence(1);
        n11 = CastExpression();
n10.addNode(n11);
n0 = new NodeChoice(n10, 1, 3);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _JAVACODE:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case IDENTIFIER:{
n12 = new NodeSequence(1);
          n13 = PostfixExpression();
n12.addNode(n13);
n0 = new NodeChoice(n12, 2, 3);
          break;
          }
        default:
          jj_la1[133] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
jtbNode = new UnaryExpressionNotPlusMinus(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public CastLookahead CastLookahead() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  PrimitiveType n4 = null;
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Type n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  Type n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeChoice n19 = null;
  NodeSequence n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeSequence n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeSequence n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeSequence n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeSequence n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  NodeSequence n35 = null;
  NodeToken n36 = null;
  Token n37 = null;
  NodeSequence n38 = null;
  NodeToken n39 = null;
  Token n40 = null;
  NodeSequence n41 = null;
  Literal n42 = null;
  CastLookahead jtbNode = null;
    if (jj_2_26(2)) {
n1 = new NodeSequence(2);
      n3 = jj_consume_token(LPAREN);
n2 = (NodeToken) n3;
n1.addNode(n2);
      n4 = PrimitiveType();
n1.addNode(n4);
n0 = new NodeChoice(n1, 0, 3);
    } else if (jj_2_27(2147483647)) {
n5 = new NodeSequence(4);
      n7 = jj_consume_token(LPAREN);
n6 = (NodeToken) n7;
n5.addNode(n6);
      n8 = Type();
n5.addNode(n8);
      n10 = jj_consume_token(LBRACKET);
n9 = (NodeToken) n10;
n5.addNode(n9);
      n12 = jj_consume_token(RBRACKET);
n11 = (NodeToken) n12;
n5.addNode(n11);
n0 = new NodeChoice(n5, 1, 3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
n13 = new NodeSequence(4);
        n15 = jj_consume_token(LPAREN);
n14 = (NodeToken) n15;
n13.addNode(n14);
        n16 = Type();
n13.addNode(n16);
        n18 = jj_consume_token(RPAREN);
n17 = (NodeToken) n18;
n13.addNode(n17);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TILDE:{
n20 = new NodeSequence(1);
          n22 = jj_consume_token(TILDE);
n21 = (NodeToken) n22;
n20.addNode(n21);
n19 = new NodeChoice(n20, 0, 8);
          break;
          }
        case BANG:{
n23 = new NodeSequence(1);
          n25 = jj_consume_token(BANG);
n24 = (NodeToken) n25;
n23.addNode(n24);
n19 = new NodeChoice(n23, 1, 8);
          break;
          }
        case LPAREN:{
n26 = new NodeSequence(1);
          n28 = jj_consume_token(LPAREN);
n27 = (NodeToken) n28;
n26.addNode(n27);
n19 = new NodeChoice(n26, 2, 8);
          break;
          }
        case IDENTIFIER:{
n29 = new NodeSequence(1);
          n31 = jj_consume_token(IDENTIFIER);
n30 = (NodeToken) n31;
n29.addNode(n30);
n19 = new NodeChoice(n29, 3, 8);
          break;
          }
        case THIS:{
n32 = new NodeSequence(1);
          n34 = jj_consume_token(THIS);
n33 = (NodeToken) n34;
n32.addNode(n33);
n19 = new NodeChoice(n32, 4, 8);
          break;
          }
        case SUPER:{
n35 = new NodeSequence(1);
          n37 = jj_consume_token(SUPER);
n36 = (NodeToken) n37;
n35.addNode(n36);
n19 = new NodeChoice(n35, 5, 8);
          break;
          }
        case NEW:{
n38 = new NodeSequence(1);
          n40 = jj_consume_token(NEW);
n39 = (NodeToken) n40;
n38.addNode(n39);
n19 = new NodeChoice(n38, 6, 8);
          break;
          }
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:{
n41 = new NodeSequence(1);
          n42 = Literal();
n41.addNode(n42);
n19 = new NodeChoice(n41, 7, 8);
          break;
          }
        default:
          jj_la1[134] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
n13.addNode(n19);
n0 = new NodeChoice(n13, 2, 3);
        break;
        }
      default:
        jj_la1[135] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
jtbNode = new CastLookahead(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public PostfixExpression PostfixExpression() throws ParseException {// --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  PostfixExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCR:
    case DECR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCR:{
n3 = new NodeSequence(1);
        n5 = jj_consume_token(INCR);
n4 = (NodeToken) n5;
n3.addNode(n4);
n2 = new NodeChoice(n3, 0, 2);
        break;
        }
      case DECR:{
n6 = new NodeSequence(1);
        n8 = jj_consume_token(DECR);
n7 = (NodeToken) n8;
n6.addNode(n7);
n2 = new NodeChoice(n6, 1, 2);
        break;
        }
      default:
        jj_la1[136] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n1.addNode(n2);
      break;
      }
    default:
      jj_la1[137] = jj_gen;
      ;
    }
jtbNode = new PostfixExpression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public CastExpression CastExpression() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Type n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  UnaryExpression n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  Type n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  UnaryExpressionNotPlusMinus n14 = null;
  CastExpression jtbNode = null;
    if (jj_2_28(2147483647)) {
n1 = new NodeSequence(4);
      n3 = jj_consume_token(LPAREN);
n2 = (NodeToken) n3;
n1.addNode(n2);
      n4 = Type();
n1.addNode(n4);
      n6 = jj_consume_token(RPAREN);
n5 = (NodeToken) n6;
n1.addNode(n5);
      n7 = UnaryExpression();
n1.addNode(n7);
n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
n8 = new NodeSequence(4);
        n10 = jj_consume_token(LPAREN);
n9 = (NodeToken) n10;
n8.addNode(n9);
        n11 = Type();
n8.addNode(n11);
        n13 = jj_consume_token(RPAREN);
n12 = (NodeToken) n13;
n8.addNode(n12);
        n14 = UnaryExpressionNotPlusMinus();
n8.addNode(n14);
n0 = new NodeChoice(n8, 1, 2);
        break;
        }
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
jtbNode = new CastExpression(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public PrimaryExpression PrimaryExpression() throws ParseException {// --- JTB generated node declarations ---
  PrimaryPrefix n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  PrimarySuffix n3 = null;
  PrimaryExpression jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = PrimaryPrefix();
    label_48:
    while (true) {
      if (jj_2_29(2)) {
        ;
      } else {
        break label_48;
      }
n2 = new NodeSequence(1);
      n3 = PrimarySuffix();
n2.addNode(n3);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new PrimaryExpression(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public MemberSelector MemberSelector() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  TypeArguments n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MemberSelector jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(DOT);
n0 = (NodeToken) n1;
    n2 = TypeArguments();
    n4 = jj_consume_token(IDENTIFIER);
n3 = (NodeToken) n4;
jtbNode = new MemberSelector(n0, n2, n3);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public PrimaryPrefix PrimaryPrefix() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  Literal n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  Expression n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeSequence n19 = null;
  AllocationExpression n20 = null;
  NodeSequence n21 = null;
  ResultType n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeSequence n27 = null;
  Name n28 = null;
  PrimaryPrefix jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:{
n1 = new NodeSequence(1);
      n2 = Literal();
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 7);
      break;
      }
    case THIS:{
n3 = new NodeSequence(1);
      n5 = jj_consume_token(THIS);
n4 = (NodeToken) n5;
n3.addNode(n4);
n0 = new NodeChoice(n3, 1, 7);
      break;
      }
    case SUPER:{
n6 = new NodeSequence(3);
      n8 = jj_consume_token(SUPER);
n7 = (NodeToken) n8;
n6.addNode(n7);
      n10 = jj_consume_token(DOT);
n9 = (NodeToken) n10;
n6.addNode(n9);
      n12 = jj_consume_token(IDENTIFIER);
n11 = (NodeToken) n12;
n6.addNode(n11);
n0 = new NodeChoice(n6, 2, 7);
      break;
      }
    case LPAREN:{
n13 = new NodeSequence(3);
      n15 = jj_consume_token(LPAREN);
n14 = (NodeToken) n15;
n13.addNode(n14);
      n16 = Expression(null);
n13.addNode(n16);
      n18 = jj_consume_token(RPAREN);
n17 = (NodeToken) n18;
n13.addNode(n17);
n0 = new NodeChoice(n13, 3, 7);
      break;
      }
    case NEW:{
n19 = new NodeSequence(1);
      n20 = AllocationExpression();
n19.addNode(n20);
n0 = new NodeChoice(n19, 4, 7);
      break;
      }
    default:
      jj_la1[139] = jj_gen;
      if (jj_2_30(2147483647)) {
n21 = new NodeSequence(3);
        n22 = ResultType(null);
n21.addNode(n22);
        n24 = jj_consume_token(DOT);
n23 = (NodeToken) n24;
n21.addNode(n23);
        n26 = jj_consume_token(CLASS);
n25 = (NodeToken) n26;
n21.addNode(n25);
n0 = new NodeChoice(n21, 5, 7);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _JAVACODE:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case IDENTIFIER:{
n27 = new NodeSequence(1);
          n28 = Name(null);
n27.addNode(n28);
n0 = new NodeChoice(n27, 6, 7);
          break;
          }
        default:
          jj_la1[140] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
jtbNode = new PrimaryPrefix(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public PrimarySuffix PrimarySuffix() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  AllocationExpression n9 = null;
  NodeSequence n10 = null;
  MemberSelector n11 = null;
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  Expression n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeSequence n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeSequence n23 = null;
  Arguments n24 = null;
  PrimarySuffix jtbNode = null;
    if (jj_2_31(2)) {
n1 = new NodeSequence(2);
      n3 = jj_consume_token(DOT);
n2 = (NodeToken) n3;
n1.addNode(n2);
      n5 = jj_consume_token(THIS);
n4 = (NodeToken) n5;
n1.addNode(n4);
n0 = new NodeChoice(n1, 0, 6);
    } else if (jj_2_32(2)) {
n6 = new NodeSequence(2);
      n8 = jj_consume_token(DOT);
n7 = (NodeToken) n8;
n6.addNode(n7);
      n9 = AllocationExpression();
n6.addNode(n9);
n0 = new NodeChoice(n6, 1, 6);
    } else if (jj_2_33(3)) {
n10 = new NodeSequence(1);
      n11 = MemberSelector();
n10.addNode(n11);
n0 = new NodeChoice(n10, 2, 6);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
n12 = new NodeSequence(3);
        n14 = jj_consume_token(LBRACKET);
n13 = (NodeToken) n14;
n12.addNode(n13);
        n15 = Expression(null);
n12.addNode(n15);
        n17 = jj_consume_token(RBRACKET);
n16 = (NodeToken) n17;
n12.addNode(n16);
n0 = new NodeChoice(n12, 3, 6);
        break;
        }
      case DOT:{
n18 = new NodeSequence(2);
        n20 = jj_consume_token(DOT);
n19 = (NodeToken) n20;
n18.addNode(n19);
        n22 = jj_consume_token(IDENTIFIER);
n21 = (NodeToken) n22;
n18.addNode(n21);
n0 = new NodeChoice(n18, 4, 6);
        break;
        }
      case LPAREN:{
n23 = new NodeSequence(1);
        n24 = Arguments(null);
n23.addNode(n24);
n0 = new NodeChoice(n23, 5, 6);
        break;
        }
      default:
        jj_la1[141] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
jtbNode = new PrimarySuffix(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public Literal Literal() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  BooleanLiteral n14 = null;
  NodeSequence n15 = null;
  NullLiteral n16 = null;
  Literal jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
n1 = new NodeSequence(1);
      n3 = jj_consume_token(INTEGER_LITERAL);
n2 = (NodeToken) n3;
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 6);
      break;
      }
    case FLOATING_POINT_LITERAL:{
n4 = new NodeSequence(1);
      n6 = jj_consume_token(FLOATING_POINT_LITERAL);
n5 = (NodeToken) n6;
n4.addNode(n5);
n0 = new NodeChoice(n4, 1, 6);
      break;
      }
    case CHARACTER_LITERAL:{
n7 = new NodeSequence(1);
      n9 = jj_consume_token(CHARACTER_LITERAL);
n8 = (NodeToken) n9;
n7.addNode(n8);
n0 = new NodeChoice(n7, 2, 6);
      break;
      }
    case STRING_LITERAL:{
n10 = new NodeSequence(1);
      // not a StringLiteral() ! only in CastLookahead and PrimaryPrefix
          n12 = jj_consume_token(STRING_LITERAL);
n11 = (NodeToken) n12;
n10.addNode(n11);
n0 = new NodeChoice(n10, 3, 6);
      break;
      }
    case FALSE:
    case TRUE:{
n13 = new NodeSequence(1);
      n14 = BooleanLiteral();
n13.addNode(n14);
n0 = new NodeChoice(n13, 4, 6);
      break;
      }
    case NULL:{
n15 = new NodeSequence(1);
      n16 = NullLiteral();
n15.addNode(n16);
n0 = new NodeChoice(n15, 5, 6);
      break;
      }
    default:
      jj_la1[142] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new Literal(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public IntegerLiteral IntegerLiteral() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  IntegerLiteral jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(INTEGER_LITERAL);
n0 = (NodeToken) n1;
try {
      jtbrt_IntegerLiteral = Integer.parseInt(token.image);
    }
    catch (NumberFormatException e) {
      {if (true) throw new Error();}
    }
jtbNode = new IntegerLiteral(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public BooleanLiteral BooleanLiteral() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  BooleanLiteral jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
n1 = new NodeSequence(1);
      n3 = jj_consume_token(TRUE);
n2 = (NodeToken) n3;
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 2);
jtbrt_BooleanLiteral = true;
      break;
      }
    case FALSE:{
n4 = new NodeSequence(1);
      n6 = jj_consume_token(FALSE);
n5 = (NodeToken) n6;
n4.addNode(n5);
n0 = new NodeChoice(n4, 1, 2);
jtbrt_BooleanLiteral = false;
      break;
      }
    default:
      jj_la1[143] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new BooleanLiteral(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public StringLiteral StringLiteral() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  StringLiteral jtbNode = null;
  // --- user BNFProduction java block ---
  Token t = null;
  ;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(STRING_LITERAL);
n0 = (NodeToken) n1;
t = n1;
jtbNode = new StringLiteral(n0);
jtbrt_StringLiteral = remove_escapes_and_quotes(t, t.image);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public NullLiteral NullLiteral() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NullLiteral jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(NULL);
n0 = (NodeToken) n1;
jtbNode = new NullLiteral(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public Arguments Arguments(List<Token> tokens) throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  ArgumentList n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Arguments jtbNode = null;
  // --- user BNFProduction java block ---
  Token first = null;
  Token last = null;
  if (tokens == null)
    tokens = new ArrayList<Token>();
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(LPAREN);
n0 = (NodeToken) n1;
first = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case IDENTIFIER:{
n3 = new NodeSequence(1);
      n4 = ArgumentList();
n3.addNode(n4);
n2.addNode(n3);
      break;
      }
    default:
      jj_la1[144] = jj_gen;
      ;
    }
last = getToken(0);
    n6 = jj_consume_token(RPAREN);
n5 = (NodeToken) n6;
if (last.next != first) {
      // i.e., this is not an empty sequence
      Token t = first;
      while (true) {
        tokens.add(t);
        if (t == last)
          break;
        t = t.next;
      }
    }
jtbNode = new Arguments(n0, n2, n5);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ArgumentList ArgumentList() throws ParseException {// --- JTB generated node declarations ---
  Expression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  ArgumentList jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = Expression(null);
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[145] = jj_gen;
        break label_49;
      }
n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = Expression(null);
n2.addNode(n5);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new ArgumentList(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public AllocationExpression AllocationExpression() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  PrimitiveType n4 = null;
  ArrayDimsAndInits n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  ClassOrInterfaceType n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeChoice n11 = null;
  NodeSequence n12 = null;
  EmptyTypeArguments n13 = null;
  NodeSequence n14 = null;
  TypeArguments n15 = null;
  NodeChoice n16 = null;
  NodeSequence n17 = null;
  ArrayDimsAndInits n18 = null;
  NodeSequence n19 = null;
  Arguments n20 = null;
  NodeOptional n21 = new NodeOptional();
  NodeSequence n22 = null;
  ClassOrInterfaceBody n23 = null;
  AllocationExpression jtbNode = null;
    if (jj_2_35(2)) {
n1 = new NodeSequence(3);
      n3 = jj_consume_token(NEW);
n2 = (NodeToken) n3;
n1.addNode(n2);
      n4 = PrimitiveType();
n1.addNode(n4);
      n5 = ArrayDimsAndInits();
n1.addNode(n5);
n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEW:{
n6 = new NodeSequence(4);
        n8 = jj_consume_token(NEW);
n7 = (NodeToken) n8;
n6.addNode(n7);
        n9 = ClassOrInterfaceType();
n6.addNode(n9);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LT:{
          if (jj_2_34(2)) {
n12 = new NodeSequence(1);
            n13 = EmptyTypeArguments();
n12.addNode(n13);
n11 = new NodeChoice(n12, 0, 2);
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LT:{
n14 = new NodeSequence(1);
              n15 = TypeArguments();
n14.addNode(n15);
n11 = new NodeChoice(n14, 1, 2);
              break;
              }
            default:
              jj_la1[146] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
n10.addNode(n11);
          break;
          }
        default:
          jj_la1[147] = jj_gen;
          ;
        }
n6.addNode(n10);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
n17 = new NodeSequence(1);
          n18 = ArrayDimsAndInits();
n17.addNode(n18);
n16 = new NodeChoice(n17, 0, 2);
          break;
          }
        case LPAREN:{
n19 = new NodeSequence(2);
          n20 = Arguments(null);
n19.addNode(n20);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACE:{
n22 = new NodeSequence(1);
            n23 = ClassOrInterfaceBody(false, null);
n22.addNode(n23);
n21.addNode(n22);
            break;
            }
          default:
            jj_la1[148] = jj_gen;
            ;
          }
n19.addNode(n21);
n16 = new NodeChoice(n19, 1, 2);
          break;
          }
        default:
          jj_la1[149] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
n6.addNode(n16);
n0 = new NodeChoice(n6, 1, 2);
        break;
        }
      default:
        jj_la1[150] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
jtbNode = new AllocationExpression(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ArrayDimsAndInits ArrayDimsAndInits() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeList n2 = new NodeList();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Expression n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeListOptional n9 = new NodeListOptional();
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeSequence n15 = null;
  NodeList n16 = new NodeList();
  NodeSequence n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  ArrayInitializer n22 = null;
  ArrayDimsAndInits jtbNode = null;
    if (jj_2_38(2)) {
n1 = new NodeSequence(2);
      label_50:
      while (true) {
n3 = new NodeSequence(3);
        n5 = jj_consume_token(LBRACKET);
n4 = (NodeToken) n5;
n3.addNode(n4);
        n6 = Expression(null);
n3.addNode(n6);
        n8 = jj_consume_token(RBRACKET);
n7 = (NodeToken) n8;
n3.addNode(n7);
n2.addNode(n3);
        if (jj_2_36(2)) {
          ;
        } else {
          break label_50;
        }
      }
n2.nodes.trimToSize();
n1.addNode(n2);
      label_51:
      while (true) {
        if (jj_2_37(2)) {
          ;
        } else {
          break label_51;
        }
n10 = new NodeSequence(2);
        n12 = jj_consume_token(LBRACKET);
n11 = (NodeToken) n12;
n10.addNode(n11);
        n14 = jj_consume_token(RBRACKET);
n13 = (NodeToken) n14;
n10.addNode(n13);
n9.addNode(n10);
      }
n9.nodes.trimToSize();
n1.addNode(n9);
n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
n15 = new NodeSequence(2);
        label_52:
        while (true) {
n17 = new NodeSequence(2);
          n19 = jj_consume_token(LBRACKET);
n18 = (NodeToken) n19;
n17.addNode(n18);
          n21 = jj_consume_token(RBRACKET);
n20 = (NodeToken) n21;
n17.addNode(n20);
n16.addNode(n17);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACKET:{
            ;
            break;
            }
          default:
            jj_la1[151] = jj_gen;
            break label_52;
          }
        }
n16.nodes.trimToSize();
n15.addNode(n16);
        n22 = ArrayInitializer();
n15.addNode(n22);
n0 = new NodeChoice(n15, 1, 2);
        break;
        }
      default:
        jj_la1[152] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
jtbNode = new ArrayDimsAndInits(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public Statement Statement() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  LabeledStatement n2 = null;
  NodeSequence n3 = null;
  AssertStatement n4 = null;
  NodeSequence n5 = null;
  Block n6 = null;
  NodeSequence n7 = null;
  EmptyStatement n8 = null;
  NodeSequence n9 = null;
  StatementExpression n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  SwitchStatement n14 = null;
  NodeSequence n15 = null;
  IfStatement n16 = null;
  NodeSequence n17 = null;
  WhileStatement n18 = null;
  NodeSequence n19 = null;
  DoStatement n20 = null;
  NodeSequence n21 = null;
  ForStatement n22 = null;
  NodeSequence n23 = null;
  BreakStatement n24 = null;
  NodeSequence n25 = null;
  ContinueStatement n26 = null;
  NodeSequence n27 = null;
  ReturnStatement n28 = null;
  NodeSequence n29 = null;
  ThrowStatement n30 = null;
  NodeSequence n31 = null;
  SynchronizedStatement n32 = null;
  NodeSequence n33 = null;
  TryStatement n34 = null;
  Statement jtbNode = null;
    if (jj_2_39(2)) {
n1 = new NodeSequence(1);
      n2 = LabeledStatement();
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 16);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSERT:{
n3 = new NodeSequence(1);
        n4 = AssertStatement();
n3.addNode(n4);
n0 = new NodeChoice(n3, 1, 16);
        break;
        }
      case LBRACE:{
n5 = new NodeSequence(1);
        n6 = Block(null);
n5.addNode(n6);
n0 = new NodeChoice(n5, 2, 16);
        break;
        }
      case SEMICOLON:{
n7 = new NodeSequence(1);
        n8 = EmptyStatement();
n7.addNode(n8);
n0 = new NodeChoice(n7, 3, 16);
        break;
        }
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case INCR:
      case DECR:
      case IDENTIFIER:{
n9 = new NodeSequence(2);
        n10 = StatementExpression();
n9.addNode(n10);
        n12 = jj_consume_token(SEMICOLON);
n11 = (NodeToken) n12;
n9.addNode(n11);
n0 = new NodeChoice(n9, 4, 16);
        break;
        }
      case SWITCH:{
n13 = new NodeSequence(1);
        n14 = SwitchStatement();
n13.addNode(n14);
n0 = new NodeChoice(n13, 5, 16);
        break;
        }
      case IF:{
n15 = new NodeSequence(1);
        n16 = IfStatement();
n15.addNode(n16);
n0 = new NodeChoice(n15, 6, 16);
        break;
        }
      case WHILE:{
n17 = new NodeSequence(1);
        n18 = WhileStatement();
n17.addNode(n18);
n0 = new NodeChoice(n17, 7, 16);
        break;
        }
      case DO:{
n19 = new NodeSequence(1);
        n20 = DoStatement();
n19.addNode(n20);
n0 = new NodeChoice(n19, 8, 16);
        break;
        }
      case FOR:{
n21 = new NodeSequence(1);
        n22 = ForStatement();
n21.addNode(n22);
n0 = new NodeChoice(n21, 9, 16);
        break;
        }
      case BREAK:{
n23 = new NodeSequence(1);
        n24 = BreakStatement();
n23.addNode(n24);
n0 = new NodeChoice(n23, 10, 16);
        break;
        }
      case CONTINUE:{
n25 = new NodeSequence(1);
        n26 = ContinueStatement();
n25.addNode(n26);
n0 = new NodeChoice(n25, 11, 16);
        break;
        }
      case RETURN:{
n27 = new NodeSequence(1);
        n28 = ReturnStatement();
n27.addNode(n28);
n0 = new NodeChoice(n27, 12, 16);
        break;
        }
      case THROW:{
n29 = new NodeSequence(1);
        n30 = ThrowStatement();
n29.addNode(n30);
n0 = new NodeChoice(n29, 13, 16);
        break;
        }
      case SYNCHRONIZED:{
n31 = new NodeSequence(1);
        n32 = SynchronizedStatement();
n31.addNode(n32);
n0 = new NodeChoice(n31, 14, 16);
        break;
        }
      case TRY:{
n33 = new NodeSequence(1);
        n34 = TryStatement();
n33.addNode(n34);
n0 = new NodeChoice(n33, 15, 16);
        break;
        }
      default:
        jj_la1[153] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
jtbNode = new Statement(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public AssertStatement AssertStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Expression n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Expression n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  AssertStatement jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(ASSERT);
n0 = (NodeToken) n1;
    n2 = Expression(null);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON:{
n4 = new NodeSequence(2);
      n6 = jj_consume_token(COLON);
n5 = (NodeToken) n6;
n4.addNode(n5);
      n7 = Expression(null);
n4.addNode(n7);
n3.addNode(n4);
      break;
      }
    default:
      jj_la1[154] = jj_gen;
      ;
    }
    n9 = jj_consume_token(SEMICOLON);
n8 = (NodeToken) n9;
jtbNode = new AssertStatement(n0, n2, n3, n8);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public LabeledStatement LabeledStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Statement n4 = null;
  LabeledStatement jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(IDENTIFIER);
n0 = (NodeToken) n1;
    n3 = jj_consume_token(COLON);
n2 = (NodeToken) n3;
    n4 = Statement();
jtbNode = new LabeledStatement(n0, n2, n4);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public Block Block(List<Token> tokens) throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  BlockStatement n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Block jtbNode = null;
  // --- user BNFProduction java block ---
  Token first = null;
  Token last = null;
  if (tokens == null)
    tokens = new ArrayList<Token>();
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(LBRACE);
n0 = (NodeToken) n1;
first = getToken(1);
    label_53:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
      case 147:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[155] = jj_gen;
        break label_53;
      }
n3 = new NodeSequence(1);
      n4 = BlockStatement();
n3.addNode(n4);
n2.addNode(n3);
    }
n2.nodes.trimToSize();
last = getToken(0);
    n6 = jj_consume_token(RBRACE);
n5 = (NodeToken) n6;
if (last.next != first) {
      // i.e., this is not an empty sequence
      Token t = first;
      while (true) {
        tokens.add(t);
        if (t == last)
          break;
        t = t.next;
      }
    }
jtbNode = new Block(n0, n2, n5);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public BlockStatement BlockStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  LocalVariableDeclaration n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeSequence n5 = null;
  Statement n6 = null;
  NodeSequence n7 = null;
  ClassOrInterfaceDeclaration n8 = null;
  BlockStatement jtbNode = null;
    if (jj_2_40(2147483647)) {
n1 = new NodeSequence(2);
      n2 = LocalVariableDeclaration();
n1.addNode(n2);
      n4 = jj_consume_token(SEMICOLON);
n3 = (NodeToken) n4;
n1.addNode(n3);
n0 = new NodeChoice(n1, 0, 3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
      case IDENTIFIER:{
n5 = new NodeSequence(1);
        n6 = Statement();
n5.addNode(n6);
n0 = new NodeChoice(n5, 1, 3);
        break;
        }
      case CLASS:
      case INTERFACE:{
n7 = new NodeSequence(1);
        n8 = ClassOrInterfaceDeclaration();
n7.addNode(n8);
n0 = new NodeChoice(n7, 2, 3);
        break;
        }
      default:
        jj_la1[156] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
jtbNode = new BlockStatement(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public LocalVariableDeclaration LocalVariableDeclaration() throws ParseException {// --- JTB generated node declarations ---
  VariableModifiers n0 = null;
  Type n1 = null;
  VariableDeclarator n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  VariableDeclarator n7 = null;
  LocalVariableDeclaration jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      // ModMMa 2012/06
      //  Modifiers() Type() VariableDeclarator()
      n0 = VariableModifiers();
    n1 = Type();
    n2 = VariableDeclarator();
    label_54:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[157] = jj_gen;
        break label_54;
      }
n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
n5 = (NodeToken) n6;
n4.addNode(n5);
      n7 = VariableDeclarator();
n4.addNode(n7);
n3.addNode(n4);
    }
n3.nodes.trimToSize();
jtbNode = new LocalVariableDeclaration(n0, n1, n2, n3);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public VariableModifiers VariableModifiers() throws ParseException {// --- JTB generated node declarations ---
  NodeListOptional n0 = new NodeListOptional();
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  Annotation n7 = null;
  VariableModifiers jtbNode = null;
    label_55:
    while (true) {
      if (jj_2_41(2)) {
        ;
      } else {
        break label_55;
      }
n1 = new NodeSequence(1);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINAL:{
n3 = new NodeSequence(1);
        n5 = jj_consume_token(FINAL);
n4 = (NodeToken) n5;
n3.addNode(n4);
n2 = new NodeChoice(n3, 0, 2);
        break;
        }
      case 147:{
n6 = new NodeSequence(1);
        n7 = Annotation();
n6.addNode(n7);
n2 = new NodeChoice(n6, 1, 2);
        break;
        }
      default:
        jj_la1[158] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n1.addNode(n2);
n0.addNode(n1);
    }
n0.nodes.trimToSize();
jtbNode = new VariableModifiers(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public EmptyStatement EmptyStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  EmptyStatement jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(SEMICOLON);
n0 = (NodeToken) n1;
jtbNode = new EmptyStatement(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public StatementExpression StatementExpression() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  PreIncrementExpression n2 = null;
  NodeSequence n3 = null;
  PreDecrementExpression n4 = null;
  NodeSequence n5 = null;
  PrimaryExpression n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeChoice n8 = null;
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeSequence n15 = null;
  AssignmentOperator n16 = null;
  Expression n17 = null;
  StatementExpression jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCR:{
n1 = new NodeSequence(1);
      n2 = PreIncrementExpression();
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 3);
      break;
      }
    case DECR:{
n3 = new NodeSequence(1);
      n4 = PreDecrementExpression();
n3.addNode(n4);
n0 = new NodeChoice(n3, 1, 3);
      break;
      }
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case IDENTIFIER:{
n5 = new NodeSequence(2);
      n6 = PrimaryExpression();
n5.addNode(n6);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case 143:
      case 144:
      case 145:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INCR:{
n9 = new NodeSequence(1);
          n11 = jj_consume_token(INCR);
n10 = (NodeToken) n11;
n9.addNode(n10);
n8 = new NodeChoice(n9, 0, 3);
          break;
          }
        case DECR:{
n12 = new NodeSequence(1);
          n14 = jj_consume_token(DECR);
n13 = (NodeToken) n14;
n12.addNode(n13);
n8 = new NodeChoice(n12, 1, 3);
          break;
          }
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case 143:
        case 144:
        case 145:{
n15 = new NodeSequence(2);
          n16 = AssignmentOperator();
n15.addNode(n16);
          n17 = Expression(null);
n15.addNode(n17);
n8 = new NodeChoice(n15, 2, 3);
          break;
          }
        default:
          jj_la1[159] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
n7.addNode(n8);
        break;
        }
      default:
        jj_la1[160] = jj_gen;
        ;
      }
n5.addNode(n7);
n0 = new NodeChoice(n5, 2, 3);
      break;
      }
    default:
      jj_la1[161] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new StatementExpression(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public SwitchStatement SwitchStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeListOptional n9 = new NodeListOptional();
  NodeSequence n10 = null;
  SwitchLabel n11 = null;
  NodeListOptional n12 = null;
  NodeSequence n13 = null;
  BlockStatement n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  SwitchStatement jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(SWITCH);
n0 = (NodeToken) n1;
    n3 = jj_consume_token(LPAREN);
n2 = (NodeToken) n3;
    n4 = Expression(null);
    n6 = jj_consume_token(RPAREN);
n5 = (NodeToken) n6;
    n8 = jj_consume_token(LBRACE);
n7 = (NodeToken) n8;
    label_56:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:
      case _DEFAULT:{
        ;
        break;
        }
      default:
        jj_la1[162] = jj_gen;
        break label_56;
      }
n12 = new NodeListOptional();
n10 = new NodeSequence(2);
      n11 = SwitchLabel();
n10.addNode(n11);
      label_57:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _JAVACODE:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
        case 147:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[163] = jj_gen;
          break label_57;
        }
n13 = new NodeSequence(1);
        n14 = BlockStatement();
n13.addNode(n14);
n12.addNode(n13);
      }
n12.nodes.trimToSize();
n10.addNode(n12);
n9.addNode(n10);
    }
n9.nodes.trimToSize();
    n16 = jj_consume_token(RBRACE);
n15 = (NodeToken) n16;
jtbNode = new SwitchStatement(n0, n2, n4, n5, n7, n9, n15);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public SwitchLabel SwitchLabel() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  SwitchLabel jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CASE:{
n1 = new NodeSequence(3);
      n3 = jj_consume_token(CASE);
n2 = (NodeToken) n3;
n1.addNode(n2);
      n4 = Expression(null);
n1.addNode(n4);
      n6 = jj_consume_token(COLON);
n5 = (NodeToken) n6;
n1.addNode(n5);
n0 = new NodeChoice(n1, 0, 2);
      break;
      }
    case _DEFAULT:{
n7 = new NodeSequence(2);
      n9 = jj_consume_token(_DEFAULT);
n8 = (NodeToken) n9;
n7.addNode(n8);
      n11 = jj_consume_token(COLON);
n10 = (NodeToken) n11;
n7.addNode(n10);
n0 = new NodeChoice(n7, 1, 2);
      break;
      }
    default:
      jj_la1[164] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new SwitchLabel(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public IfStatement IfStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Statement n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  Statement n12 = null;
  IfStatement jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(IF);
n0 = (NodeToken) n1;
    n3 = jj_consume_token(LPAREN);
n2 = (NodeToken) n3;
    n4 = Expression(null);
    n6 = jj_consume_token(RPAREN);
n5 = (NodeToken) n6;
    n7 = Statement();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
n9 = new NodeSequence(2);
      n11 = jj_consume_token(ELSE);
n10 = (NodeToken) n11;
n9.addNode(n10);
      n12 = Statement();
n9.addNode(n12);
n8.addNode(n9);
      break;
      }
    default:
      jj_la1[165] = jj_gen;
      ;
    }
jtbNode = new IfStatement(n0, n2, n4, n5, n7, n8);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public WhileStatement WhileStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Statement n7 = null;
  WhileStatement jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(WHILE);
n0 = (NodeToken) n1;
    n3 = jj_consume_token(LPAREN);
n2 = (NodeToken) n3;
    n4 = Expression(null);
    n6 = jj_consume_token(RPAREN);
n5 = (NodeToken) n6;
    n7 = Statement();
jtbNode = new WhileStatement(n0, n2, n4, n5, n7);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public DoStatement DoStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Statement n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Expression n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  DoStatement jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(DO);
n0 = (NodeToken) n1;
    n2 = Statement();
    n4 = jj_consume_token(WHILE);
n3 = (NodeToken) n4;
    n6 = jj_consume_token(LPAREN);
n5 = (NodeToken) n6;
    n7 = Expression(null);
    n9 = jj_consume_token(RPAREN);
n8 = (NodeToken) n9;
    n11 = jj_consume_token(SEMICOLON);
n10 = (NodeToken) n11;
jtbNode = new DoStatement(n0, n2, n3, n5, n7, n8, n10);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ForStatement ForStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeChoice n4 = null;
  NodeSequence n5 = null;
  VariableModifiers n6 = null;
  Type n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  Expression n12 = null;
  NodeSequence n13 = null;
  NodeOptional n14 = new NodeOptional();
  NodeSequence n15 = null;
  ForInit n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeOptional n19 = new NodeOptional();
  NodeSequence n20 = null;
  Expression n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeOptional n24 = new NodeOptional();
  NodeSequence n25 = null;
  ForUpdate n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  Statement n29 = null;
  ForStatement jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(FOR);
n0 = (NodeToken) n1;
    n3 = jj_consume_token(LPAREN);
n2 = (NodeToken) n3;
    if (jj_2_42(2147483647)) {
n5 = new NodeSequence(5);
      n6 = VariableModifiers();
n5.addNode(n6);
      n7 = Type();
n5.addNode(n7);
      n9 = jj_consume_token(IDENTIFIER);
n8 = (NodeToken) n9;
n5.addNode(n8);
      n11 = jj_consume_token(COLON);
n10 = (NodeToken) n11;
n5.addNode(n10);
      n12 = Expression(null);
n5.addNode(n12);
n4 = new NodeChoice(n5, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case SEMICOLON:
      case INCR:
      case DECR:
      case 147:
      case IDENTIFIER:{
n13 = new NodeSequence(5);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _JAVACODE:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case INCR:
        case DECR:
        case 147:
        case IDENTIFIER:{
n15 = new NodeSequence(1);
          n16 = ForInit();
n15.addNode(n16);
n14.addNode(n15);
          break;
          }
        default:
          jj_la1[166] = jj_gen;
          ;
        }
n13.addNode(n14);
        n18 = jj_consume_token(SEMICOLON);
n17 = (NodeToken) n18;
n13.addNode(n17);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _JAVACODE:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case IDENTIFIER:{
n20 = new NodeSequence(1);
          n21 = Expression(null);
n20.addNode(n21);
n19.addNode(n20);
          break;
          }
        default:
          jj_la1[167] = jj_gen;
          ;
        }
n13.addNode(n19);
        n23 = jj_consume_token(SEMICOLON);
n22 = (NodeToken) n23;
n13.addNode(n22);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case _LOOKAHEAD:
        case _IGNORE_CASE:
        case _PARSER_BEGIN:
        case _PARSER_END:
        case _JAVACODE:
        case _TOKEN:
        case _SPECIAL_TOKEN:
        case _MORE:
        case _SKIP:
        case _TOKEN_MGR_DECLS:
        case _EOF:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case INCR:
        case DECR:
        case IDENTIFIER:{
n25 = new NodeSequence(1);
          n26 = ForUpdate();
n25.addNode(n26);
n24.addNode(n25);
          break;
          }
        default:
          jj_la1[168] = jj_gen;
          ;
        }
n13.addNode(n24);
n4 = new NodeChoice(n13, 1, 2);
        break;
        }
      default:
        jj_la1[169] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    n28 = jj_consume_token(RPAREN);
n27 = (NodeToken) n28;
    n29 = Statement();
jtbNode = new ForStatement(n0, n2, n4, n27, n29);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ForInit ForInit() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  LocalVariableDeclaration n2 = null;
  NodeSequence n3 = null;
  StatementExpressionList n4 = null;
  ForInit jtbNode = null;
    if (jj_2_43(2147483647)) {
n1 = new NodeSequence(1);
      n2 = LocalVariableDeclaration();
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case _LOOKAHEAD:
      case _IGNORE_CASE:
      case _PARSER_BEGIN:
      case _PARSER_END:
      case _JAVACODE:
      case _TOKEN:
      case _SPECIAL_TOKEN:
      case _MORE:
      case _SKIP:
      case _TOKEN_MGR_DECLS:
      case _EOF:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case LPAREN:
      case INCR:
      case DECR:
      case IDENTIFIER:{
n3 = new NodeSequence(1);
        n4 = StatementExpressionList();
n3.addNode(n4);
n0 = new NodeChoice(n3, 1, 2);
        break;
        }
      default:
        jj_la1[170] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
jtbNode = new ForInit(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public StatementExpressionList StatementExpressionList() throws ParseException {// --- JTB generated node declarations ---
  StatementExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  StatementExpression n5 = null;
  StatementExpressionList jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = StatementExpression();
    label_58:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[171] = jj_gen;
        break label_58;
      }
n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = StatementExpression();
n2.addNode(n5);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new StatementExpressionList(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ForUpdate ForUpdate() throws ParseException {// --- JTB generated node declarations ---
  StatementExpressionList n0 = null;
  ForUpdate jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = StatementExpressionList();
jtbNode = new ForUpdate(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public BreakStatement BreakStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  BreakStatement jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(BREAK);
n0 = (NodeToken) n1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
n3 = new NodeSequence(1);
      n5 = jj_consume_token(IDENTIFIER);
n4 = (NodeToken) n5;
n3.addNode(n4);
n2.addNode(n3);
      break;
      }
    default:
      jj_la1[172] = jj_gen;
      ;
    }
    n7 = jj_consume_token(SEMICOLON);
n6 = (NodeToken) n7;
jtbNode = new BreakStatement(n0, n2, n6);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ContinueStatement ContinueStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  ContinueStatement jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(CONTINUE);
n0 = (NodeToken) n1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
n3 = new NodeSequence(1);
      n5 = jj_consume_token(IDENTIFIER);
n4 = (NodeToken) n5;
n3.addNode(n4);
n2.addNode(n3);
      break;
      }
    default:
      jj_la1[173] = jj_gen;
      ;
    }
    n7 = jj_consume_token(SEMICOLON);
n6 = (NodeToken) n7;
jtbNode = new ContinueStatement(n0, n2, n6);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ReturnStatement ReturnStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  ReturnStatement jtbNode = null;
  // --- user BNFProduction java block ---
  Token t = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(RETURN);
n0 = (NodeToken) n1;
t = n1;
// Add if statement to prevent subsequent code generated from being dead code
    if (inAction) {
      t.image = "{if (true) return";
      jumpPatched = true;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case IDENTIFIER:{
n3 = new NodeSequence(1);
      n4 = Expression(null);
n3.addNode(n4);
n2.addNode(n3);
      break;
      }
    default:
      jj_la1[174] = jj_gen;
      ;
    }
    n6 = jj_consume_token(SEMICOLON);
n5 = (NodeToken) n6;
t = n6;
// Add closing brace for above if statement
    if (inAction)
      t.image = ";}";
jtbNode = new ReturnStatement(n0, n2, n5);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public ThrowStatement ThrowStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Expression n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ThrowStatement jtbNode = null;
  // --- user BNFProduction java block ---
  Token t = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(THROW);
n0 = (NodeToken) n1;
t = n1;
// Add if statement to prevent subsequent code generated from being dead code
    if (inAction) {
      t.image = "{if (true) throw";
      jumpPatched = true;
    }
    n2 = Expression(null);
    n4 = jj_consume_token(SEMICOLON);
n3 = (NodeToken) n4;
t = n4;
// Add closing brace for above if statement
    if (inAction)
      t.image = ";}";
jtbNode = new ThrowStatement(n0, n2, n3);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public SynchronizedStatement SynchronizedStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Block n7 = null;
  SynchronizedStatement jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(SYNCHRONIZED);
n0 = (NodeToken) n1;
    n3 = jj_consume_token(LPAREN);
n2 = (NodeToken) n3;
    n4 = Expression(null);
    n6 = jj_consume_token(RPAREN);
n5 = (NodeToken) n6;
    n7 = Block(null);
jtbNode = new SynchronizedStatement(n0, n2, n4, n5, n7);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public TryStatement TryStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Block n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  FormalParameter n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  Block n12 = null;
  NodeOptional n13 = new NodeOptional();
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  Block n17 = null;
  TryStatement jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(TRY);
n0 = (NodeToken) n1;
    n2 = Block(null);
    label_59:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CATCH:{
        ;
        break;
        }
      default:
        jj_la1[175] = jj_gen;
        break label_59;
      }
n4 = new NodeSequence(5);
      n6 = jj_consume_token(CATCH);
n5 = (NodeToken) n6;
n4.addNode(n5);
      n8 = jj_consume_token(LPAREN);
n7 = (NodeToken) n8;
n4.addNode(n7);
      n9 = FormalParameter();
n4.addNode(n9);
      n11 = jj_consume_token(RPAREN);
n10 = (NodeToken) n11;
n4.addNode(n10);
      n12 = Block(null);
n4.addNode(n12);
n3.addNode(n4);
    }
n3.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FINALLY:{
n14 = new NodeSequence(2);
      n16 = jj_consume_token(FINALLY);
n15 = (NodeToken) n16;
n14.addNode(n15);
      n17 = Block(null);
n14.addNode(n17);
n13.addNode(n14);
      break;
      }
    default:
      jj_la1[176] = jj_gen;
      ;
    }
jtbNode = new TryStatement(n0, n2, n3, n13);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public Annotation Annotation() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NormalAnnotation n2 = null;
  NodeSequence n3 = null;
  SingleMemberAnnotation n4 = null;
  NodeSequence n5 = null;
  MarkerAnnotation n6 = null;
  Annotation jtbNode = null;
    if (jj_2_44(2147483647)) {
n1 = new NodeSequence(1);
      n2 = NormalAnnotation();
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 3);
    } else if (jj_2_45(2147483647)) {
n3 = new NodeSequence(1);
      n4 = SingleMemberAnnotation();
n3.addNode(n4);
n0 = new NodeChoice(n3, 1, 3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 147:{
n5 = new NodeSequence(1);
        n6 = MarkerAnnotation();
n5.addNode(n6);
n0 = new NodeChoice(n5, 2, 3);
        break;
        }
      default:
        jj_la1[177] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
jtbNode = new Annotation(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public NormalAnnotation NormalAnnotation() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Name n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeSequence n6 = null;
  MemberValuePairs n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NormalAnnotation jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(147);
n0 = (NodeToken) n1;
    n2 = Name(null);
    n4 = jj_consume_token(LPAREN);
n3 = (NodeToken) n4;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
n6 = new NodeSequence(1);
      n7 = MemberValuePairs();
n6.addNode(n7);
n5.addNode(n6);
      break;
      }
    default:
      jj_la1[178] = jj_gen;
      ;
    }
    n9 = jj_consume_token(RPAREN);
n8 = (NodeToken) n9;
jtbNode = new NormalAnnotation(n0, n2, n3, n5, n8);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public MarkerAnnotation MarkerAnnotation() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Name n2 = null;
  MarkerAnnotation jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(147);
n0 = (NodeToken) n1;
    n2 = Name(null);
jtbNode = new MarkerAnnotation(n0, n2);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public SingleMemberAnnotation SingleMemberAnnotation() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Name n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MemberValue n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  SingleMemberAnnotation jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(147);
n0 = (NodeToken) n1;
    n2 = Name(null);
    n4 = jj_consume_token(LPAREN);
n3 = (NodeToken) n4;
    n5 = MemberValue();
    n7 = jj_consume_token(RPAREN);
n6 = (NodeToken) n7;
jtbNode = new SingleMemberAnnotation(n0, n2, n3, n5, n6);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public MemberValuePairs MemberValuePairs() throws ParseException {// --- JTB generated node declarations ---
  MemberValuePair n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MemberValuePair n5 = null;
  MemberValuePairs jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n0 = MemberValuePair();
    label_60:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[179] = jj_gen;
        break label_60;
      }
n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
n3 = (NodeToken) n4;
n2.addNode(n3);
      n5 = MemberValuePair();
n2.addNode(n5);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
jtbNode = new MemberValuePairs(n0, n1);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public MemberValuePair MemberValuePair() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  MemberValue n4 = null;
  MemberValuePair jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(IDENTIFIER);
n0 = (NodeToken) n1;
    n3 = jj_consume_token(ASSIGN);
n2 = (NodeToken) n3;
    n4 = MemberValue();
jtbNode = new MemberValuePair(n0, n2, n4);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public MemberValue MemberValue() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  Annotation n2 = null;
  NodeSequence n3 = null;
  MemberValueArrayInitializer n4 = null;
  NodeSequence n5 = null;
  ConditionalExpression n6 = null;
  MemberValue jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 147:{
n1 = new NodeSequence(1);
      n2 = Annotation();
n1.addNode(n2);
n0 = new NodeChoice(n1, 0, 3);
      break;
      }
    case LBRACE:{
n3 = new NodeSequence(1);
      n4 = MemberValueArrayInitializer();
n3.addNode(n4);
n0 = new NodeChoice(n3, 1, 3);
      break;
      }
    case _LOOKAHEAD:
    case _IGNORE_CASE:
    case _PARSER_BEGIN:
    case _PARSER_END:
    case _JAVACODE:
    case _TOKEN:
    case _SPECIAL_TOKEN:
    case _MORE:
    case _SKIP:
    case _TOKEN_MGR_DECLS:
    case _EOF:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case IDENTIFIER:{
n5 = new NodeSequence(1);
      n6 = ConditionalExpression();
n5.addNode(n6);
n0 = new NodeChoice(n5, 2, 3);
      break;
      }
    default:
      jj_la1[180] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new MemberValue(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public MemberValueArrayInitializer MemberValueArrayInitializer() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  MemberValue n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  MemberValue n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  MemberValueArrayInitializer jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(LBRACE);
n0 = (NodeToken) n1;
    n2 = MemberValue();
    label_61:
    while (true) {
      if (jj_2_46(2)) {
        ;
      } else {
        break label_61;
      }
n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
n5 = (NodeToken) n6;
n4.addNode(n5);
      n7 = MemberValue();
n4.addNode(n7);
n3.addNode(n4);
    }
n3.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
n9 = new NodeSequence(1);
      n11 = jj_consume_token(COMMA);
n10 = (NodeToken) n11;
n9.addNode(n10);
n8.addNode(n9);
      break;
      }
    default:
      jj_la1[181] = jj_gen;
      ;
    }
    n13 = jj_consume_token(RBRACE);
n12 = (NodeToken) n13;
jtbNode = new MemberValueArrayInitializer(n0, n2, n3, n8, n12);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public AnnotationTypeDeclaration AnnotationTypeDeclaration() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  AnnotationTypeBody n6 = null;
  AnnotationTypeDeclaration jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(147);
n0 = (NodeToken) n1;
    n3 = jj_consume_token(INTERFACE);
n2 = (NodeToken) n3;
    n5 = jj_consume_token(IDENTIFIER);
n4 = (NodeToken) n5;
    n6 = AnnotationTypeBody();
jtbNode = new AnnotationTypeDeclaration(n0, n2, n4, n6);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public AnnotationTypeBody AnnotationTypeBody() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  AnnotationTypeMemberDeclaration n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  AnnotationTypeBody jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(LBRACE);
n0 = (NodeToken) n1;
    label_62:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case 147:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[182] = jj_gen;
        break label_62;
      }
n3 = new NodeSequence(1);
      n4 = AnnotationTypeMemberDeclaration();
n3.addNode(n4);
n2.addNode(n3);
    }
n2.nodes.trimToSize();
    n6 = jj_consume_token(RBRACE);
n5 = (NodeToken) n6;
jtbNode = new AnnotationTypeBody(n0, n2, n5);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public AnnotationTypeMemberDeclaration AnnotationTypeMemberDeclaration() throws ParseException {// --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  Modifiers n2 = null;
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  Type n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeOptional n12 = new NodeOptional();
  NodeSequence n13 = null;
  DefaultValue n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeSequence n17 = null;
  ClassOrInterfaceDeclaration n18 = null;
  NodeSequence n19 = null;
  EnumDeclaration n20 = null;
  NodeSequence n21 = null;
  AnnotationTypeDeclaration n22 = null;
  NodeSequence n23 = null;
  FieldDeclaration n24 = null;
  NodeSequence n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  AnnotationTypeMemberDeclaration jtbNode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case ENUM:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case 147:
    case IDENTIFIER:{
n1 = new NodeSequence(2);
      n2 = Modifiers();
n1.addNode(n2);
      if (jj_2_47(2147483647)) {
n4 = new NodeSequence(6);
        n5 = Type();
n4.addNode(n5);
        n7 = jj_consume_token(IDENTIFIER);
n6 = (NodeToken) n7;
n4.addNode(n6);
        n9 = jj_consume_token(LPAREN);
n8 = (NodeToken) n9;
n4.addNode(n8);
        n11 = jj_consume_token(RPAREN);
n10 = (NodeToken) n11;
n4.addNode(n10);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case _DEFAULT:{
n13 = new NodeSequence(1);
          n14 = DefaultValue();
n13.addNode(n14);
n12.addNode(n13);
          break;
          }
        default:
          jj_la1[183] = jj_gen;
          ;
        }
n4.addNode(n12);
        n16 = jj_consume_token(SEMICOLON);
n15 = (NodeToken) n16;
n4.addNode(n15);
n3 = new NodeChoice(n4, 0, 5);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CLASS:
        case INTERFACE:{
n17 = new NodeSequence(1);
          n18 = ClassOrInterfaceDeclaration();
n17.addNode(n18);
n3 = new NodeChoice(n17, 1, 5);
          break;
          }
        case ENUM:{
n19 = new NodeSequence(1);
          n20 = EnumDeclaration();
n19.addNode(n20);
n3 = new NodeChoice(n19, 2, 5);
          break;
          }
        case 147:{
n21 = new NodeSequence(1);
          n22 = AnnotationTypeDeclaration();
n21.addNode(n22);
n3 = new NodeChoice(n21, 3, 5);
          break;
          }
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:{
n23 = new NodeSequence(1);
          n24 = FieldDeclaration();
n23.addNode(n24);
n3 = new NodeChoice(n23, 4, 5);
          break;
          }
        default:
          jj_la1[184] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
n1.addNode(n3);
n0 = new NodeChoice(n1, 0, 2);
      break;
      }
    case SEMICOLON:{
n25 = new NodeSequence(1);
      n27 = jj_consume_token(SEMICOLON);
n26 = (NodeToken) n27;
n25.addNode(n26);
n0 = new NodeChoice(n25, 1, 2);
      break;
      }
    default:
      jj_la1[185] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
jtbNode = new AnnotationTypeMemberDeclaration(n0);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  final public DefaultValue DefaultValue() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  MemberValue n2 = null;
  DefaultValue jtbNode = null;
    // --- user BNFProduction ExpansionChoices ---
      n1 = jj_consume_token(_DEFAULT);
n0 = (NodeToken) n1;
    n2 = MemberValue();
jtbNode = new DefaultValue(n0, n2);
{if ("" != null) return jtbNode;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_39()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_40()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_41()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_42()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_43()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_44()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_45()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_46()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_47()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_3R_EqualityExpression_5362_5_377()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_EqualityExpression_5365_9_389()) {
    jj_scanpos = xsp;
    if (jj_3R_EqualityExpression_5371_9_390()) return true;
    }
    if (jj_3R_InstanceOfExpression_5401_3_347()) return true;
    return false;
  }

  private boolean jj_3R_EqualityExpression_5360_3_333()
 {
    if (jj_3R_InstanceOfExpression_5401_3_347()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_EqualityExpression_5362_5_377()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_ThrowStatement_7653_3_304()
 {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_ReferenceType_4583_5_136()
 {
    if (jj_3R_ClassOrInterfaceType_4626_3_205()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_LabeledStatement_6884_3_107()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Statement_6748_3_247()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBody_3800_5_309()
 {
    if (jj_3R_ClassOrInterfaceBodyDeclaration_3855_3_332()) return true;
    return false;
  }

  private boolean jj_3R_ReferenceType_4565_5_135()
 {
    if (jj_3R_PrimitiveType_4823_3_100()) return true;
    Token xsp;
    if (jj_3_15()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_AndExpression_5329_5_367()
 {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_EqualityExpression_5360_3_333()) return true;
    return false;
  }

  private boolean jj_3R_ReferenceType_4564_3_91()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ReferenceType_4565_5_135()) {
    jj_scanpos = xsp;
    if (jj_3R_ReferenceType_4583_5_136()) return true;
    }
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBody_3794_3_280()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ClassOrInterfaceBody_3800_5_309()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_AndExpression_5327_3_312()
 {
    if (jj_3R_EqualityExpression_5360_3_333()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AndExpression_5329_5_367()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_MemberSelector_6094_3_105()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_TypeArguments_4677_3_92()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_AssertStatement_6858_5_317()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    return false;
  }

  private boolean jj_3R_ReturnStatement_7622_5_327()
 {
    if (jj_3R_Expression_5022_3_95()) return true;
    return false;
  }

  private boolean jj_3R_AssertStatement_6854_3_293()
 {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AssertStatement_6858_5_317()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_JavaIdentifier_3010_7_149()
 {
    if (jj_scan_token(_EOF)) return true;
    return false;
  }

  private boolean jj_3R_ReturnStatement_7611_3_303()
 {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ReturnStatement_7622_5_327()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_JavaIdentifier_3004_7_148()
 {
    if (jj_scan_token(_TOKEN_MGR_DECLS)) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_PrimarySuffix_6234_3_102()) return true;
    return false;
  }

  private boolean jj_3R_ExclusiveOrExpression_5301_5_350()
 {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_AndExpression_5327_3_312()) return true;
    return false;
  }

  private boolean jj_3R_JavaIdentifier_2998_7_147()
 {
    if (jj_scan_token(_SKIP)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_6069_3_63()
 {
    if (jj_3R_PrimaryPrefix_6139_3_114()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Type_4531_5_175()
 {
    if (jj_3R_PrimitiveType_4823_3_100()) return true;
    return false;
  }

  private boolean jj_3R_ExclusiveOrExpression_5299_3_282()
 {
    if (jj_3R_AndExpression_5327_3_312()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExclusiveOrExpression_5301_5_350()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_JavaIdentifier_2992_7_146()
 {
    if (jj_scan_token(_MORE)) return true;
    return false;
  }

  private boolean jj_3R_TypeBound_3761_5_292()
 {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_ClassOrInterfaceType_4626_3_205()) return true;
    return false;
  }

  private boolean jj_3R_Statement_6828_5_274()
 {
    if (jj_3R_TryStatement_7729_3_306()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_ReferenceType_4564_3_91()) return true;
    return false;
  }

  private boolean jj_3R_JavaIdentifier_2986_7_145()
 {
    if (jj_scan_token(_SPECIAL_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_TypeBound_3757_3_258()
 {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_ClassOrInterfaceType_4626_3_205()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_TypeBound_3761_5_292()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Type_4524_3_101()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_4531_5_175()) return true;
    }
    return false;
  }

  private boolean jj_3R_Statement_6823_5_273()
 {
    if (jj_3R_SynchronizedStatement_7691_3_305()) return true;
    return false;
  }

  private boolean jj_3R_Statement_6818_5_272()
 {
    if (jj_3R_ThrowStatement_7653_3_304()) return true;
    return false;
  }

  private boolean jj_3R_JavaIdentifier_2980_7_144()
 {
    if (jj_scan_token(_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_ContinueStatement_7583_5_326()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_Statement_6813_5_271()
 {
    if (jj_3R_ReturnStatement_7611_3_303()) return true;
    return false;
  }

  private boolean jj_3R_JavaIdentifier_2974_7_143()
 {
    if (jj_scan_token(_JAVACODE)) return true;
    return false;
  }

  private boolean jj_3R_ContinueStatement_7580_3_302()
 {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ContinueStatement_7583_5_326()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_CastExpression_6041_5_438()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Type_4524_3_101()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_UnaryExpressionNotPlusMinus_5786_3_421()) return true;
    return false;
  }

  private boolean jj_3R_Statement_6808_5_270()
 {
    if (jj_3R_ContinueStatement_7580_3_302()) return true;
    return false;
  }

  private boolean jj_3R_InclusiveOrExpression_5273_5_335()
 {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_ExclusiveOrExpression_5299_3_282()) return true;
    return false;
  }

  private boolean jj_3R_JavaIdentifier_2968_7_142()
 {
    if (jj_scan_token(_PARSER_END)) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PrimitiveType_4823_3_100()) return true;
    return false;
  }

  private boolean jj_3R_InclusiveOrExpression_5271_3_249()
 {
    if (jj_3R_ExclusiveOrExpression_5299_3_282()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_InclusiveOrExpression_5273_5_335()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Statement_6803_5_269()
 {
    if (jj_3R_BreakStatement_7550_3_301()) return true;
    return false;
  }

  private boolean jj_3R_Initializer_4501_5_128()
 {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_TypeParameter_3733_5_244()
 {
    if (jj_3R_TypeBound_3757_3_258()) return true;
    return false;
  }

  private boolean jj_3R_JavaIdentifier_2962_7_141()
 {
    if (jj_scan_token(_PARSER_BEGIN)) return true;
    return false;
  }

  private boolean jj_3R_Initializer_4500_3_85()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Initializer_4501_5_128()) jj_scanpos = xsp;
    if (jj_3R_Block_6913_3_129()) return true;
    return false;
  }

  private boolean jj_3R_Statement_6798_5_268()
 {
    if (jj_3R_ForStatement_7396_3_300()) return true;
    return false;
  }

  private boolean jj_3R_TypeParameter_3730_3_223()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TypeParameter_3733_5_244()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CastExpression_6026_5_437()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Type_4524_3_101()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_UnaryExpression_5690_3_400()) return true;
    return false;
  }

  private boolean jj_3R_JavaIdentifier_2956_7_140()
 {
    if (jj_scan_token(_IGNORE_CASE)) return true;
    return false;
  }

  private boolean jj_3R_Statement_6793_5_267()
 {
    if (jj_3R_DoStatement_7343_3_299()) return true;
    return false;
  }

  private boolean jj_3R_CastExpression_6025_3_435()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CastExpression_6026_5_437()) {
    jj_scanpos = xsp;
    if (jj_3R_CastExpression_6041_5_438()) return true;
    }
    return false;
  }

  private boolean jj_3R_Statement_6788_5_266()
 {
    if (jj_3R_WhileStatement_7312_3_298()) return true;
    return false;
  }

  private boolean jj_3R_JavaIdentifier_2950_7_139()
 {
    if (jj_scan_token(_LOOKAHEAD)) return true;
    return false;
  }

  private boolean jj_3R_BreakStatement_7553_5_325()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_Statement_6783_5_265()
 {
    if (jj_3R_IfStatement_7275_3_297()) return true;
    return false;
  }

  private boolean jj_3R_BreakStatement_7550_3_301()
 {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BreakStatement_7553_5_325()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_JavaIdentifier_2943_7_138()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_ConditionalAndExpression_5245_5_314()
 {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_InclusiveOrExpression_5271_3_249()) return true;
    return false;
  }

  private boolean jj_3R_Statement_6778_5_264()
 {
    if (jj_3R_SwitchStatement_7176_3_296()) return true;
    return false;
  }

  private boolean jj_3R_ConditionalAndExpression_5243_3_233()
 {
    if (jj_3R_InclusiveOrExpression_5271_3_249()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ConditionalAndExpression_5245_5_314()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_JavaIdentifier_2941_3_93()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_JavaIdentifier_2943_7_138()) {
    jj_scanpos = xsp;
    if (jj_3R_JavaIdentifier_2950_7_139()) {
    jj_scanpos = xsp;
    if (jj_3R_JavaIdentifier_2956_7_140()) {
    jj_scanpos = xsp;
    if (jj_3R_JavaIdentifier_2962_7_141()) {
    jj_scanpos = xsp;
    if (jj_3R_JavaIdentifier_2968_7_142()) {
    jj_scanpos = xsp;
    if (jj_3R_JavaIdentifier_2974_7_143()) {
    jj_scanpos = xsp;
    if (jj_3R_JavaIdentifier_2980_7_144()) {
    jj_scanpos = xsp;
    if (jj_3R_JavaIdentifier_2986_7_145()) {
    jj_scanpos = xsp;
    if (jj_3R_JavaIdentifier_2992_7_146()) {
    jj_scanpos = xsp;
    if (jj_3R_JavaIdentifier_2998_7_147()) {
    jj_scanpos = xsp;
    if (jj_3R_JavaIdentifier_3004_7_148()) {
    jj_scanpos = xsp;
    if (jj_3R_JavaIdentifier_3010_7_149()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_TypeParameters_3703_5_224()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_TypeParameter_3730_3_223()) return true;
    return false;
  }

  private boolean jj_3R_Statement_6770_5_263()
 {
    if (jj_3R_StatementExpression_7108_3_295()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_TypeParameters_3699_3_196()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_TypeParameter_3730_3_223()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_TypeParameters_3703_5_224()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_ExplicitConstructorInvocation_4462_7_132()
 {
    if (jj_3R_PrimaryExpression_6069_3_63()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_Arguments_6470_3_134()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_Statement_6765_5_262()
 {
    if (jj_3R_EmptyStatement_7073_3_294()) return true;
    return false;
  }

  private boolean jj_3R_ForUpdate_7530_3_358()
 {
    if (jj_3R_StatementExpressionList_7507_3_372()) return true;
    return false;
  }

  private boolean jj_3R_PostfixExpression_5991_7_441()
 {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_Statement_6760_5_261()
 {
    if (jj_3R_Block_6913_3_129()) return true;
    return false;
  }

  private boolean jj_3R_Statement_6755_5_260()
 {
    if (jj_3R_AssertStatement_6854_3_293()) return true;
    return false;
  }

  private boolean jj_3R_PostfixExpression_5985_7_440()
 {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_ExplicitConstructorInvocation_4447_11_90()
 {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_Arguments_6470_3_134()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_PostfixExpression_5984_5_439()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PostfixExpression_5985_7_440()) {
    jj_scanpos = xsp;
    if (jj_3R_PostfixExpression_5991_7_441()) return true;
    }
    return false;
  }

  private boolean jj_3R_ConditionalOrExpression_5217_5_285()
 {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_ConditionalAndExpression_5243_3_233()) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_LabeledStatement_6884_3_107()) return true;
    return false;
  }

  private boolean jj_3R_PostfixExpression_5982_3_436()
 {
    if (jj_3R_PrimaryExpression_6069_3_63()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PostfixExpression_5984_5_439()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ConditionalOrExpression_5215_3_208()
 {
    if (jj_3R_ConditionalAndExpression_5243_3_233()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ConditionalOrExpression_5217_5_285()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Statement_6748_3_247()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6755_5_260()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6760_5_261()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6765_5_262()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6770_5_263()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6778_5_264()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6783_5_265()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6788_5_266()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6793_5_267()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6798_5_268()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6803_5_269()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6808_5_270()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6813_5_271()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6818_5_272()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6823_5_273()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_6828_5_274()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_ExplicitConstructorInvocation_4436_11_89()
 {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_Arguments_6470_3_134()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_StatementExpressionList_7509_5_378()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_StatementExpression_7108_3_295()) return true;
    return false;
  }

  private boolean jj_3R_EnumConstant_3673_5_406()
 {
    if (jj_3R_ClassOrInterfaceBody_3794_3_280()) return true;
    return false;
  }

  private boolean jj_3R_StatementExpressionList_7507_3_372()
 {
    if (jj_3R_StatementExpression_7108_3_295()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_StatementExpressionList_7509_5_378()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_EnumConstant_3667_5_405()
 {
    if (jj_3R_Arguments_6470_3_134()) return true;
    return false;
  }

  private boolean jj_3R_EnumConstant_3663_3_82()
 {
    if (jj_3R_Modifiers_3197_3_120()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_EnumConstant_3667_5_405()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_EnumConstant_3673_5_406()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ExplicitConstructorInvocation_4418_11_133()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ReferenceType_4564_3_91()) return true;
    return false;
  }

  private boolean jj_3R_CastLookahead_5953_9_216()
 {
    if (jj_3R_Literal_6313_3_218()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_3R_VariableModifiers_7039_3_108()) return true;
    if (jj_3R_Type_4524_3_101()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_IdentifierAsString_2887_3_69()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_ConditionalExpression_5185_5_252()
 {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    return false;
  }

  private boolean jj_3R_ForInit_7485_5_371()
 {
    if (jj_3R_StatementExpressionList_7507_3_372()) return true;
    return false;
  }

  private boolean jj_3R_CastLookahead_5947_9_215()
 {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_ExplicitConstructorInvocation_4410_9_88()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_ReferenceType_4564_3_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExplicitConstructorInvocation_4418_11_133()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_ConditionalExpression_5183_3_162()
 {
    if (jj_3R_ConditionalOrExpression_5215_3_208()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ConditionalExpression_5185_5_252()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CastLookahead_5941_9_214()
 {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_ForInit_7477_5_370()
 {
    if (jj_3R_LocalVariableDeclaration_7007_3_246()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExplicitConstructorInvocation_4410_9_88()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExplicitConstructorInvocation_4436_11_89()) {
    jj_scanpos = xsp;
    if (jj_3R_ExplicitConstructorInvocation_4447_11_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_CastLookahead_5935_9_213()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_ForInit_7474_3_357()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ForInit_7477_5_370()) {
    jj_scanpos = xsp;
    if (jj_3R_ForInit_7485_5_371()) return true;
    }
    return false;
  }

  private boolean jj_3R_ExplicitConstructorInvocation_4404_3_87()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_ExplicitConstructorInvocation_4462_7_132()) return true;
    }
    return false;
  }

  private boolean jj_3R_EnumBody_3632_7_398()
 {
    if (jj_3R_ClassOrInterfaceBodyDeclaration_3855_3_332()) return true;
    return false;
  }

  private boolean jj_3R_CastLookahead_5929_9_212()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_EnumBody_3626_5_393()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_EnumBody_3632_7_398()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_CastLookahead_5923_9_211()
 {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_5157_5_161()
 {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_ArrayDimsAndInits_6687_7_315()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_CastLookahead_5917_9_210()
 {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_EnumBody_3619_5_392()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_5151_5_160()
 {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_ArrayDimsAndInits_6685_5_286()
 {
    Token xsp;
    if (jj_3R_ArrayDimsAndInits_6687_7_315()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ArrayDimsAndInits_6687_7_315()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_ArrayInitializer_4066_3_203()) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_7446_9_344()
 {
    if (jj_3R_ForUpdate_7530_3_358()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_CastLookahead_5911_9_209()
 {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_5145_5_159()
 {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_EnumConstant_3663_3_82()) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_7436_9_343()
 {
    if (jj_3R_Expression_5022_3_95()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_5139_5_158()
 {
    if (jj_scan_token(145)) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_EnumBody_3600_5_391()
 {
    if (jj_3R_EnumConstant_3663_3_82()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_AssignmentOperator_5133_5_157()
 {
    if (jj_scan_token(144)) return true;
    return false;
  }

  private boolean jj_3R_CastLookahead_5900_5_166()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Type_4524_3_101()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CastLookahead_5911_9_209()) {
    jj_scanpos = xsp;
    if (jj_3R_CastLookahead_5917_9_210()) {
    jj_scanpos = xsp;
    if (jj_3R_CastLookahead_5923_9_211()) {
    jj_scanpos = xsp;
    if (jj_3R_CastLookahead_5929_9_212()) {
    jj_scanpos = xsp;
    if (jj_3R_CastLookahead_5935_9_213()) {
    jj_scanpos = xsp;
    if (jj_3R_CastLookahead_5941_9_214()) {
    jj_scanpos = xsp;
    if (jj_3R_CastLookahead_5947_9_215()) {
    jj_scanpos = xsp;
    if (jj_3R_CastLookahead_5953_9_216()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_CharacterDescriptor_2833_3_316()
 {
    if (jj_3R_StringLiteral_6425_3_115()) return true;
    return false;
  }

  private boolean jj_3R_EnumBody_3597_3_380()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_EnumBody_3600_5_391()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_EnumBody_3619_5_392()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_EnumBody_3626_5_393()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_7426_9_342()
 {
    if (jj_3R_ForInit_7474_3_357()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_5127_5_156()
 {
    if (jj_scan_token(143)) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Type_4524_3_101()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_7424_7_324()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_7426_9_342()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_7436_9_343()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_7446_9_344()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_5121_5_155()
 {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    Token xsp;
    if (jj_3_36()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_ExplicitConstructorInvocation_4404_3_87()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_3R_VariableModifiers_7039_3_108()) return true;
    if (jj_3R_Type_4524_3_101()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_CastLookahead_5883_5_165()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Type_4524_3_101()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_ArrayDimsAndInits_6652_3_253()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3R_ArrayDimsAndInits_6685_5_286()) return true;
    }
    return false;
  }

  private boolean jj_3R_DefaultValue_8185_3_432()
 {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_3R_MemberValue_7951_3_113()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_5115_5_154()
 {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_ConstructorDeclaration_4347_5_125()
 {
    if (jj_3R_BlockStatement_6962_3_199()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_5109_5_153()
 {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_PrimaryExpression_6069_3_63()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_ConstructorDeclaration_4340_5_124()
 {
    if (jj_3R_ExplicitConstructorInvocation_4404_3_87()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PrimitiveType_4823_3_100()) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_7405_7_323()
 {
    if (jj_3R_VariableModifiers_7039_3_108()) return true;
    if (jj_3R_Type_4524_3_101()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    return false;
  }

  private boolean jj_3R_CastLookahead_5873_3_99()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_CastLookahead_5883_5_165()) {
    jj_scanpos = xsp;
    if (jj_3R_CastLookahead_5900_5_166()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_AssignmentOperator_5103_5_152()
 {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_8165_5_408()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_5097_5_151()
 {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_ConstructorDeclaration_4329_5_123()
 {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_NameList_4984_3_198()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_2016_16_64()) {
    jj_scanpos = xsp;
    if (jj_3R_null_2018_5_65()) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_3R_null_2022_5_66()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_null_2016_16_64()
 {
    if (jj_3R_IdentifierAsString_2887_3_69()) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_7396_3_300()
 {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_7405_7_323()) {
    jj_scanpos = xsp;
    if (jj_3R_ForStatement_7424_7_324()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_6748_3_247()) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_8156_9_418()
 {
    if (jj_3R_FieldDeclaration_3939_3_84()) return true;
    return false;
  }

  private boolean jj_3R_EnumDeclaration_3557_5_379()
 {
    if (jj_3R_ImplementsList_3516_3_308()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_5091_5_150()
 {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_null_2022_5_66()
 {
    if (jj_3R_PrimaryExpression_6069_3_63()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_5090_3_94()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AssignmentOperator_5091_5_150()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_5097_5_151()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_5103_5_152()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_5109_5_153()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_5115_5_154()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_5121_5_155()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_5127_5_156()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_5133_5_157()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_5139_5_158()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_5145_5_159()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_5151_5_160()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_5157_5_161()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_8151_9_417()
 {
    if (jj_3R_AnnotationTypeDeclaration_8033_3_374()) return true;
    return false;
  }

  private boolean jj_3R_ConstructorDeclaration_4320_5_121()
 {
    if (jj_3R_TypeParameters_3699_3_196()) return true;
    return false;
  }

  private boolean jj_3R_null_2018_5_65()
 {
    if (jj_3R_StringLiteral_6425_3_115()) return true;
    return false;
  }

  private boolean jj_3R_EnumDeclaration_3552_3_373()
 {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_EnumDeclaration_3557_5_379()) jj_scanpos = xsp;
    if (jj_3R_EnumBody_3597_3_380()) return true;
    return false;
  }

  private boolean jj_3R_ConstructorDeclaration_4319_3_83()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ConstructorDeclaration_4320_5_121()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_FormalParameters_4218_3_122()) return true;
    xsp = jj_scanpos;
    if (jj_3R_ConstructorDeclaration_4329_5_123()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_ConstructorDeclaration_4340_5_124()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ConstructorDeclaration_4347_5_125()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_8146_9_416()
 {
    if (jj_3R_EnumDeclaration_3552_3_373()) return true;
    return false;
  }

  private boolean jj_3R_CharacterList_2781_5_291()
 {
    if (jj_3R_CharacterDescriptor_2833_3_316()) return true;
    return false;
  }

  private boolean jj_3R_AllocationExpression_6606_11_288()
 {
    if (jj_3R_ClassOrInterfaceBody_3794_3_280()) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_8141_9_415()
 {
    if (jj_3R_ClassOrInterfaceDeclaration_3405_3_248()) return true;
    return false;
  }

  private boolean jj_3R_AllocationExpression_6602_9_256()
 {
    if (jj_3R_Arguments_6470_3_134()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AllocationExpression_6606_11_288()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CharacterList_2769_5_290()
 {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_8130_11_425()
 {
    if (jj_3R_DefaultValue_8185_3_432()) return true;
    return false;
  }

  private boolean jj_3R_CharacterList_2768_3_257()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CharacterList_2769_5_290()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACKET)) return true;
    xsp = jj_scanpos;
    if (jj_3R_CharacterList_2781_5_291()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_AllocationExpression_6597_9_255()
 {
    if (jj_3R_ArrayDimsAndInits_6652_3_253()) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_3R_Type_4524_3_101()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_AllocationExpression_6587_9_287()
 {
    if (jj_3R_TypeArguments_4677_3_92()) return true;
    return false;
  }

  private boolean jj_3R_ImplementsList_3520_5_331()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ClassOrInterfaceType_4626_3_205()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_CastLookahead_5873_3_99()) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_3R_EmptyTypeArguments_4707_3_106()) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_8114_9_414()
 {
    if (jj_3R_Type_4524_3_101()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AnnotationTypeMemberDeclaration_8130_11_425()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_ImplementsList_3516_3_308()
 {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_ClassOrInterfaceType_4626_3_205()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ImplementsList_3520_5_331()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_AllocationExpression_6580_7_254()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_AllocationExpression_6587_9_287()) return true;
    }
    return false;
  }

  private boolean jj_3R_UnaryExpressionNotPlusMinus_5814_5_428()
 {
    if (jj_3R_PostfixExpression_5982_3_436()) return true;
    return false;
  }

  private boolean jj_3R_FormalParameter_4279_5_245()
 {
    if (jj_scan_token(142)) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpressionNotPlusMinus_5808_5_427()
 {
    if (jj_3R_CastExpression_6025_3_435()) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_8109_5_407()
 {
    if (jj_3R_Modifiers_3197_3_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AnnotationTypeMemberDeclaration_8114_9_414()) {
    jj_scanpos = xsp;
    if (jj_3R_AnnotationTypeMemberDeclaration_8141_9_415()) {
    jj_scanpos = xsp;
    if (jj_3R_AnnotationTypeMemberDeclaration_8146_9_416()) {
    jj_scanpos = xsp;
    if (jj_3R_AnnotationTypeMemberDeclaration_8151_9_417()) {
    jj_scanpos = xsp;
    if (jj_3R_AnnotationTypeMemberDeclaration_8156_9_418()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_FormalParameter_4276_3_225()
 {
    if (jj_3R_Modifiers_3197_3_120()) return true;
    if (jj_3R_Type_4524_3_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FormalParameter_4279_5_245()) jj_scanpos = xsp;
    if (jj_3R_VariableDeclaratorId_3999_3_200()) return true;
    return false;
  }

  private boolean jj_3R_DoStatement_7343_3_299()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_Statement_6748_3_247()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_AllocationExpression_6573_5_181()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_ClassOrInterfaceType_4626_3_205()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AllocationExpression_6580_7_254()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_AllocationExpression_6597_9_255()) {
    jj_scanpos = xsp;
    if (jj_3R_AllocationExpression_6602_9_256()) return true;
    }
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_8108_3_399()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AnnotationTypeMemberDeclaration_8109_5_407()) {
    jj_scanpos = xsp;
    if (jj_3R_AnnotationTypeMemberDeclaration_8165_5_408()) return true;
    }
    return false;
  }

  private boolean jj_3R_UnaryExpressionNotPlusMinus_5796_9_434()
 {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_PrimitiveType_4823_3_100()) return true;
    if (jj_3R_ArrayDimsAndInits_6652_3_253()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpressionNotPlusMinus_5790_9_433()
 {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_AllocationExpression_6561_3_104()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3R_AllocationExpression_6573_5_181()) return true;
    }
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_AssignmentOperator_5090_3_94()) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpressionNotPlusMinus_5787_5_426()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UnaryExpressionNotPlusMinus_5790_9_433()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpressionNotPlusMinus_5796_9_434()) return true;
    }
    if (jj_3R_UnaryExpression_5690_3_400()) return true;
    return false;
  }

  private boolean jj_3R_Expression_5022_3_95()
 {
    if (jj_3R_ConditionalExpression_5183_3_162()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_UnaryExpressionNotPlusMinus_5786_3_421()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UnaryExpressionNotPlusMinus_5787_5_426()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpressionNotPlusMinus_5808_5_427()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpressionNotPlusMinus_5814_5_428()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_ExtendsList_3481_5_330()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ClassOrInterfaceType_4626_3_205()) return true;
    return false;
  }

  private boolean jj_3R_ExtendsList_3477_3_307()
 {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_ClassOrInterfaceType_4626_3_205()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExtendsList_3481_5_330()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_WhileStatement_7312_3_298()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_6748_3_247()) return true;
    return false;
  }

  private boolean jj_3R_FormalParameters_4229_7_226()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_FormalParameter_4276_3_225()) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeBody_8061_5_394()
 {
    if (jj_3R_AnnotationTypeMemberDeclaration_8108_3_399()) return true;
    return false;
  }

  private boolean jj_3R_FormalParameters_4224_5_197()
 {
    if (jj_3R_FormalParameter_4276_3_225()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_FormalParameters_4229_7_226()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_PreDecrementExpression_5758_3_338()
 {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_PrimaryExpression_6069_3_63()) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeBody_8058_3_381()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AnnotationTypeBody_8061_5_394()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_NameList_4986_5_227()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Name_4943_3_111()) return true;
    return false;
  }

  private boolean jj_3R_IfStatement_7284_5_322()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_Statement_6748_3_247()) return true;
    return false;
  }

  private boolean jj_3R_FormalParameters_4218_3_122()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FormalParameters_4224_5_197()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_ArgumentList_6517_5_281()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    return false;
  }

  private boolean jj_3R_NameList_4984_3_198()
 {
    if (jj_3R_Name_4943_3_111()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_NameList_4986_5_227()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ArgumentList_6515_3_232()
 {
    if (jj_3R_Expression_5022_3_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ArgumentList_6517_5_281()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceDeclaration_3439_5_279()
 {
    if (jj_3R_ImplementsList_3516_3_308()) return true;
    return false;
  }

  private boolean jj_3R_PreIncrementExpression_5741_3_337()
 {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_PrimaryExpression_6069_3_63()) return true;
    return false;
  }

  private boolean jj_3R_IfStatement_7275_3_297()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_6748_3_247()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IfStatement_7284_5_322()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceDeclaration_3433_5_278()
 {
    if (jj_3R_ExtendsList_3477_3_307()) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeDeclaration_8033_3_374()
 {
    if (jj_scan_token(147)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_AnnotationTypeBody_8058_3_381()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceDeclaration_3427_5_277()
 {
    if (jj_3R_TypeParameters_3699_3_196()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_5722_5_412()
 {
    if (jj_3R_UnaryExpressionNotPlusMinus_5786_3_421()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_5717_5_411()
 {
    if (jj_3R_PreDecrementExpression_5758_3_338()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceDeclaration_3413_7_276()
 {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclarator_4179_5_395()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_5712_5_410()
 {
    if (jj_3R_PreIncrementExpression_5741_3_337()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_JavaIdentifier_2941_3_93()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceDeclaration_3407_7_275()
 {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_ComplexRegularExpressionUnit_2641_5_243()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_ComplexRegularExpressionChoices_2478_3_68()) return true;
    return false;
  }

  private boolean jj_3R_Arguments_6476_5_204()
 {
    if (jj_3R_ArgumentList_6515_3_232()) return true;
    return false;
  }

  private boolean jj_3R_Name_4943_3_111()
 {
    if (jj_3R_JavaIdentifier_2941_3_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_MethodDeclarator_4175_3_383()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_FormalParameters_4218_3_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MethodDeclarator_4179_5_395()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_MemberValueArrayInitializer_8007_5_366()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_5700_9_420()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_SwitchLabel_7238_5_356()
 {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_ComplexRegularExpressionUnit_2636_5_242()
 {
    if (jj_3R_CharacterList_2768_3_257()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceDeclaration_3405_3_248()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ClassOrInterfaceDeclaration_3407_7_275()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceDeclaration_3413_7_276()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_ClassOrInterfaceDeclaration_3427_5_277()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ClassOrInterfaceDeclaration_3433_5_278()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ClassOrInterfaceDeclaration_3439_5_279()) jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBody_3794_3_280()) return true;
    return false;
  }

  private boolean jj_3R_Arguments_6470_3_134()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Arguments_6476_5_204()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_5694_9_419()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_MemberValue_7951_3_113()) return true;
    return false;
  }

  private boolean jj_3R_SwitchLabel_7227_5_355()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_5691_5_409()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UnaryExpression_5694_9_419()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_5700_9_420()) return true;
    }
    if (jj_3R_UnaryExpression_5690_3_400()) return true;
    return false;
  }

  private boolean jj_3R_SwitchLabel_7226_3_340()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SwitchLabel_7227_5_355()) {
    jj_scanpos = xsp;
    if (jj_3R_SwitchLabel_7238_5_356()) return true;
    }
    return false;
  }

  private boolean jj_3R_MemberValueArrayInitializer_7992_3_217()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_MemberValue_7951_3_113()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_46()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_MemberValueArrayInitializer_8007_5_366()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_5690_3_400()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UnaryExpression_5691_5_409()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_5712_5_410()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_5717_5_411()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_5722_5_412()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_ComplexRegularExpressionUnit_2619_5_241()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_IdentifierAsString_2887_3_69()) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_4148_7_386()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_4143_7_385()
 {
    if (jj_3R_Block_6913_3_129()) return true;
    return false;
  }

  private boolean jj_3R_ComplexRegularExpressionUnit_2608_5_240()
 {
    if (jj_3R_StringLiteral_6425_3_115()) return true;
    return false;
  }

  private boolean jj_3R_NullLiteral_6444_3_251()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_ComplexRegularExpressionUnit_2607_3_219()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ComplexRegularExpressionUnit_2608_5_240()) {
    jj_scanpos = xsp;
    if (jj_3R_ComplexRegularExpressionUnit_2619_5_241()) {
    jj_scanpos = xsp;
    if (jj_3R_ComplexRegularExpressionUnit_2636_5_242()) {
    jj_scanpos = xsp;
    if (jj_3R_ComplexRegularExpressionUnit_2641_5_243()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_ResultType_4901_7_180()
 {
    if (jj_3R_Type_4524_3_101()) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_4133_5_384()
 {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_NameList_4984_3_198()) return true;
    return false;
  }

  private boolean jj_3R_ResultType_4895_7_179()
 {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_MemberValue_7962_5_184()
 {
    if (jj_3R_ConditionalExpression_5183_3_162()) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_4125_5_382()
 {
    if (jj_3R_TypeParameters_3699_3_196()) return true;
    return false;
  }

  private boolean jj_3R_SwitchStatement_7191_7_341()
 {
    if (jj_3R_BlockStatement_6962_3_199()) return true;
    return false;
  }

  private boolean jj_3R_ResultType_4893_3_103()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ResultType_4895_7_179()) {
    jj_scanpos = xsp;
    if (jj_3R_ResultType_4901_7_180()) return true;
    }
    return false;
  }

  private boolean jj_3R_MethodDeclaration_4124_3_375()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MethodDeclaration_4125_5_382()) jj_scanpos = xsp;
    if (jj_3R_ResultType_4893_3_103()) return true;
    if (jj_3R_MethodDeclarator_4175_3_383()) return true;
    xsp = jj_scanpos;
    if (jj_3R_MethodDeclaration_4133_5_384()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_MethodDeclaration_4143_7_385()) {
    jj_scanpos = xsp;
    if (jj_3R_MethodDeclaration_4148_7_386()) return true;
    }
    return false;
  }

  private boolean jj_3R_StringLiteral_6425_3_115()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_MemberValue_7957_5_183()
 {
    if (jj_3R_MemberValueArrayInitializer_7992_3_217()) return true;
    return false;
  }

  private boolean jj_3R_MultiplicativeExpression_5650_9_431()
 {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3R_SwitchStatement_7186_5_321()
 {
    if (jj_3R_SwitchLabel_7226_3_340()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SwitchStatement_7191_7_341()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_MemberValue_7952_5_182()
 {
    if (jj_3R_Annotation_7777_3_119()) return true;
    return false;
  }

  private boolean jj_3R_MultiplicativeExpression_5644_9_430()
 {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_MemberValue_7951_3_113()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MemberValue_7952_5_182()) {
    jj_scanpos = xsp;
    if (jj_3R_MemberValue_7957_5_183()) {
    jj_scanpos = xsp;
    if (jj_3R_MemberValue_7962_5_184()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_MultiplicativeExpression_5638_9_429()
 {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_SwitchStatement_7176_3_296()
 {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SwitchStatement_7186_5_321()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_MultiplicativeExpression_5635_5_422()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MultiplicativeExpression_5638_9_429()) {
    jj_scanpos = xsp;
    if (jj_3R_MultiplicativeExpression_5644_9_430()) {
    jj_scanpos = xsp;
    if (jj_3R_MultiplicativeExpression_5650_9_431()) return true;
    }
    }
    if (jj_3R_UnaryExpression_5690_3_400()) return true;
    return false;
  }

  private boolean jj_3R_PrimitiveType_4866_5_174()
 {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_BooleanLiteral_6400_5_284()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_MultiplicativeExpression_5633_3_396()
 {
    if (jj_3R_UnaryExpression_5690_3_400()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MultiplicativeExpression_5635_5_422()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_PrimitiveType_4860_5_173()
 {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_MemberValuePair_7928_3_348()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_MemberValue_7951_3_113()) return true;
    return false;
  }

  private boolean jj_3R_BooleanLiteral_6391_5_283()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_ArrayInitializer_4088_5_311()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_PrimitiveType_4854_5_172()
 {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_BooleanLiteral_6390_3_250()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BooleanLiteral_6391_5_283()) {
    jj_scanpos = xsp;
    if (jj_3R_BooleanLiteral_6400_5_284()) return true;
    }
    return false;
  }

  private boolean jj_3R_PrimitiveType_4848_5_171()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_VariableInitializer_4028_3_86()) return true;
    return false;
  }

  private boolean jj_3R_PrimitiveType_4842_5_170()
 {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_StatementExpression_7136_9_354()
 {
    if (jj_3R_AssignmentOperator_5090_3_94()) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_3301_9_81()
 {
    if (jj_3R_Annotation_7777_3_119()) return true;
    return false;
  }

  private boolean jj_3R_ArrayInitializer_4069_5_310()
 {
    if (jj_3R_VariableInitializer_4028_3_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_PrimitiveType_4836_5_169()
 {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_MemberValuePairs_7903_5_349()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_MemberValuePair_7928_3_348()) return true;
    return false;
  }

  private boolean jj_3R_StatementExpression_7130_9_353()
 {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_AdditiveExpression_5595_9_424()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_MemberValuePairs_7901_3_334()
 {
    if (jj_3R_MemberValuePair_7928_3_348()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MemberValuePairs_7903_5_349()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ArrayInitializer_4066_3_203()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArrayInitializer_4069_5_310()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArrayInitializer_4088_5_311()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_3292_9_80()
 {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  private boolean jj_3R_PrimitiveType_4830_5_168()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_StatementExpression_7124_9_352()
 {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_AdditiveExpression_5589_9_423()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_ComplexRegularExpression_2524_5_192()
 {
    if (jj_3R_ComplexRegularExpressionUnit_2607_3_219()) return true;
    return false;
  }

  private boolean jj_3R_StatementExpression_7123_7_339()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_StatementExpression_7124_9_352()) {
    jj_scanpos = xsp;
    if (jj_3R_StatementExpression_7130_9_353()) {
    jj_scanpos = xsp;
    if (jj_3R_StatementExpression_7136_9_354()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_PrimitiveType_4824_5_167()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_ComplexRegularExpression_2523_3_117()
 {
    Token xsp;
    if (jj_3R_ComplexRegularExpression_2524_5_192()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ComplexRegularExpression_2524_5_192()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Modifiers_3283_9_79()
 {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_PrimitiveType_4823_3_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PrimitiveType_4824_5_167()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimitiveType_4830_5_168()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimitiveType_4836_5_169()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimitiveType_4842_5_170()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimitiveType_4848_5_171()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimitiveType_4854_5_172()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimitiveType_4860_5_173()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimitiveType_4866_5_174()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_AdditiveExpression_5586_5_413()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AdditiveExpression_5589_9_423()) {
    jj_scanpos = xsp;
    if (jj_3R_AdditiveExpression_5595_9_424()) return true;
    }
    if (jj_3R_MultiplicativeExpression_5633_3_396()) return true;
    return false;
  }

  private boolean jj_3R_StatementExpression_7119_5_320()
 {
    if (jj_3R_PrimaryExpression_6069_3_63()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_StatementExpression_7123_7_339()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_AdditiveExpression_5584_3_387()
 {
    if (jj_3R_MultiplicativeExpression_5633_3_396()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AdditiveExpression_5586_5_413()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_StatementExpression_7114_5_319()
 {
    if (jj_3R_PreDecrementExpression_5758_3_338()) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_3274_9_78()
 {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_Literal_6344_5_239()
 {
    if (jj_3R_NullLiteral_6444_3_251()) return true;
    return false;
  }

  private boolean jj_3R_StatementExpression_7109_5_318()
 {
    if (jj_3R_PreIncrementExpression_5741_3_337()) return true;
    return false;
  }

  private boolean jj_3R_SingleMemberAnnotation_7876_3_221()
 {
    if (jj_scan_token(147)) return true;
    if (jj_3R_Name_4943_3_111()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_MemberValue_7951_3_113()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_Literal_6339_5_238()
 {
    if (jj_3R_BooleanLiteral_6390_3_250()) return true;
    return false;
  }

  private boolean jj_3R_StatementExpression_7108_3_295()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_StatementExpression_7109_5_318()) {
    jj_scanpos = xsp;
    if (jj_3R_StatementExpression_7114_5_319()) {
    jj_scanpos = xsp;
    if (jj_3R_StatementExpression_7119_5_320()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_Modifiers_3265_9_77()
 {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_VariableInitializer_4034_5_131()
 {
    if (jj_3R_Expression_5022_3_95()) return true;
    return false;
  }

  private boolean jj_3R_RUnsignedShift_5558_14_163()
 {
    return false;
  }

  private boolean jj_3R_Literal_6332_5_237()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_VariableInitializer_4029_5_130()
 {
    if (jj_3R_ArrayInitializer_4066_3_203()) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_3256_9_76()
 {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_VariableInitializer_4028_3_86()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_VariableInitializer_4029_5_130()) {
    jj_scanpos = xsp;
    if (jj_3R_VariableInitializer_4034_5_131()) return true;
    }
    return false;
  }

  private boolean jj_3R_Literal_6326_5_236()
 {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_RUnsignedShift_5558_3_97()
 {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_RUnsignedShift_5558_14_163()) return true;
    if (jj_scan_token(RUNSIGNEDSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_Literal_6320_5_235()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_3247_9_75()
 {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_MarkerAnnotation_7854_3_222()
 {
    if (jj_scan_token(147)) return true;
    if (jj_3R_Name_4943_3_111()) return true;
    return false;
  }

  private boolean jj_3R_RSignedShift_5541_14_164()
 {
    return false;
  }

  private boolean jj_3R_ComplexRegularExpressionChoices_2480_5_118()
 {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  private boolean jj_3R_Literal_6314_5_234()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_WildcardBounds_4779_5_369()
 {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_ReferenceType_4564_3_91()) return true;
    return false;
  }

  private boolean jj_3R_ComplexRegularExpressionChoices_2478_3_68()
 {
    if (jj_3R_ComplexRegularExpression_2523_3_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ComplexRegularExpressionChoices_2480_5_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Literal_6313_3_218()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Literal_6314_5_234()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_6320_5_235()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_6326_5_236()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_6332_5_237()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_6339_5_238()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_6344_5_239()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Modifiers_3238_9_74()
 {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_RSignedShift_5541_3_98()
 {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_RSignedShift_5541_14_164()) return true;
    if (jj_scan_token(RSIGNEDSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_WildcardBounds_4771_5_368()
 {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_ReferenceType_4564_3_91()) return true;
    return false;
  }

  private boolean jj_3R_EmptyStatement_7073_3_294()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_VariableDeclaratorId_4002_5_231()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_WildcardBounds_4770_3_351()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_WildcardBounds_4771_5_368()) {
    jj_scanpos = xsp;
    if (jj_3R_WildcardBounds_4779_5_369()) return true;
    }
    return false;
  }

  private boolean jj_3R_Modifiers_3229_9_73()
 {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_NormalAnnotation_7833_5_313()
 {
    if (jj_3R_MemberValuePairs_7901_3_334()) return true;
    return false;
  }

  private boolean jj_3R_VariableDeclaratorId_3999_3_200()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_VariableDeclaratorId_4002_5_231()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Modifiers_3220_9_72()
 {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_NormalAnnotation_7827_3_220()
 {
    if (jj_scan_token(147)) return true;
    if (jj_3R_Name_4943_3_111()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NormalAnnotation_7833_5_313()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_RSignedShift_5541_3_98()) return true;
    return false;
  }

  private boolean jj_3R_VariableModifiers_7050_9_110()
 {
    if (jj_3R_Annotation_7777_3_119()) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_3211_9_71()
 {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_RUnsignedShift_5558_3_97()) return true;
    return false;
  }

  private boolean jj_3R_VariableModifiers_7044_9_109()
 {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_PrimarySuffix_6280_5_178()
 {
    if (jj_3R_Arguments_6470_3_134()) return true;
    return false;
  }

  private boolean jj_3R_TypeArgument_4742_7_336()
 {
    if (jj_3R_WildcardBounds_4770_3_351()) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_3202_9_70()
 {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_ShiftExpression_5503_9_96()
 {
    if (jj_scan_token(146)) return true;
    return false;
  }

  private boolean jj_3R_VariableDeclarator_3972_5_201()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_VariableInitializer_4028_3_86()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_VariableModifiers_7044_9_109()) {
    jj_scanpos = xsp;
    if (jj_3R_VariableModifiers_7050_9_110()) return true;
    }
    return false;
  }

  private boolean jj_3R_TypeArgument_4737_5_207()
 {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TypeArgument_4742_7_336()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_PrimarySuffix_6271_5_177()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_VariableModifiers_7039_3_108()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_scan_token(147)) return true;
    if (jj_3R_Name_4943_3_111()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_VariableDeclarator_3970_3_126()
 {
    if (jj_3R_VariableDeclaratorId_3999_3_200()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_VariableDeclarator_3972_5_201()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ShiftExpression_5503_9_96()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    }
    if (jj_3R_AdditiveExpression_5584_3_387()) return true;
    return false;
  }

  private boolean jj_3R_Annotation_7801_5_195()
 {
    if (jj_3R_MarkerAnnotation_7854_3_222()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Modifiers_3202_9_70()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_3211_9_71()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_3220_9_72()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_3229_9_73()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_3238_9_74()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_3247_9_75()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_3256_9_76()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_3265_9_77()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_3274_9_78()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_3283_9_79()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_3292_9_80()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_3301_9_81()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_TypeArgument_4732_5_206()
 {
    if (jj_3R_ReferenceType_4564_3_91()) return true;
    return false;
  }

  private boolean jj_3R_ShiftExpression_5498_3_376()
 {
    if (jj_3R_AdditiveExpression_5584_3_387()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Modifiers_3197_3_120()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_TypeArgument_4731_3_137()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TypeArgument_4732_5_206()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeArgument_4737_5_207()) return true;
    }
    return false;
  }

  private boolean jj_3R_PrimarySuffix_6260_5_176()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_Annotation_7793_5_194()
 {
    if (jj_3R_SingleMemberAnnotation_7876_3_221()) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_scan_token(147)) return true;
    if (jj_3R_Name_4943_3_111()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_7783_7_112()) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_IdentifierAsString_2887_3_69()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_MemberSelector_6094_3_105()) return true;
    return false;
  }

  private boolean jj_3R_null_7783_7_112()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_AllocationExpression_6561_3_104()) return true;
    return false;
  }

  private boolean jj_3R_Annotation_7779_5_193()
 {
    if (jj_3R_NormalAnnotation_7827_3_220()) return true;
    return false;
  }

  private boolean jj_3R_LocalVariableDeclaration_7011_5_259()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_VariableDeclarator_3970_3_126()) return true;
    return false;
  }

  private boolean jj_3R_FieldDeclaration_3942_5_127()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_VariableDeclarator_3970_3_126()) return true;
    return false;
  }

  private boolean jj_3R_Annotation_7777_3_119()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Annotation_7779_5_193()) {
    jj_scanpos = xsp;
    if (jj_3R_Annotation_7793_5_194()) {
    jj_scanpos = xsp;
    if (jj_3R_Annotation_7801_5_195()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_EmptyTypeArguments_4707_3_106()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_FieldDeclaration_3939_3_84()
 {
    if (jj_3R_Type_4524_3_101()) return true;
    if (jj_3R_VariableDeclarator_3970_3_126()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_FieldDeclaration_3942_5_127()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_LocalVariableDeclaration_7007_3_246()
 {
    if (jj_3R_VariableModifiers_7039_3_108()) return true;
    if (jj_3R_Type_4524_3_101()) return true;
    if (jj_3R_VariableDeclarator_3970_3_126()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_LocalVariableDeclaration_7011_5_259()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_RelationalExpression_5462_9_404()
 {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_PrimarySuffix_6234_3_102()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimarySuffix_6260_5_176()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimarySuffix_6271_5_177()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimarySuffix_6280_5_178()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_RelationalExpression_5456_9_403()
 {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_RelationalExpression_5450_9_402()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_TryStatement_7751_5_329()
 {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_Block_6913_3_129()) return true;
    return false;
  }

  private boolean jj_3R_RelationalExpression_5444_9_401()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_RegularExpression_2376_9_116()
 {
    if (jj_scan_token(141)) return true;
    return false;
  }

  private boolean jj_3R_TypeArguments_4681_5_289()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_TypeArgument_4731_3_137()) return true;
    return false;
  }

  private boolean jj_3R_BlockStatement_6981_5_230()
 {
    if (jj_3R_ClassOrInterfaceDeclaration_3405_3_248()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_3912_5_346()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_FieldDeclaration_3939_3_84()) return true;
    return false;
  }

  private boolean jj_3R_RegularExpression_2373_7_67()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RegularExpression_2376_9_116()) jj_scanpos = xsp;
    if (jj_3R_IdentifierAsString_2887_3_69()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_TypeArguments_4677_3_92()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_TypeArgument_4731_3_137()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_TypeArguments_4681_5_289()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_VariableModifiers_7039_3_108()) return true;
    if (jj_3R_Type_4524_3_101()) return true;
    if (jj_3R_JavaIdentifier_2941_3_93()) return true;
    return false;
  }

  private boolean jj_3R_BlockStatement_6976_5_229()
 {
    if (jj_3R_Statement_6748_3_247()) return true;
    return false;
  }

  private boolean jj_3R_RelationalExpression_5441_5_397()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RelationalExpression_5444_9_401()) {
    jj_scanpos = xsp;
    if (jj_3R_RelationalExpression_5450_9_402()) {
    jj_scanpos = xsp;
    if (jj_3R_RelationalExpression_5456_9_403()) {
    jj_scanpos = xsp;
    if (jj_3R_RelationalExpression_5462_9_404()) return true;
    }
    }
    }
    if (jj_3R_ShiftExpression_5498_3_376()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_3903_9_364()
 {
    if (jj_3R_MethodDeclaration_4124_3_375()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_ConstructorDeclaration_4319_3_83()) return true;
    return false;
  }

  private boolean jj_3R_RelationalExpression_5439_3_365()
 {
    if (jj_3R_ShiftExpression_5498_3_376()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_RelationalExpression_5441_5_397()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_3897_9_363()
 {
    if (jj_3R_FieldDeclaration_3939_3_84()) return true;
    return false;
  }

  private boolean jj_3R_TryStatement_7733_5_328()
 {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_FormalParameter_4276_3_225()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Block_6913_3_129()) return true;
    return false;
  }

  private boolean jj_3R_BlockStatement_6965_5_228()
 {
    if (jj_3R_LocalVariableDeclaration_7007_3_246()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RegularExpression_2373_7_67()) jj_scanpos = xsp;
    if (jj_3R_ComplexRegularExpressionChoices_2478_3_68()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_3890_9_362()
 {
    if (jj_3R_ConstructorDeclaration_4319_3_83()) return true;
    return false;
  }

  private boolean jj_3R_TryStatement_7729_3_306()
 {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_Block_6913_3_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_TryStatement_7733_5_328()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_TryStatement_7751_5_329()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_6193_5_191()
 {
    if (jj_3R_Name_4943_3_111()) return true;
    return false;
  }

  private boolean jj_3R_BlockStatement_6962_3_199()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BlockStatement_6965_5_228()) {
    jj_scanpos = xsp;
    if (jj_3R_BlockStatement_6976_5_229()) {
    jj_scanpos = xsp;
    if (jj_3R_BlockStatement_6981_5_230()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_ResultType_4893_3_103()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_3884_9_361()
 {
    if (jj_3R_AnnotationTypeDeclaration_8033_3_374()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_3878_9_360()
 {
    if (jj_3R_EnumDeclaration_3552_3_373()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_TypeArguments_4677_3_92()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_6179_5_190()
 {
    if (jj_3R_ResultType_4893_3_103()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_3873_9_359()
 {
    if (jj_3R_ClassOrInterfaceDeclaration_3405_3_248()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_6174_5_189()
 {
    if (jj_3R_AllocationExpression_6561_3_104()) return true;
    return false;
  }

  private boolean jj_3R_InstanceOfExpression_5403_5_388()
 {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_Type_4524_3_101()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_3866_5_345()
 {
    if (jj_3R_Modifiers_3197_3_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_3873_9_359()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_3878_9_360()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_3884_9_361()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_3890_9_362()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_3897_9_363()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_3903_9_364()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_InstanceOfExpression_5401_3_347()
 {
    if (jj_3R_RelationalExpression_5439_3_365()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InstanceOfExpression_5403_5_388()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_TypeArguments_4677_3_92()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_6163_5_188()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceType_4626_3_205()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_Initializer_4500_3_85()) return true;
    return false;
  }

  private boolean jj_3R_SynchronizedStatement_7691_3_305()
 {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_5022_3_95()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Block_6913_3_129()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_3855_3_332()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_3866_5_345()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_3912_5_346()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_Block_6919_5_202()
 {
    if (jj_3R_BlockStatement_6962_3_199()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_6151_5_187()
 {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_6145_5_186()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_Block_6913_3_129()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Block_6919_5_202()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_EqualityExpression_5371_9_390()
 {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_6140_5_185()
 {
    if (jj_3R_Literal_6313_3_218()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_6139_3_114()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PrimaryPrefix_6140_5_185()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_6145_5_186()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_6151_5_187()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_6163_5_188()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_6174_5_189()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_6179_5_190()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_6193_5_191()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_EqualityExpression_5365_9_389()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JTBParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[186];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	   jj_la1_init_4();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xa00007e0,0x6,0x6,0x0,0xa00007e0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c0,0x0,0x0,0x0,0x0,0x2,0x0,0xa0000ffe,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffe,0x0,0x0,0x8000000,0x0,0x0,0x8000000,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0xa8000000,0x0,0x0,0x0,0x0,0x0,0x0,0xa8000000,0x0,0xa0000000,0xa8000000,0x0,0x0,0x0,0xa0000ffe,0xa0000ffe,0x0,0x0,0x0,0x0,0x0,0x0,0xa8000000,0x0,0x0,0x0,0xf0000ffe,0x0,0x0,0x0,0xa0000ffe,0x0,0xa0000000,0xa0000000,0x0,0x0,0xa0000000,0x0,0xa0000000,0xa0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0000ffe,0x0,0x0,0xa0000ffe,0x0,0x0,0x0,0x0,0x0,0x0,0xffe,0x0,0x0,0x0,0xa0000ffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf0000ffe,0x0,0xf0000ffe,0xf0000ffe,0x0,0x0,0x0,0x0,0xa0000ffe,0x0,0xf0000ffe,0x0,0x0,0xa0000ffe,0xa0000ffe,0xa0000ffe,0xa0000ffe,0xa0000ffe,0x0,0x0,0x0,0xa0000ffe,0x0,0x0,0x0,0x0,0x0,0xa0000ffe,0x0,0xa8000000,0x0,0xa0000000,0xa8000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xe140a104,0x0,0x0,0x1000,0xe140a104,0x0,0x0,0x0,0x0,0x0,0x0,0xe0002000,0xe0002000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd409104,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2000,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x100000,0xe2802408,0x0,0x0,0xe2002000,0x800408,0xe2802408,0x800008,0x0,0x800,0x80000,0x0,0x0,0x80000,0xe2002000,0x0,0xe3c0a50c,0x0,0x0,0x0,0x0,0x800,0x0,0xe3c0a50c,0x800408,0x1408104,0xe3c0a50c,0x0,0x0,0x0,0xd409104,0xd409104,0x0,0x0,0x0,0x0,0x0,0x0,0xe340a104,0x0,0x0,0x0,0xdc5b1ac,0x0,0x0,0x0,0xd409104,0x0,0x1408104,0x1408104,0x0,0x800,0x1408104,0x800,0x1408104,0x1408104,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd409104,0x0,0x0,0xd409104,0xc001000,0x0,0x0,0x0,0x0,0xc001000,0x0,0x0,0x8001000,0x1000,0xd409104,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0xd4591a4,0x0,0xdc5b1ac,0xdc591ac,0x0,0x2000,0x0,0x0,0xd409104,0x41,0xdc5b1ac,0x41,0x200,0xd40b104,0xd409104,0xd409104,0xd40b104,0xd409104,0x0,0x0,0x0,0xd409104,0x2,0x4000,0x0,0x0,0x0,0xd409104,0x0,0xe3c0a50c,0x40,0x1c0850c,0xe3c0a50c,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x2002,0x4,0x4,0x90800,0x2002,0x0,0x200,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0xf2892,0x0,0x0,0x0,0x80000,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x80000,0x10000,0x0,0x0,0x0,0x80000,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x444c,0x4,0x0,0x444c,0x0,0x444c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x444c,0x0,0x644e,0x0,0x0,0x0,0x0,0x0,0x0,0x644e,0x0,0x2002,0x644e,0x0,0x0,0x0,0xf2892,0xf2892,0x0,0x0,0x200,0x0,0x0,0x0,0x444e,0x0,0x0,0x200,0xfb9f3,0x0,0x0,0x90,0xf2892,0x4,0x2,0x2,0x0,0x10,0x2,0x10,0x2,0x2002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf2892,0x0,0x0,0xf2892,0xf0890,0x0,0x0,0x0,0x0,0xf0890,0x0,0x0,0xf0800,0x800,0xf2892,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfb9f3,0x0,0xfb9f3,0xfb9f3,0x0,0x0,0x0,0x0,0xf2892,0x0,0xfb9f3,0x0,0x0,0xf2892,0xf2892,0xf2892,0xf2892,0xf2892,0x0,0x0,0x0,0xf2892,0x0,0x0,0x0,0x0,0x0,0xf2892,0x0,0x444e,0x0,0x2,0x444e,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x1000,0x0,0x0,0x0,0x1000,0x200,0x0,0x0,0x200,0x0,0x2000,0x0,0x0,0x200,0x1000,0x1000,0x40,0x40000000,0x0,0x2000,0x10,0x10000,0x40000000,0x0,0x0,0x7806004,0x2000,0x400,0x2000,0x1000,0xa008000,0xa008000,0x50,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x40000000,0x5044,0x0,0x200,0xa008010,0xa008010,0x5044,0x4000,0x200,0x0,0x4000000,0x0,0x0,0x0,0x100,0x0,0x400,0x0,0x0,0x100,0x0,0x1000,0x0,0x0,0x200,0x200,0x0,0x0,0x200,0x1110,0x100,0x4,0x10,0x200,0x0,0x20000000,0x1110,0x0,0x1000,0x1100,0x200,0x800,0x40,0x7806014,0x7806014,0x200,0x1000,0x0,0x110,0x40,0x200,0x0,0x0,0x1000,0x0,0x1800114,0x200,0x1000,0x0,0x4,0x0,0x0,0x0,0x200,0x0,0x8000,0x0,0x0,0x0,0x200,0x800,0x8000,0x200000,0x400000,0x40000000,0x80000000,0x20000000,0x120000,0x120000,0x0,0xc1000,0xc1000,0x0,0x6000000,0x6000000,0x18000000,0x18000000,0x6000000,0x7806004,0x6000,0x6000,0x4,0x6004,0x4,0x1800000,0x1800000,0x4,0x4,0x0,0x444,0x0,0x0,0x7806004,0x200,0x1000,0x1000,0x10,0x44,0x0,0x40,0x40,0x1800114,0x10000,0x1800114,0x1800114,0x200,0x0,0x1800800,0x1800800,0x1800004,0x0,0x1800114,0x0,0x0,0x1800004,0x7806004,0x1800004,0x1800104,0x1800004,0x200,0x0,0x0,0x7806004,0x0,0x0,0x0,0x0,0x200,0x7806014,0x200,0x100,0x0,0x0,0x100,};
	}
	private static void jj_la1_init_4() {
	   jj_la1_4 = new int[] {0x100000,0x100000,0x100000,0x0,0x100000,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x2000,0x102000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x80000,0x0,0x0,0x80000,0x80000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180000,0x0,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x180000,0x80000,0x100000,0x180000,0x0,0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x180000,0x4000,0x0,0x0,0x180000,0x0,0x0,0x0,0x100000,0x0,0x0,0x100000,0x0,0x0,0x100000,0x0,0x0,0x100000,0x0,0x381fe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x800,0x40000,0x0,0x0,0x1,0x1,0x0,0x100000,0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x180000,0x100000,0x0,0x80000,0x381fe,0x381fe,0x100000,0x0,0x180000,0x0,0x0,0x180000,0x100000,0x100000,0x180000,0x100000,0x0,0x100000,0x100000,0x100000,0x0,0x0,0x80000,0x100000,0x0,0x180000,0x0,0x180000,0x0,0x180000,0x180000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[47];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JTBParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JTBParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new JTBParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 186; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 186; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JTBParser(java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new JTBParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 186; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new JTBParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 186; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JTBParser(JTBParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 186; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JTBParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 186; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = jj_lookingAhead ? jj_scanpos : token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[151];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 186; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		   if ((jj_la1_4[i] & (1<<j)) != 0) {
			 la1tokens[128+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 151; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 47; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			   case 33: jj_3_34(); break;
			   case 34: jj_3_35(); break;
			   case 35: jj_3_36(); break;
			   case 36: jj_3_37(); break;
			   case 37: jj_3_38(); break;
			   case 38: jj_3_39(); break;
			   case 39: jj_3_40(); break;
			   case 40: jj_3_41(); break;
			   case 41: jj_3_42(); break;
			   case 42: jj_3_43(); break;
			   case 43: jj_3_44(); break;
			   case 44: jj_3_45(); break;
			   case 45: jj_3_46(); break;
			   case 46: jj_3_47(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}

// ModMMa : adapted from JavaCC.jj to fit to JTB parser name

