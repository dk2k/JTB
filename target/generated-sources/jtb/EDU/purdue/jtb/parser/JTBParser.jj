/* Generated by JTB 1.5.1 */
/*
 * Copyright (c) 2004,2005 UCLA Compilers Group. 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 *  Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.
 * 
 *  Redistributions in binary form must reproduce the above copyright
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 * 
 *  Neither UCLA nor the names of its contributors may be used to endorse 
 *  or promote products derived from this software without specific prior 
 *  written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * JTB 1.3.x is a derivation of JTB 1.2.1 which has the following 
 * license:
 */
/*
 * All files in the distribution of JTB, The Java Tree Builder are
 * Copyright 1997, 1998, 1999 by the Purdue Research Foundation of Purdue
 * University.  All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that this entire copyright notice is duplicated in all
 * such copies, and that any documentation, announcements, and
 * other materials related to such distribution and use acknowledge
 * that the software was developed at Purdue University, West Lafayette,
 * Indiana by Kevin Tao and Jens Palsberg.  No charge may be made
 * for copies, derivations, or distributions of this material
 * without the express written consent of the copyright holder.
 * Neither the name of the University nor the name of the author
 * may be used to endorse or promote products derived from this
 * material without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ANY PARTICULAR PURPOSE.
 */
//
// Java Tree Builder (JTB) Grammar
//
// Converted from the JavaCC 0.6 grammar in the documentation.
// Appended to the Java1.1.jj grammar provided in JavaCC.
//
// AUTHOR: Kevin Tao, taokr@cs.purdue.edu
//
// This grammar is basically the JavaCC grammar, adapted from the
// documentation.  A few changes have been made to fix possible bugs in the
// grammar.
//
/* ************************************************************************* */
/*
 *
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * Author: Sriram Sankar
 * Date: 3/5/97
 *
 * This file contains a Java grammar and actions that implement a front-end.
 *
 */

/*
 * JavaCC Grammar used by JTB.
 *
 * @author Marc Mazas
 * @version 1.4.x : 05-11/2009-2010-2011-2012-2013-2014 : MMa
 *  adapted from JavaCC v4.2 grammar (JavaCC.jj)
 *   to fit with JTB.java and 
 *   to use the try-ExpansionChoices-catch-finally syntax through the ExpansionUnitInTCF production
 */
// ModMMa 2012/06 : 1.4.7 : modified AccessModifier(), BlockStatement(), LocalVariableDeclaration()
//                added VariableModifiers()
// ModMMa 2012/07 : 1.4.7 : added assert, enum & strictfp java keywords
//               fixed ForStatement() ; ForInit()
//               renamed RSIGNEDSHIFT in RSignedShift and fixed it
//               renamed RUNSIGNEDSHIFT in RUnsignedShift and fixed it
//               modified RegularExpression (remove LANGLE & RANGLE definitions)
//               renamed ExpansionUnitInTCF into ExpansionUnitTCF
// ModMMa 2012/09 : 1.4.7 : added "!" syntax in BNFProduction and RegExprSpec and ExpansionUnit
//                for not generating the node creation in the callers ;
//                fixed forbidding punctuation between productions
// ModMMa 2012/10 : 1.4.8 : added "%" syntax in JavaCodeProduction
// ModMMa 2014/11 : 1.4.8 : added AnnotationTypeDeclaration() in ClassOrInterfaceBodyDeclaration() ;
//                added ReferenceType() in ExplicitConstructorInvocation() ;
//               removed old invalid comments on missing node descriptors (they are in JJTree but not JTB)
// ModMMa 2014/12 : 1.4.8 : added variables initialization code ;
//                fixed the LOOKAHEAD in and modified ExplicitConstructorInvocation()
// ModMMa 2017/01 : 1.4.13 : added default options for proper generation by the Eclipse plugin
// ModMMa 2017/01 : 1.5.0 : changed AllocationExpression() and added EmptyTypeArguments() ; adapted to new
//                source folders structure
// ModMMa 2017/05 : 1.5.0 : added optional final in ExpansionUnitTCF's catch
// ModMMa 2020/10 : 1.5.0 : changed Expression in semantic lookahead to optional
// ModMMa 2023/07 : 1.5.1 : changed package name
// ModMMa 2023/08 : 1.5.1 : added optional annotations in catch of ExpansionUnitTCF; renamed .jtb and .jj

options
{
  // ModMMa : added (does not exist in JavaCC.jj nor in jtbgram.jj, but needed for Eclipse plugin)
  // ModMMa 2017/03 : changed 1.5.0
  //  OUTPUT_DIRECTORY = "parser";
  OUTPUT_DIRECTORY = "../../../../../../../target/generated-sources/jj/EDU/purdue/jtb/parser";
  // ModMMa 2017/03 : added 1.5.0
  // JTB_D = "../../../../../../../target/generated-sources/jtb/EDU/purdue/jtb/parser";
  // ModMMa 2017/03 : added 1.5.0
  // ModMMa 2023/08 : modified 1.5.1
  // JTB_O = "../../../../../../../target/generated-sources/jtb/EDU/purdue/jtb/parser/JTBParser.jj";
  // out file (default jtb.out.jj)
  // ModMMa : kept (from JavaCC.jj and jtbgram.jj)
  JAVA_UNICODE_ESCAPE = true;
  // ModMMa : kept (from JavaCC.jj, but it does not exist in jtbgram.jj)
  STATIC = false;
  // (default true)
  // ModMMa : impossible to use it (too long, too big)
  //  DEBUG_LOOKAHEAD = true;

  // ModMMa : for proper generation by the Eclipse plugin besides the ant task
  // JTB_P = "EDU.purdue.jtb.parser";
  // nodes and visitors package
  // JTB_IA = true;
  // inline accepts (default false, but for build.xml)
  // JTB_JD = true;
  // javadoc comments (default false, but for build.xmle)
  // JTB_TK = true;
  // store special tokens in NodeTokens (default false, but for build.xml)
  // JTB_TKJJ = true;
  // print special tokens in JJ file (default false, but for build.xml)

  // ModMMa 2017/03 : added 1.5.0
  // JTB_VIS = "Void,void,None;Int,int,None";
  TOKEN_FACTORY = "EDU.purdue.jtb.parser.syntaxtree.NodeConstants"; // added by JTB 1.5.1

// ModMMa 2017/06 : added 1.5.0, use for easier debugging
//  JTB_NOPLG = true;
}

// ModMMa : adapted from JavaCC.jj to fit to JTB parser name, package, imports
PARSER_BEGIN(JTBParser)
package EDU.purdue.jtb.parser;

import java.util.List;
import java.util.ArrayList;
import EDU.purdue.jtb.parser.syntaxtree.*;


/**
 * This file contains the code for JavaCCParser generated
 * by JavaCCParser itself.
 */
// ModMMa : adapted from JavaCC.jj to fit to JTB class name
public class JTBParser extends JavaCCParserInternals {


  /* --- JTB generated return variables declarations --- */

  /** Return variable for the {@link #LocalLookahead} BNFProduction) */
  Lookahead jtbrt_LocalLookahead;

  /** Return variable for the {@link #IdentifierAsString} BNFProduction) */
  String jtbrt_IdentifierAsString;

  /** Return variable for the {@link #JavaIdentifier} BNFProduction) */
  Token jtbrt_JavaIdentifier;

  /** Return variable for the {@link #Modifiers} BNFProduction) */
  int jtbrt_Modifiers;

  /** Return variable for the {@link #Name} BNFProduction) */
  String jtbrt_Name;

  /** Return variable for the {@link #IntegerLiteral} BNFProduction) */
  int jtbrt_IntegerLiteral;

  /** Return variable for the {@link #BooleanLiteral} BNFProduction) */
  boolean jtbrt_BooleanLiteral;

  /** Return variable for the {@link #StringLiteral} BNFProduction) */
  String jtbrt_StringLiteral;

  /* --- User code --- */

  /**
   * The name of the parser class.
   */
  String parser_class_name;

  /**
   * The options, shared with JTB.
   */
  Options opt;

  /**
   * This flag is set to true when the part between PARSER_BEGIN and
   * PARSER_END is being parsed.
   */
  boolean processing_cu = false;

  /**
   * The level of class nesting.
   */
  int class_nesting = 0;

  /**
   * This int variable is incremented while parsing local lookaheads.
   * Hence it keeps track of *syntactic* lookahead nesting.
   * This is used to provide warnings when actions and nested lookaheads
   * are used in syntactic lookahead productions.  This is to prevent
   * typos such as leaving out the comma in LOOKAHEAD( foo(), {check()} ).
   */
  int inLocalLA = 0;

  /**
   * Set to true when the parser is within an action.
   */
  boolean inAction = false;

  /**
   * This flag keeps track of whether or not return and throw
   * statements have been patched during the parsing of a production.
   * The value of this flag is assigned the field with the same
   * name in BNFProduction_.java.
   */
  boolean jumpPatched = false;

  // ModMMa 2023/07 : added
  /** The grammar package */
  public String grammarPackage = null;

  /*
   * Returns true if the next token is not in the FOLLOW list of "expansion".
   * It is used to decide when the end of an "expansion" has been reached.
   */
  private boolean notTailOfExpansionUnit() {
    final Token t = getToken(1);
    if (t.kind == BIT_OR || t.kind == COMMA || t.kind == RPAREN || t.kind == RBRACE || t.kind == RBRACKET)
      return false;
    return true;
  }

  /**
   * Class to hold modifiers.
   */
  static public final class ModifierSet {
    /* --- User code --- */

    /* Definitions of the bits in the modifiers field */
    
    public static final int M_PUBLIC = 0x0001;

    public static final int M_PROTECTED = 0x0002;

    public static final int M_PRIVATE = 0x0004;

    public static final int M_ABSTRACT = 0x0008;

    public static final int M_STATIC = 0x0010;

    public static final int M_FINAL = 0x0020;

    public static final int M_SYNCHRONIZED = 0x0040;

    public static final int M_NATIVE = 0x0080;

    public static final int M_TRANSIENT = 0x0100;

    public static final int M_VOLATILE = 0x0200;

    public static final int M_STRICTFP = 0x1000;

    /* A set of accessors that indicate whether the specified modifier is in the set */
    
    public boolean isPublic(int modifiers) {
      return (modifiers & M_PUBLIC) != 0;
    }

    public boolean isProtected(int modifiers) {
      return (modifiers & M_PROTECTED) != 0;
    }

    public boolean isPrivate(int modifiers) {
      return (modifiers & M_PRIVATE) != 0;
    }

    public boolean isStatic(int modifiers) {
      return (modifiers & M_STATIC) != 0;
    }

    public boolean isAbstract(int modifiers) {
      return (modifiers & M_ABSTRACT) != 0;
    }

    public boolean isFinal(int modifiers) {
      return (modifiers & M_FINAL) != 0;
    }

    public boolean isNative(int modifiers) {
      return (modifiers & M_NATIVE) != 0;
    }

    public boolean isStrictfp(int modifiers) {
      return (modifiers & M_STRICTFP) != 0;
    }

    public boolean isSynchronized(int modifiers) {
      return (modifiers & M_SYNCHRONIZED) != 0;
    }

    public boolean isTransient(int modifiers) {
      return (modifiers & M_TRANSIENT) != 0;
    }

    public boolean isVolatile(int modifiers) {
      return (modifiers & M_VOLATILE) != 0;
    }

    /* Removes the given modifier */
    
    static int removeModifier(int modifiers, int mod) {
      return modifiers & ~mod;
    }
  }

}

// ModMMa : adapted from JavaCC.jj to fit to JTB parser name
PARSER_END(JTBParser)

TOKEN_MGR_DECLS : {

  int size = 20;

  int beginLine[] = new int[size];

  int beginCol[] = new int[size];

  int depth = 0;

  final void saveBeginLineCol(final int l, final int c) {
    if (depth == size) {
      size += 10;
      final int tmpbeginLine[] = new int[size];
      final int tmpbeginCol[] = new int[size];
      System.arraycopy(beginLine, 0, tmpbeginLine, 0, depth);
      System.arraycopy(beginCol, 0, tmpbeginCol, 0, depth);
      beginLine = tmpbeginLine;
      beginCol = tmpbeginCol;
    }
    beginLine[depth] = l;
    beginCol[depth] = c;
    depth++;
  }

  final void restoreBeginLineCol() {
    depth--;
    input_stream.adjustBeginLineColumn(beginLine[depth], beginCol[depth]);
  }
}


/**********************************************
 * THE JAVACC TOKEN SPECIFICATION STARTS HERE *
 **********************************************/
/* JAVACC RESERVED WORDS: These are the only tokens in JavaCC but not in Java */
TOKEN :
{
  // "options" is no longer reserved (see issue 126).
  //  < _OPTIONS: "options" >
  < _LOOKAHEAD : "LOOKAHEAD" >
| < _IGNORE_CASE : "IGNORE_CASE" >
| < _PARSER_BEGIN : "PARSER_BEGIN" >
| < _PARSER_END : "PARSER_END" >
| < _JAVACODE : "JAVACODE" >
| < _TOKEN : "TOKEN" >
| < _SPECIAL_TOKEN : "SPECIAL_TOKEN" >
| < _MORE : "MORE" >
| < _SKIP : "SKIP" >
| < _TOKEN_MGR_DECLS : "TOKEN_MGR_DECLS" >
| < _EOF : "EOF" >
}

/*
 * The remainder of the tokens are exactly (except for the removal of tokens containing ">>" and "<<")
 * as in the Java grammar and must be equivalent (again with the exceptions above) to it
 */
/* WHITE SPACE */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
| "/*@egen*/" : AFTER_EGEN
}

<AFTER_EGEN>
SKIP :
{
  < ~[] >
    {
      restoreBeginLineCol();
      input_stream.backup(1);
    } : DEFAULT
}

/* COMMENTS */
MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
| < "/**" ~["/"] >
    {
      input_stream.backup(1);
    } : IN_FORMAL_COMMENT
| "/*" : IN_MULTI_LINE_COMMENT
| "/*@bgen(jjtree"
    {
      saveBeginLineCol(input_stream.getBeginLine(), input_stream.getBeginColumn());
    } : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT :
      "\n"
    | "\r"
    | "\r\n"
> : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  < FORMAL_COMMENT : "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  < MULTI_LINE_COMMENT : "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* JAVA RESERVED WORDS AND LITERALS */
TOKEN :
{
  < ABSTRACT : "abstract" >
| < ASSERT : "assert" >
| < BOOLEAN : "boolean" >
| < BREAK : "break" >
| < BYTE : "byte" >
| < CASE : "case" >
| < CATCH : "catch" >
| < CHAR : "char" >
| < CLASS : "class" >
| < CONST : "const" >
| < CONTINUE : "continue" >
| < _DEFAULT : "default" >
| < DO : "do" >
| < DOUBLE : "double" >
| < ELSE : "else" >
| < ENUM : "enum" >
| < EXTENDS : "extends" >
| < FALSE : "false" >
// boolean literal
  | < FINAL : "final" >
| < FINALLY : "finally" >
| < FLOAT : "float" >
| < FOR : "for" >
| < GOTO : "goto" >
| < IF : "if" >
| < IMPLEMENTS : "implements" >
| < IMPORT : "import" >
| < INSTANCEOF : "instanceof" >
| < INT : "int" >
| < INTERFACE : "interface" >
| < LONG : "long" >
| < NATIVE : "native" >
| < NEW : "new" >
| < NULL : "null" >
// null literal
  | < PACKAGE : "package" >
| < PRIVATE : "private" >
| < PROTECTED : "protected" >
| < PUBLIC : "public" >
| < RETURN : "return" >
| < SHORT : "short" >
| < STATIC : "static" >
| < STRICTFP : "strictfp" >
| < SUPER : "super" >
| < SWITCH : "switch" >
| < SYNCHRONIZED : "synchronized" >
| < THIS : "this" >
| < THROW : "throw" >
| < THROWS : "throws" >
| < TRANSIENT : "transient" >
| < TRUE : "true" >
// boolean literal
  | < TRY : "try" >
| < VOID : "void" >
| < VOLATILE : "volatile" >
| < WHILE : "while" >
}

/* JAVA LITERALS */
TOKEN :
{
  < INTEGER_LITERAL :
      <DECIMAL_LITERAL>( <LONG_LETTER> )?
    | <HEX_LITERAL>( <LONG_LETTER> )?
    | <OCTAL_LITERAL>( <LONG_LETTER> )?
>
| < FLOATING_POINT_LITERAL :
      <DECIMAL_FLOATING_POINT_LITERAL>
    | <HEXADECIMAL_FLOATING_POINT_LITERAL>
>
| < CHARACTER_LITERAL : "'"
    (
      ( ~["'", "\\", "\n", "\r"] )
    | <ESCAPED_CHARACTER>
    ) "'" >
| < STRING_LITERAL : "\""
    (
      ( ~["\"", "\\", "\n", "\r"] )
    | <ESCAPED_CHARACTER>
    )* "\"" >
| < #DEC_DIGIT : ["0"-"9"] >
| < #HEX_DIGIT : ["0"-"9", "a"-"f", "A"-"F"] >
| < #OCTAL_DIGIT : ["0"-"7"] >
| < #OCTAL_FIRST_DIGIT : ["0"-"3"] >
| < #DECIMAL_LITERAL : ["1"-"9"]( <DEC_DIGIT> )* >
| < #HEX_LITERAL : "0" ["x", "X"]( <HEX_DIGIT> )+ >
| < #OCTAL_LITERAL : "0"( <OCTAL_DIGIT> )* >
| < #DECIMAL_EXPONENT : ["e", "E"]( ["+", "-"] )?( <DEC_DIGIT> )+ >
| < #HEXADECIMAL_EXPONENT : ["p", "P"]( ["+", "-"] )?( <DEC_DIGIT> )+ >
| < #FLOATING_POINT_LETTER : ["f", "F", "d", "D"] >
| < #LONG_LETTER : ["l", "L"] >
| < #DECIMAL_FLOATING_POINT_LITERAL :
      ( <DEC_DIGIT> )+ "."( <DEC_DIGIT> )*( <DECIMAL_EXPONENT> )?( <FLOATING_POINT_LETTER> )?
    | "."( <DEC_DIGIT> )+( <DECIMAL_EXPONENT> )?( <FLOATING_POINT_LETTER> )?
    | ( <DEC_DIGIT> )+ <DECIMAL_EXPONENT>( <FLOATING_POINT_LETTER> )?
    | ( <DEC_DIGIT> )+( <DECIMAL_EXPONENT> )? <FLOATING_POINT_LETTER>
>
| < #HEXADECIMAL_FLOATING_POINT_LITERAL :
      "0" ["x", "X"]( <HEX_DIGIT> )+( "." )? <HEXADECIMAL_EXPONENT>( <FLOATING_POINT_LETTER> )?
    | "0" ["x", "X"]( <HEX_DIGIT> )* "."( <HEX_DIGIT> )+ <HEXADECIMAL_EXPONENT>( <FLOATING_POINT_LETTER> )?
>
| < #ESCAPED_CHARACTER : "\\"
    (
      ["n", "t", "b", "r", "f", "\\", "'", "\""]
    | <OCTAL_DIGIT>( <OCTAL_DIGIT> )?
    | <OCTAL_FIRST_DIGIT> <OCTAL_DIGIT> <OCTAL_DIGIT>
    ) >
}

/* SEPARATORS */
TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
}

/* OPERATORS */
TOKEN :
{
  < ASSIGN : "=" >
// (moved to next TOKEN declaration)
  //| < GT: ">" >
  | < LT : "<" >
| < BANG : "!" >
| < TILDE : "~" >
| < HOOK : "?" >
| < COLON : ":" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NE : "!=" >
| < SC_OR : "||" >
| < SC_AND : "&&" >
| < INCR : "++" >
| < DECR : "--" >
| < PLUS : "+" >
| < MINUS : "-" >
| < STAR : "*" >
| < SLASH : "/" >
| < BIT_AND : "&" >
| < BIT_OR : "|" >
| < XOR : "^" >
| < REM : "%" >
//    | < LSHIFT: "<<" >
  //    | < RSIGNEDSHIFT: ">>" >
  //    | < RUNSIGNEDSHIFT: ">>>" >
  | < PLUSASSIGN : "+=" >
| < MINUSASSIGN : "-=" >
| < STARASSIGN : "*=" >
| < SLASHASSIGN : "/=" >
| < ANDASSIGN : "&=" >
| < ORASSIGN : "|=" >
| < XORASSIGN : "^=" >
| < REMASSIGN : "%=" >
//    | < LSHIFTASSIGN: "<<=" >
//    | < RSIGNEDSHIFTASSIGN: ">>=" >
//    | < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}

/* >'s need special attention due to generics syntax */
// (see also RUnsignedShift() and RSignedShift())
TOKEN :
{
  < RUNSIGNEDSHIFT : ">>>" >
    {
      matchedToken.kind = GT;
      ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
      input_stream.backup(2);
      matchedToken.image = ">";
    }
| < RSIGNEDSHIFT : ">>" >
    {
      matchedToken.kind = GT;
      ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
      input_stream.backup(1);
      matchedToken.image = ">";
    }
| < GT : ">" >
}

JavaCCInput JavaCCInput(final Options aOptions) :
{
  // --- JTB generated node declarations ---
  JavaCCOptions n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  IdentifierAsString n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  CompilationUnit n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  IdentifierAsString n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeList n16 = new NodeList();
  NodeSequence n17 = null;
  Production n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  JavaCCInput jtbNode = null;
  // --- user BNFProduction java block ---
  opt = aOptions;
  String id1 = null;
  String id2 = null;
  initialize();
// ModMMa : added to JavaCC as called in parser.Main in Javacc 4.2
// ModMMa 2017/03 removed as done in JTB
//  opt.init();
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = JavaCCOptions()
  n2 = "PARSER_BEGIN"
  { n1 = (NodeToken) n2; }
  n4 = "("
  { n3 = (NodeToken) n4; }
  { String oldJtbrt_IdentifierAsString_1 = jtbrt_IdentifierAsString; }
  n5 = IdentifierAsString()
  { id1 = jtbrt_IdentifierAsString; }
  { jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_1; }
  {
    addcuname(id1);
  }
  n7 = ")"
  { n6 = (NodeToken) n7; }
  {
    processing_cu = true;
    parser_class_name = id1;
  }
  n8 = CompilationUnit()
  {
    processing_cu = false;
  }
  n10 = "PARSER_END"
  { n9 = (NodeToken) n10; }
  n12 = "("
  { n11 = (NodeToken) n12; }
  { String oldJtbrt_IdentifierAsString_2 = jtbrt_IdentifierAsString; }
  n13 = IdentifierAsString()
  { id2 = jtbrt_IdentifierAsString; }
  { jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_2; }
  {
    compare(getToken(0), id1, id2);
  }
  n15 = ")"
  { n14 = (NodeToken) n15; }
  (
    { n17 = new NodeSequence(1); }
    n18 = Production()
    { n17.addNode(n18); }
    { n16.addNode(n17); }
  )+
  { n16.nodes.trimToSize(); }
  // ModMMa 2012/09 : added to forbid punctuation between productions
    n20 = < EOF >
  { n20.beginColumn++; }
  { n20.endColumn++; }
  { n19 = (NodeToken) n20; }
  { jtbNode = new JavaCCInput(n0, n1, n3, n5, n6, n8, n9, n11, n13, n14, n16, n19); }
  { return jtbNode; }
}

JavaCCOptions JavaCCOptions() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeListOptional n6 = null;
  NodeSequence n7 = null;
  OptionBinding n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  JavaCCOptions jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  [
    LOOKAHEAD( { getToken(1).image.equals("options") } )
    { n6 = new NodeListOptional(); }
    { n1 = new NodeSequence(4); }
    n3 = "options"
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    n5 = "{"
    { n4 = (NodeToken) n5; }
    { n1.addNode(n4); }
    (
      { n7 = new NodeSequence(1); }
      n8 = OptionBinding()
      { n7.addNode(n8); }
      { n6.addNode(n7); }
    )*
    { n6.nodes.trimToSize(); }
    { n1.addNode(n6); }
    n10 = "}"
    { n9 = (NodeToken) n10; }
    { n1.addNode(n9); }
    { n0.addNode(n1); }
  ]
  {
    opt.normalize();
  }
  { jtbNode = new JavaCCOptions(n0); }
  { return jtbNode; }
}

OptionBinding OptionBinding() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeChoice n15 = null;
  NodeSequence n16 = null;
  IntegerLiteral n17 = null;
  NodeSequence n18 = null;
  BooleanLiteral n19 = null;
  NodeSequence n20 = null;
  StringLiteral n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  OptionBinding jtbNode = null;
  // --- user BNFProduction java block ---
  String option_name = null;
  int int_val = 0;
  boolean bool_val = false;
  String string_val = null;
  Token t = getToken(1);
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    (
      { n1 = new NodeSequence(1); }
      n3 = < IDENTIFIER >
      { n2 = (NodeToken) n3; }
      { n1.addNode(n2); }
      { n0 = new NodeChoice(n1, 0, 4); }
    |
      { n4 = new NodeSequence(1); }
      n6 = "LOOKAHEAD"
      { n5 = (NodeToken) n6; }
      { n4.addNode(n5); }
      { n0 = new NodeChoice(n4, 1, 4); }
    |
      { n7 = new NodeSequence(1); }
      n9 = "IGNORE_CASE"
      { n8 = (NodeToken) n9; }
      { n7.addNode(n8); }
      { n0 = new NodeChoice(n7, 2, 4); }
    |
      { n10 = new NodeSequence(1); }
      n12 = "static"
      { n11 = (NodeToken) n12; }
      { n10.addNode(n11); }
      { n0 = new NodeChoice(n10, 3, 4); }
    )
  )
  {
    option_name = t.image;
  }
  n14 = "="
  { n13 = (NodeToken) n14; }
  (
    (
      { n16 = new NodeSequence(1); }
      { int oldJtbrt_IntegerLiteral_1 = jtbrt_IntegerLiteral; }
      n17 = IntegerLiteral()
      { int_val = jtbrt_IntegerLiteral; }
      { jtbrt_IntegerLiteral = oldJtbrt_IntegerLiteral_1; }
      { n16.addNode(n17); }
      {
        // ModMMa Integer(int) in Integer has been deprecated and marked for removal
        //      opt.setInputFileOption(t, getToken(0), option_name, new Integer(int_val));
        opt.setInputFileOption(t, getToken(0), option_name, int_val);
      }
      { n15 = new NodeChoice(n16, 0, 3); }
    |
      { n18 = new NodeSequence(1); }
      { boolean oldJtbrt_BooleanLiteral_2 = jtbrt_BooleanLiteral; }
      n19 = BooleanLiteral()
      { bool_val = jtbrt_BooleanLiteral; }
      { jtbrt_BooleanLiteral = oldJtbrt_BooleanLiteral_2; }
      { n18.addNode(n19); }
      {
        // ModMMa Integer(int) in Integer has been deprecated and marked for removal
        //      opt.setInputFileOption(t, getToken(0), option_name, new Boolean(bool_val));
        opt.setInputFileOption(t, getToken(0), option_name, bool_val);
      }
      { n15 = new NodeChoice(n18, 1, 3); }
    |
      { n20 = new NodeSequence(1); }
      { String oldJtbrt_StringLiteral_3 = jtbrt_StringLiteral; }
      n21 = StringLiteral()
      { string_val = jtbrt_StringLiteral; }
      { jtbrt_StringLiteral = oldJtbrt_StringLiteral_3; }
      { n20.addNode(n21); }
      {
        opt.setInputFileOption(t, getToken(0), option_name, string_val);
      }
      { n15 = new NodeChoice(n20, 2, 3); }
    )
  )
  n23 = ";"
  { n22 = (NodeToken) n23; }
  { jtbNode = new OptionBinding(n0, n13, n15, n22); }
  { return jtbNode; }
}

Production Production() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  JavaCodeProduction n2 = null;
  NodeSequence n3 = null;
  RegularExprProduction n4 = null;
  NodeSequence n5 = null;
  TokenManagerDecls n6 = null;
  NodeSequence n7 = null;
  BNFProduction n8 = null;
  Production jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    LOOKAHEAD( 1 )
    { n1 = new NodeSequence(1); }
    /*
   * Since JAVACODE is both a JavaCC reserved word and a Java identifier,
   * we need to give preference to "JavaCodeProduction" over "BNFProduction"
   */
    n2 = JavaCodeProduction()
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 4); }
  |
    LOOKAHEAD( 1 )
    { n3 = new NodeSequence(1); }
    /*
   * Since SKIP, TOKEN, etc. are both JavaCC reserved words and Java identifiers,
   * we need to give preference to "RegularExprProduction" over "BNFProduction"
   */
    n4 = RegularExprProduction()
    { n3.addNode(n4); }
    { n0 = new NodeChoice(n3, 1, 4); }
  |
    LOOKAHEAD( 1 )
    { n5 = new NodeSequence(1); }
    /*
   * Since TOKEN_MGR_DECLS is both a JavaCC reserved word and a Java identifier,
   * we need to give preference to "TokenManagerDecls" over "BNFProduction"
   */
    n6 = TokenManagerDecls()
    { n5.addNode(n6); }
    { n0 = new NodeChoice(n5, 2, 4); }
  |
    { n7 = new NodeSequence(1); }
    n8 = BNFProduction()
    { n7.addNode(n8); }
    { n0 = new NodeChoice(n7, 3, 4); }
  )
  { jtbNode = new Production(n0); }
  { return jtbNode; }
}

JavaCodeProduction JavaCodeProduction() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  AccessModifier n2 = null;
  ResultType n3 = null;
  IdentifierAsString n4 = null;
  FormalParameters n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Name n10 = null;
  NodeListOptional n11 = null;
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  Name n15 = null;
  NodeOptional n16 = new NodeOptional();
  NodeSequence n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  Block n20 = null;
  JavaCodeProduction jtbNode = null;
  // --- user BNFProduction java block ---
  JavaCodeProduction_ p = new JavaCodeProduction_();
  String lhs = null;
  Token t = getToken(1);
  p.setFirstToken(t);
  List<Token> excName = null;
  p.setThrowsList(new ArrayList<List<Token>>());
  p.setLine(t.beginLine);
  p.setColumn(t.beginColumn);
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "JAVACODE"
  { n0 = (NodeToken) n1; }
  n2 = AccessModifier(p)
  n3 = ResultType(p.getReturnTypeTokens())
  { String oldJtbrt_IdentifierAsString_1 = jtbrt_IdentifierAsString; }
  n4 = IdentifierAsString()
  { lhs = jtbrt_IdentifierAsString; }
  { jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_1; }
  {
    p.setLhs(lhs);
  }
  n5 = FormalParameters(p.getParameterListTokens())
  [
    { n11 = new NodeListOptional(); }
    { n7 = new NodeSequence(3); }
    n9 = "throws"
    { n8 = (NodeToken) n9; }
    { n7.addNode(n8); }
    {
      excName = new ArrayList<Token>();
    }
    n10 = Name(excName)
    { n7.addNode(n10); }
    {
      p.getThrowsList().add(excName);
    }
    (
      {
        excName = new ArrayList<Token>();
      }
{ n12 = new NodeSequence(2); }
      n14 = ","
      { n13 = (NodeToken) n14; }
      { n12.addNode(n13); }
      n15 = Name(excName)
      { n12.addNode(n15); }
      {
        p.getThrowsList().add(excName);
      }
      { n11.addNode(n12); }
    )*
    { n11.nodes.trimToSize(); }
    { n6.addNode(n7); }
  ]
  // ModMMa 2012/10 : added for generating the node creation within the callers (in JavaCodeProduction)
  [
    { n17 = new NodeSequence(1); }
    n19 = "%"
    { n18 = (NodeToken) n19; }
    { n17.addNode(n18); }
    { n16.addNode(n17); }
  ]
  n20 = Block(p.getCodeTokens())
  {
    p.setLastToken(getToken(0));
    addproduction(p);
  }
  { jtbNode = new JavaCodeProduction(n0, n2, n3, n4, n5, n6, n16, n20); }
  { return jtbNode; }
}

BNFProduction BNFProduction() :
{
  // --- JTB generated node declarations ---
  AccessModifier n0 = null;
  ResultType n1 = null;
  IdentifierAsString n2 = null;
  FormalParameters n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Name n8 = null;
  NodeListOptional n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  Name n13 = null;
  NodeOptional n14 = new NodeOptional();
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  Block n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  ExpansionChoices n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  BNFProduction jtbNode = null;
  // --- user BNFProduction java block ---
  BNFProduction_ p = new BNFProduction_();
  Container c = new Container();
  Token t = getToken(1);
  p.setFirstToken(t);
  List<Token> excName = null;
  String lhs = null;
  p.setThrowsList(new ArrayList<List<Token>>());
  p.setLine(t.beginLine);
  p.setColumn(t.beginColumn);
  jumpPatched = false;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = AccessModifier(p)
  n1 = ResultType(p.getReturnTypeTokens())
  { String oldJtbrt_IdentifierAsString_1 = jtbrt_IdentifierAsString; }
  n2 = IdentifierAsString()
  { lhs = jtbrt_IdentifierAsString; }
  { jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_1; }
  {
    p.setLhs(lhs);
  }
  n3 = FormalParameters(p.getParameterListTokens())
  [
    { n9 = new NodeListOptional(); }
    { n5 = new NodeSequence(3); }
    n7 = "throws"
    { n6 = (NodeToken) n7; }
    { n5.addNode(n6); }
    {
      excName = new ArrayList<Token>();
    }
    n8 = Name(excName)
    { n5.addNode(n8); }
    {
      p.getThrowsList().add(excName);
    }
    (
      {
        excName = new ArrayList<Token>();
      }
{ n10 = new NodeSequence(2); }
      n12 = ","
      { n11 = (NodeToken) n12; }
      { n10.addNode(n11); }
      n13 = Name(excName)
      { n10.addNode(n13); }
      {
        p.getThrowsList().add(excName);
      }
      { n9.addNode(n10); }
    )*
    { n9.nodes.trimToSize(); }
    { n4.addNode(n5); }
  ]
  // ModMMa 2012/09 : added for not generating the node creation within the callers (in BNFProduction)
  [
    { n15 = new NodeSequence(1); }
    n17 = "!"
    { n16 = (NodeToken) n17; }
    { n15.addNode(n16); }
    { n14.addNode(n15); }
  ]
  n19 = ":"
  { n18 = (NodeToken) n19; }
  n20 = Block(p.getDeclarationTokens())
  n22 = "{"
  { n21 = (NodeToken) n22; }
  n23 = ExpansionChoices(c)
  n25 = "}"
  { n24 = (NodeToken) n25; }
  { t = n25; }
  {
    p.setLastToken(t);
    p.setJumpPatched(jumpPatched);
    production_addexpansion(p, (Expansion_)(c.member));
    addproduction(p);
  }
  { jtbNode = new BNFProduction(n0, n1, n2, n3, n4, n14, n18, n20, n21, n23, n24); }
  { return jtbNode; }
}

AccessModifier AccessModifier(NormalProduction p) :
{
  // --- JTB generated node declarations ---
  NodeListOptional n0 = new NodeListOptional();
  NodeChoice n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  AccessModifier jtbNode = null;
  // --- user BNFProduction java block ---
  Token t = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    (
      { n2 = new NodeSequence(1); }
      n4 = "public"
      { n3 = (NodeToken) n4; }
      { t = n4; }
      { n2.addNode(n3); }
      { n1 = new NodeChoice(n2, 0, 4); }
    |
      { n5 = new NodeSequence(1); }
      n7 = "protected"
      { n6 = (NodeToken) n7; }
      { t = n7; }
      { n5.addNode(n6); }
      { n1 = new NodeChoice(n5, 1, 4); }
    |
      { n8 = new NodeSequence(1); }
      n10 = "private"
      { n9 = (NodeToken) n10; }
      { t = n10; }
      { n8.addNode(n9); }
      { n1 = new NodeChoice(n8, 2, 4); }
    // ModMMa 2012/07 added
    |
      { n11 = new NodeSequence(1); }
      n13 = "final"
      { n12 = (NodeToken) n13; }
      { n11.addNode(n12); }
      { n1 = new NodeChoice(n11, 3, 4); }
    )
    { n0.addNode(n1); }
  // ModMMa 2012/07
  // )?
  )*
  { n0.nodes.trimToSize(); }
  {
    if (t != null)
      p.setAccessMod(t.image);
  }
  { jtbNode = new AccessModifier(n0); }
  { return jtbNode; }
}

RegularExprProduction RegularExprProduction() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeChoice n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeListOptional n14 = null;
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  RegExprKind n22 = null;
  NodeOptional n23 = new NodeOptional();
  NodeSequence n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  RegExprSpec n35 = null;
  NodeListOptional n36 = new NodeListOptional();
  NodeSequence n37 = null;
  NodeToken n38 = null;
  Token n39 = null;
  RegExprSpec n40 = null;
  NodeToken n41 = null;
  Token n42 = null;
  RegularExprProduction jtbNode = null;
  // --- user BNFProduction java block ---
  TokenProduction p = new TokenProduction();
  List<String> states = null;
  Token t = p.firstToken = getToken(1);
  p.setLine(t.beginLine);
  p.setColumn(t.beginColumn);
}
{
  // --- user BNFProduction ExpansionChoices ---
  {
    /* Set p.lexStates assuming there is no lexical state specified, and then override if necessary */
    p.lexStates = new String[]{ "DEFAULT" };
  }
  [
    { n14 = new NodeListOptional(); }
    (
      LOOKAHEAD( 2 )
      { n2 = new NodeSequence(3); }
      n4 = "<"
      { n3 = (NodeToken) n4; }
      { n2.addNode(n3); }
      n6 = "*"
      { n5 = (NodeToken) n6; }
      { n2.addNode(n5); }
      n8 = ">"
      { n7 = (NodeToken) n8; }
      { n2.addNode(n7); }
      {
        p.lexStates = null;
      }
      { n1 = new NodeChoice(n2, 0, 2); }
    |
      { n9 = new NodeSequence(4); }
      n11 = "<"
      { n10 = (NodeToken) n11; }
      { n9.addNode(n10); }
      {
        states = new ArrayList<String>();
      }
      n13 = < IDENTIFIER >
      { n12 = (NodeToken) n13; }
      { t = n13; }
      { n9.addNode(n12); }
      {
        states.add(t.image);
      }
      (
        { n15 = new NodeSequence(2); }
        n17 = ","
        { n16 = (NodeToken) n17; }
        { n15.addNode(n16); }
        n19 = < IDENTIFIER >
        { n18 = (NodeToken) n19; }
        { t = n19; }
        { n15.addNode(n18); }
        {
          states.add(t.image);
        }
        { n14.addNode(n15); }
      )*
      { n14.nodes.trimToSize(); }
      { n9.addNode(n14); }
      n21 = ">"
      { n20 = (NodeToken) n21; }
      { n9.addNode(n20); }
      {
        p.lexStates = new String[states.size()];
        // ModMMa : workaround for Eclipse plugin color syntax problem
        // for (int i = 0; i < states.size(); i++) {
        for (int i = 0; i != states.size(); i++)
          p.lexStates[i] = states.get(i);
        
      }
      { n1 = new NodeChoice(n9, 1, 2); }
    )
    { n0.addNode(n1); }
  ]
  n22 = RegExprKind(p)
  {
    if (p.kind != TokenProduction.TOKEN && opt.getUserTokenManager())
      JavaCCErrors.warning(getToken(0), "Regular expression is being treated as if it were a TOKEN since option USER_TOKEN_MANAGER has been set to true.");
  }
  [
    { n24 = new NodeSequence(3); }
    n26 = "["
    { n25 = (NodeToken) n26; }
    { n24.addNode(n25); }
    n28 = "IGNORE_CASE"
    { n27 = (NodeToken) n28; }
    { t = n28; }
    { n24.addNode(n27); }
    n30 = "]"
    { n29 = (NodeToken) n30; }
    { n24.addNode(n29); }
    {
      p.ignoreCase = true;
      if (opt.getUserTokenManager())
        JavaCCErrors.warning(t, "Ignoring \"IGNORE_CASE\" specification since option USER_TOKEN_MANAGER has been set to true.");
    }
    { n23.addNode(n24); }
  ]
  n32 = ":"
  { n31 = (NodeToken) n32; }
  n34 = "{"
  { n33 = (NodeToken) n34; }
  n35 = RegExprSpec(p)
  (
    { n37 = new NodeSequence(2); }
    n39 = "|"
    { n38 = (NodeToken) n39; }
    { n37.addNode(n38); }
    n40 = RegExprSpec(p)
    { n37.addNode(n40); }
    { n36.addNode(n37); }
  )*
  { n36.nodes.trimToSize(); }
  n42 = "}"
  { n41 = (NodeToken) n42; }
  { t = n42; }
  {
    p.lastToken = t;
    addregexpr(p, opt.getUserTokenManager());
  }
  { jtbNode = new RegularExprProduction(n0, n22, n23, n31, n33, n35, n36, n41); }
  { return jtbNode; }
}

TokenManagerDecls TokenManagerDecls() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  ClassOrInterfaceBody n4 = null;
  TokenManagerDecls jtbNode = null;
  // --- user BNFProduction java block ---
  List<Token> decls = new ArrayList<Token>();
  Token t = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "TOKEN_MGR_DECLS"
  { n0 = (NodeToken) n1; }
  { t = n1; }
  n3 = ":"
  { n2 = (NodeToken) n3; }
  n4 = ClassOrInterfaceBody(false, decls)
  {
    add_token_manager_decls(t, decls, opt.getUserTokenManager());
  }
  { jtbNode = new TokenManagerDecls(n0, n2, n4); }
  { return jtbNode; }
}

RegExprKind RegExprKind(TokenProduction p) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  RegExprKind jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(1); }
    n3 = "TOKEN"
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 4); }
    {
      p.kind = TokenProduction.TOKEN;
    }
  |
    { n4 = new NodeSequence(1); }
    n6 = "SPECIAL_TOKEN"
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    { n0 = new NodeChoice(n4, 1, 4); }
    {
      p.kind = TokenProduction.SPECIAL;
    }
  |
    { n7 = new NodeSequence(1); }
    n9 = "SKIP"
    { n8 = (NodeToken) n9; }
    { n7.addNode(n8); }
    { n0 = new NodeChoice(n7, 2, 4); }
    {
      p.kind = TokenProduction.SKIP;
    }
  |
    { n10 = new NodeSequence(1); }
    n12 = "MORE"
    { n11 = (NodeToken) n12; }
    { n10.addNode(n11); }
    { n0 = new NodeChoice(n10, 3, 4); }
    {
      p.kind = TokenProduction.MORE;
    }
  )
  { jtbNode = new RegExprKind(n0); }
  { return jtbNode; }
}

RegExprSpec RegExprSpec(TokenProduction p) :
{
  // --- JTB generated node declarations ---
  RegularExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeSequence n6 = null;
  Block n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  RegExprSpec jtbNode = null;
  // --- user BNFProduction java block ---
  Container c = new Container();
  Action act = new Action();
  Token t = null;
  RegExprSpec_ res = new RegExprSpec_();
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = RegularExpression(c)
  // ModMMa 2012/09 : added for not generating the node creation within the callers (in RegExprSpec)
  [
    { n2 = new NodeSequence(1); }
    n4 = "!"
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    { n1.addNode(n2); }
  ]
  {
    res.rexp = (RegularExpression_)c.member;
    res.rexp.tpContext = p;
  }
  [
    {
      t = getToken(1);
    }
{ n6 = new NodeSequence(1); }
    n7 = Block(act.getActionTokens())
    { n6.addNode(n7); }
    {
      if (opt.getUserTokenManager())
        JavaCCErrors.warning(t, "Ignoring action in regular expression specification since option USER_TOKEN_MANAGER has been set to true.");
      if (res.rexp.private_rexp)
        JavaCCErrors.parse_error(t, "Actions are not permitted on private (#) regular expressions.");
    }
    { n5.addNode(n6); }
  ]
  [
    { n9 = new NodeSequence(2); }
    n11 = ":"
    { n10 = (NodeToken) n11; }
    { n9.addNode(n10); }
    n13 = < IDENTIFIER >
    { n12 = (NodeToken) n13; }
    { t = n13; }
    { n9.addNode(n12); }
    {
      res.nextState = t.image;
      if (res.rexp.private_rexp)
        JavaCCErrors.parse_error(t, "Lexical state changes are not permitted after private (#) regular expressions.");
    }
    { n8.addNode(n9); }
  ]
  {
    res.act = act;
    res.nsTok = t;
    p.respecs.add(res);
  }
  { jtbNode = new RegExprSpec(n0, n1, n5, n8); }
  { return jtbNode; }
}

ExpansionChoices ExpansionChoices(Container c1) :
{
  // --- JTB generated node declarations ---
  Expansion n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expansion n5 = null;
  ExpansionChoices jtbNode = null;
  // --- user BNFProduction java block ---
  boolean morethanone = false;
  Choice ch = new Choice();
  Container c2 = new Container();
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = Expansion(c1)
  (
    { n2 = new NodeSequence(2); }
    n4 = "|"
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = Expansion(c2)
    { n2.addNode(n5); }
    {
      if (morethanone) {
        ch.getChoices().add((Expansion_)c2.member);
        ((Expansion_)c2.member).parent = ch;
      } else {
        morethanone = true;
        ch = new Choice((Expansion_)c1.member);
        ((Expansion_)c1.member).parent = ch;
        ch.getChoices().add((Expansion_)c2.member);
        ((Expansion_)c2.member).parent = ch;
      }
    }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  {
    if (morethanone)
      c1.member = ch;
  }
  { jtbNode = new ExpansionChoices(n0, n1); }
  { return jtbNode; }
}

Expansion Expansion(Container c1) :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  LocalLookahead n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeList n9 = new NodeList();
  NodeSequence n10 = null;
  ExpansionUnit n11 = null;
  Expansion jtbNode = null;
  // --- user BNFProduction java block ---
  Sequence seq = new Sequence();
  Container c2 = new Container();
  Lookahead la = new Lookahead();
  Token t = getToken(1);
  seq.setLine(t.beginLine);
  seq.setColumn(t.beginColumn);
  la.setLine(t.beginLine);
  la.setColumn(t.beginColumn);
}
{
  // --- user BNFProduction ExpansionChoices ---
  {
    la.setAmount(opt.getLookahead());
    la.setLaExpansion(null);
    la.setExplicit(false);
  }
  (
    // note MMa 08/2023 : missing the LA in Expansion gives a JavaCC warning
    // Warning: Choice conflict involving two expansions at
    //     line 4810, column 5 and line 4898, column 5 respectively.
    //     A common prefix is: "!abc" <ID>
    //     Consider using a lookahead of 3 or more for earlier expansion.
    LOOKAHEAD( 1 )
    { n1 = new NodeSequence(4); }
    n3 = "LOOKAHEAD"
    { n2 = (NodeToken) n3; }
    { t = n3; }
    { n1.addNode(n2); }
    n5 = "("
    { n4 = (NodeToken) n5; }
    { n1.addNode(n4); }
    { Lookahead oldJtbrt_LocalLookahead_1 = jtbrt_LocalLookahead; }
    n6 = LocalLookahead()
    { la = jtbrt_LocalLookahead; }
    { jtbrt_LocalLookahead = oldJtbrt_LocalLookahead_1; }
    { n1.addNode(n6); }
    n8 = ")"
    { n7 = (NodeToken) n8; }
    { n1.addNode(n7); }
    {
      if (inLocalLA != 0 && la.getAmount() != 0)
        JavaCCErrors.warning(t, "Only semantic lookahead specifications within other lookahead specifications is considered.  Syntactic lookahead is ignored.");
    }
    { n0.addNode(n1); }
  )?
  {
    seq.units.add(la);
  }
  (
    LOOKAHEAD( 0, { notTailOfExpansionUnit() } )
    { n10 = new NodeSequence(1); }
    n11 = ExpansionUnit(c2)
    { n10.addNode(n11); }
    {
      seq.units.add((Expansion_)c2.member);
      ((Expansion_)c2.member).parent = seq;
      ((Expansion_)c2.member).ordinal = seq.units.size() - 1;
    }
    { n9.addNode(n10); }
  )+
  { n9.nodes.trimToSize(); }
  {
    if (la.getLaExpansion() == null)
      la.setLaExpansion(seq);
    c1.member = seq;
  }
  { jtbNode = new Expansion(n0, n9); }
  { return jtbNode; }
}

LocalLookahead LocalLookahead() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  IntegerLiteral n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeSequence n8 = null;
  ExpansionChoices n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeOptional n14 = new NodeOptional();
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeOptional n18 = null;
  NodeSequence n19 = null;
  Expression n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  LocalLookahead jtbNode = null;
  // --- user BNFProduction java block ---
  Lookahead la = new Lookahead();
  la.setExplicit(true);
  Token t = getToken(1);
  la.setLine(t.beginLine);
  la.setColumn(t.beginColumn);
  la.setLaExpansion(null);
  Container c = new Container();
  boolean commaAtEnd = false, emptyLA = true;
  int laAmount = 0;
  inLocalLA++;
}
{
  // --- user BNFProduction ExpansionChoices ---
  [
    /*
     * The lookahead of 1 is to turn off the warning message that lets us know that an expansion choice
     * can also start with an integer literal because a primary expression can do the same.
     * But we know that this is what we want.
     */
    LOOKAHEAD( 1 )
    { n1 = new NodeSequence(1); }
    { int oldJtbrt_IntegerLiteral_1 = jtbrt_IntegerLiteral; }
    n2 = IntegerLiteral()
    { laAmount = jtbrt_IntegerLiteral; }
    { jtbrt_IntegerLiteral = oldJtbrt_IntegerLiteral_1; }
    { n1.addNode(n2); }
    {
      emptyLA = false;
      la.setAmount(laAmount);
    }
    { n0.addNode(n1); }
  ]
  [
    LOOKAHEAD( 0, { !emptyLA && (getToken(1).kind != RPAREN) } )
    { n4 = new NodeSequence(1); }
    n6 = ","
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    {
      commaAtEnd = true;
    }
    { n3.addNode(n4); }
  ]
  [
    LOOKAHEAD( 0, { getToken(1).kind != RPAREN && getToken(1).kind != LBRACE } )
    { n8 = new NodeSequence(1); }
    n9 = ExpansionChoices(c)
    { n8.addNode(n9); }
    {
      emptyLA = false;
      commaAtEnd = false;
      la.setLaExpansion((Expansion_)c.member);
    }
    { n7.addNode(n8); }
  ]
  [
    LOOKAHEAD( 0, { !emptyLA && !commaAtEnd && (getToken(1).kind != RPAREN) } )
    { n11 = new NodeSequence(1); }
    n13 = ","
    { n12 = (NodeToken) n13; }
    { n11.addNode(n12); }
    {
      commaAtEnd = true;
    }
    { n10.addNode(n11); }
  ]
  [
    LOOKAHEAD( 0, { emptyLA || commaAtEnd } )
    { n18 = new NodeOptional(); }
    { n15 = new NodeSequence(3); }
    n17 = "{"
    { n16 = (NodeToken) n17; }
    { n15.addNode(n16); }
    // ModMMa 2020/10 : changed to optional
    [
      { n19 = new NodeSequence(1); }
      n20 = Expression(la.getActionTokens())
      { n19.addNode(n20); }
      { n18.addNode(n19); }
    ]
    { n15.addNode(n18); }
    n22 = "}"
    { n21 = (NodeToken) n22; }
    { n15.addNode(n21); }
    {
      if (emptyLA)
        la.setAmount(0);
    }
    { n14.addNode(n15); }
  ]
  { jtbNode = new LocalLookahead(n0, n3, n7, n10, n14); }
  {
    inLocalLA--;
    jtbrt_LocalLookahead = la;
  }
  { return jtbNode; }
}

ExpansionUnit ExpansionUnit(Container c) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  LocalLookahead n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  Block n10 = null;
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  ExpansionChoices n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeSequence n17 = null;
  ExpansionUnitTCF n18 = null;
  NodeSequence n19 = null;
  NodeOptional n20 = new NodeOptional();
  NodeSequence n21 = null;
  PrimaryExpression n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeChoice n25 = null;
  NodeSequence n26 = null;
  IdentifierAsString n27 = null;
  Arguments n28 = null;
  NodeOptional n29 = new NodeOptional();
  NodeSequence n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeSequence n33 = null;
  RegularExpression n34 = null;
  NodeOptional n35 = new NodeOptional();
  NodeSequence n36 = null;
  NodeToken n37 = null;
  Token n38 = null;
  NodeToken n39 = null;
  Token n40 = null;
  NodeOptional n41 = new NodeOptional();
  NodeSequence n42 = null;
  NodeToken n43 = null;
  Token n44 = null;
  NodeSequence n45 = null;
  NodeToken n46 = null;
  Token n47 = null;
  ExpansionChoices n48 = null;
  NodeToken n49 = null;
  Token n50 = null;
  NodeOptional n51 = new NodeOptional();
  NodeChoice n52 = null;
  NodeSequence n53 = null;
  NodeToken n54 = null;
  Token n55 = null;
  NodeSequence n56 = null;
  NodeToken n57 = null;
  Token n58 = null;
  NodeSequence n59 = null;
  NodeToken n60 = null;
  Token n61 = null;
  ExpansionUnit jtbNode = null;
  // --- user BNFProduction java block ---
  String name = null;
  List<Token> lhsTokens = new ArrayList<Token>();
  NonTerminal nt = null;
  Action act = null;
  Token t = null;
  Lookahead la = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    // note MMa 08/2023 : a missed LA in ExpansionUnit gives a JavaCC warning
    // Warning: Choice conflict in [...] construct at line 4813, column 5.
    //     Expansion nested within construct and expansion following construct
    //     have common prefixes, one of which is: "!abc"
    //     Consider using a lookahead of 2 or more for nested expansion.
    LOOKAHEAD( 1 )
    { n1 = new NodeSequence(4); }
    n3 = "LOOKAHEAD"
    { n2 = (NodeToken) n3; }
    { // We give this priority over primary expressions which use LOOKAHEAD as the name of its identifier
    t = n3; }
    { n1.addNode(n2); }
    n5 = "("
    { n4 = (NodeToken) n5; }
    { n1.addNode(n4); }
    { Lookahead oldJtbrt_LocalLookahead_1 = jtbrt_LocalLookahead; }
    n6 = LocalLookahead()
    { la = jtbrt_LocalLookahead; }
    { jtbrt_LocalLookahead = oldJtbrt_LocalLookahead_1; }
    { n1.addNode(n6); }
    n8 = ")"
    { n7 = (NodeToken) n8; }
    { n1.addNode(n7); }
    { n0 = new NodeChoice(n1, 0, 6); }
    {
      // Now set the la_expansion field of la with a dummy expansion (we use EOF)
      la.setLaExpansion(new REndOfFile());
      // Create a singleton choice with an empty action
      Choice ch = new Choice(t);
      Sequence seq = new Sequence(t, la);
      la.parent = seq;
      la.ordinal = 0;
      act = new Action();
      act.setLine(t.beginLine);
      act.setColumn(t.beginColumn);
      seq.units.add(act);
      act.parent = seq;
      act.ordinal = 1;
      ch.getChoices().add(seq);
      seq.parent = ch;
      seq.ordinal = 0;
      if (la.getAmount() != 0)
        if (la.getActionTokens().size() != 0)
          JavaCCErrors.warning(t, "Encountered LOOKAHEAD(...) at a non-choice location.  Only semantic lookahead will be considered here.");
        else
          JavaCCErrors.warning(t, "Encountered LOOKAHEAD(...) at a non-choice location.  This will be ignored.");
      c.member = ch;
    }
  |
    {
      act = new Action();
      t = getToken(1);
      act.setLine(t.beginLine);
      act.setColumn(t.beginColumn);
      inAction = true;
    }
{ n9 = new NodeSequence(1); }
    n10 = Block(act.getActionTokens())
    { n9.addNode(n10); }
    { n0 = new NodeChoice(n9, 1, 6); }
    {
      inAction = false;
      if (inLocalLA != 0)
        JavaCCErrors.warning(t, "Action within lookahead specification will be ignored.");
      c.member = act;
    }
  |
    { n11 = new NodeSequence(3); }
    n13 = "["
    { n12 = (NodeToken) n13; }
    { t = n13; }
    { n11.addNode(n12); }
    n14 = ExpansionChoices(c)
    { n11.addNode(n14); }
    n16 = "]"
    { n15 = (NodeToken) n16; }
    { n11.addNode(n15); }
    { n0 = new NodeChoice(n11, 2, 6); }
    {
      c.member = new ZeroOrOne(t, (Expansion_)c.member);
    }
  |
    { n17 = new NodeSequence(1); }
    n18 = ExpansionUnitTCF(c)
    { n17.addNode(n18); }
    { n0 = new NodeChoice(n17, 3, 6); }
  |
    LOOKAHEAD( IdentifierAsString()
  |
    StringLiteral()
  |
    "<"
  |
    PrimaryExpression()
    "=" )
    { n19 = new NodeSequence(2); }
    [
      LOOKAHEAD( PrimaryExpression()
      "=" )
      {
        Token first = getToken(1);
      }
{ n21 = new NodeSequence(2); }
      n22 = PrimaryExpression()
      { n21.addNode(n22); }
      {
        Token last = getToken(0);
      }
      n24 = "="
      { n23 = (NodeToken) n24; }
      { n21.addNode(n23); }
      {
        t = first;
        while (true) {
          lhsTokens.add(t);
          if (t == last)
            break;
          t = t.next;
        } 
      }
      { n20.addNode(n21); }
    ]
    (
      (
        // ModMMa 2012/07 : here inside we have IAS | RE instead of RE | IAS in JavaCC1.5.jjt
        // and an extra LOOKAHEAD
        // ModMMa 2017/02 removed LOOKAHEAD
        //    LOOKAHEAD(IdentifierAsString() "(")
        {
          nt = new NonTerminal();
          t = getToken(1);
          nt.setLine(t.beginLine);
          nt.setColumn(t.beginColumn);
          nt.setLhsTokens(lhsTokens);
        }
{ n26 = new NodeSequence(3); }
        { String oldJtbrt_IdentifierAsString_2 = jtbrt_IdentifierAsString; }
        n27 = IdentifierAsString()
        { name = jtbrt_IdentifierAsString; }
        { jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_2; }
        { n26.addNode(n27); }
        n28 = Arguments(nt.getArgumentTokens())
        { n26.addNode(n28); }
        {
          nt.setName(name);
          c.member = nt;
        }
        // ModMMa 2012/09 : added for not generating the node creation within the callers (in ExpansionUnit IdentifierAsString)
        [
          { n30 = new NodeSequence(1); }
          n32 = "!"
          { n31 = (NodeToken) n32; }
          { n30.addNode(n31); }
          { n29.addNode(n30); }
        ]
        { n26.addNode(n29); }
        { n25 = new NodeChoice(n26, 0, 2); }
      |
        { n33 = new NodeSequence(3); }
        n34 = RegularExpression(c)
        { n33.addNode(n34); }
        {
          ((RegularExpression_)(c.member)).lhsTokens = lhsTokens;
          add_inline_regexpr((RegularExpression_)(c.member));
        }
        [
          { n36 = new NodeSequence(2); }
          // ModMMa 2022/10 : looks this does not correspond to any real meaningful use, could disappear
          n38 = "."
          { n37 = (NodeToken) n38; }
          { n36.addNode(n37); }
          n40 = < IDENTIFIER >
          { n39 = (NodeToken) n40; }
          { t = n40; }
          { n36.addNode(n39); }
          {
            ((RegularExpression_)(c.member)).rhsToken = t;
          }
          { n35.addNode(n36); }
        ]
        { n33.addNode(n35); }
        // ModMMa 2012/09 : added for not generating the node creation within the callers (in ExpansionUnit RegularExpression)
        [
          { n42 = new NodeSequence(1); }
          n44 = "!"
          { n43 = (NodeToken) n44; }
          { n42.addNode(n43); }
          { n41.addNode(n42); }
        ]
        { n33.addNode(n41); }
        { n25 = new NodeChoice(n33, 1, 2); }
      )
    )
    { n19.addNode(n25); }
    { n0 = new NodeChoice(n19, 4, 6); }
  |
    { n45 = new NodeSequence(4); }
    n47 = "("
    { n46 = (NodeToken) n47; }
    { t = n47; }
    { n45.addNode(n46); }
    n48 = ExpansionChoices(c)
    { n45.addNode(n48); }
    n50 = ")"
    { n49 = (NodeToken) n50; }
    { n45.addNode(n49); }
    (
      (
        { n53 = new NodeSequence(1); }
        n55 = "+"
        { n54 = (NodeToken) n55; }
        { n53.addNode(n54); }
        {
          c.member = new OneOrMore(t, (Expansion_)c.member);
        }
        { n52 = new NodeChoice(n53, 0, 3); }
      |
        { n56 = new NodeSequence(1); }
        n58 = "*"
        { n57 = (NodeToken) n58; }
        { n56.addNode(n57); }
        {
          c.member = new ZeroOrMore(t, (Expansion_)c.member);
        }
        { n52 = new NodeChoice(n56, 1, 3); }
      |
        { n59 = new NodeSequence(1); }
        n61 = "?"
        { n60 = (NodeToken) n61; }
        { n59.addNode(n60); }
        {
          c.member = new ZeroOrOne(t, (Expansion_)c.member);
        }
        { n52 = new NodeChoice(n59, 2, 3); }
      )
      { n51.addNode(n52); }
    )?
    { n45.addNode(n51); }
    { n0 = new NodeChoice(n45, 5, 6); }
  )
  { jtbNode = new ExpansionUnit(n0); }
  { return jtbNode; }
}

ExpansionUnitTCF ExpansionUnitTCF(Container c) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  ExpansionChoices n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeListOptional n7 = new NodeListOptional();
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeListOptional n13 = null;
  NodeSequence n14 = null;
  Annotation n15 = null;
  NodeOptional n16 = null;
  NodeSequence n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  Name n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  Block n25 = null;
  NodeOptional n26 = new NodeOptional();
  NodeSequence n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  Block n30 = null;
  ExpansionUnitTCF jtbNode = null;
  // --- user BNFProduction java block ---
  Token t = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  {
    Container expch = new Container();
    List<List<Token>> types = new ArrayList<List<Token>>();
    List<Token> ids = new ArrayList<Token>();
    List<List<Token>> catchblks = new ArrayList<List<Token>>();
    List<Token> finallyblk = null;
    List<Token> vec = new ArrayList<Token>();
    Token t0 = null;
  }
  n1 = "try"
  { n0 = (NodeToken) n1; }
  { t0 = n1; }
  n3 = "{"
  { n2 = (NodeToken) n3; }
  n4 = ExpansionChoices(expch)
  n6 = "}"
  { n5 = (NodeToken) n6; }
  (
    { n13 = new NodeListOptional(); }
    { n16 = new NodeOptional(); }
    { n8 = new NodeSequence(8); }
    // ModMMa 2017/05 added optional final (but JavaCC does not yet accepts it)
    // ModMMa 2023/08 added optional annotations (but JavaCC does not yet accepts them)
    //    "catch" "(" ["final"] Name(vec) t = < IDENTIFIER > ")"
    n10 = "catch"
    { n9 = (NodeToken) n10; }
    { n8.addNode(n9); }
    n12 = "("
    { n11 = (NodeToken) n12; }
    { n8.addNode(n11); }
    (
      { n14 = new NodeSequence(1); }
      n15 = Annotation()
      { n14.addNode(n15); }
      { n13.addNode(n14); }
    )*
    { n13.nodes.trimToSize(); }
    { n8.addNode(n13); }
    [
      { n17 = new NodeSequence(1); }
      n19 = "final"
      { n18 = (NodeToken) n19; }
      { n17.addNode(n18); }
      { n16.addNode(n17); }
    ]
    { n8.addNode(n16); }
    n20 = Name(vec)
    { n8.addNode(n20); }
    n22 = < IDENTIFIER >
    { n21 = (NodeToken) n22; }
    { t = n22; }
    { n8.addNode(n21); }
    n24 = ")"
    { n23 = (NodeToken) n24; }
    { n8.addNode(n23); }
    {
      types.add(vec);
      ids.add(t);
      vec = new ArrayList<Token>();
      inAction = true;
    }
    n25 = Block(vec)
    { n8.addNode(n25); }
    {
      inAction = false;
      catchblks.add(vec);
      vec = new ArrayList<Token>();
    }
    { n7.addNode(n8); }
  )*
  { n7.nodes.trimToSize(); }
  [
    {
      inAction = true;
    }
{ n27 = new NodeSequence(2); }
    n29 = "finally"
    { n28 = (NodeToken) n29; }
    { n27.addNode(n28); }
    n30 = Block(vec)
    { n27.addNode(n30); }
    {
      inAction = false;
      finallyblk = vec;
    }
    { n26.addNode(n27); }
  ]
  {
    makeTryBlock(t0, c, expch, types, ids, catchblks, finallyblk);
  }
  { jtbNode = new ExpansionUnitTCF(n0, n2, n4, n5, n7, n26); }
  { return jtbNode; }
}

RegularExpression RegularExpression(Container c) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  StringLiteral n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  NodeOptional n8 = null;
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  IdentifierAsString n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  ComplexRegularExpressionChoices n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeSequence n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  IdentifierAsString n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeSequence n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  RegularExpression jtbNode = null;
  // --- user BNFProduction java block ---
  REndOfFile ef = null;
  String image = null;
  boolean private_rexp = false;
  Token t = getToken(1);
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(1); }
    { String oldJtbrt_StringLiteral_1 = jtbrt_StringLiteral; }
    n2 = StringLiteral()
    { image = jtbrt_StringLiteral; }
    { jtbrt_StringLiteral = oldJtbrt_StringLiteral_1; }
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 4); }
    {
      c.member = new RStringLiteral(t, image);
    }
  |
    LOOKAHEAD( 3 )
    {
      image = "";
    }
{ n3 = new NodeSequence(4); }
    // ModMMa 2012/07 : no definition needed (otherwise it supersedes LT)
    //    < LANGLE : "<" >
    n5 = "<"
    { n4 = (NodeToken) n5; }
    { n3.addNode(n4); }
    [
      { n8 = new NodeOptional(); }
      { n7 = new NodeSequence(3); }
      [
        { n9 = new NodeSequence(1); }
        n11 = "#"
        { n10 = (NodeToken) n11; }
        { n9.addNode(n10); }
        {
          private_rexp = true;
        }
        { n8.addNode(n9); }
      ]
      { n7.addNode(n8); }
      { String oldJtbrt_IdentifierAsString_2 = jtbrt_IdentifierAsString; }
      n12 = IdentifierAsString()
      { image = jtbrt_IdentifierAsString; }
      { jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_2; }
      { n7.addNode(n12); }
      n14 = ":"
      { n13 = (NodeToken) n14; }
      { n7.addNode(n13); }
      { n6.addNode(n7); }
    ]
    { n3.addNode(n6); }
    n15 = ComplexRegularExpressionChoices(c)
    { n3.addNode(n15); }
    // ModMMa 2012/07 : no definition needed (otherwise it supersedes GT)
    //    < RANGLE : ">" >
    n17 = ">"
    { n16 = (NodeToken) n17; }
    { n3.addNode(n16); }
    { n0 = new NodeChoice(n3, 1, 4); }
    {
      RegularExpression_ re = null;
      if (c.member instanceof RJustName) {
        RSequence seq = new RSequence();
        seq.units.add((RegularExpression_)c.member);
        re = seq;
      } else
        re = (RegularExpression_)c.member;
      re.label = image;
      re.private_rexp = private_rexp;
      re.setLine(t.beginLine);
      re.setColumn(t.beginColumn);
      c.member = re;
    }
  |
    LOOKAHEAD( 2 )
    { n18 = new NodeSequence(3); }
    n20 = "<"
    { n19 = (NodeToken) n20; }
    { n18.addNode(n19); }
    { String oldJtbrt_IdentifierAsString_3 = jtbrt_IdentifierAsString; }
    n21 = IdentifierAsString()
    { image = jtbrt_IdentifierAsString; }
    { jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_3; }
    { n18.addNode(n21); }
    n23 = ">"
    { n22 = (NodeToken) n23; }
    { n18.addNode(n22); }
    { n0 = new NodeChoice(n18, 2, 4); }
    {
      c.member = new RJustName(t, image);
    }
  |
    { n24 = new NodeSequence(3); }
    n26 = "<"
    { n25 = (NodeToken) n26; }
    { n24.addNode(n25); }
    n28 = "EOF"
    { n27 = (NodeToken) n28; }
    { n24.addNode(n27); }
    n30 = ">"
    { n29 = (NodeToken) n30; }
    { n24.addNode(n29); }
    { n0 = new NodeChoice(n24, 3, 4); }
    {
      ef = new REndOfFile();
      ef.setLine(t.beginLine);
      ef.setColumn(t.beginColumn);
      ef.ordinal = 0;
      c.member = ef;
    }
  )
  { jtbNode = new RegularExpression(n0); }
  { return jtbNode; }
}

ComplexRegularExpressionChoices ComplexRegularExpressionChoices(Container c1) :
{
  // --- JTB generated node declarations ---
  ComplexRegularExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ComplexRegularExpression n5 = null;
  ComplexRegularExpressionChoices jtbNode = null;
  // --- user BNFProduction java block ---
  boolean morethanone = false;
  RChoice ch = new RChoice();
  Container c2 = new Container();
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = ComplexRegularExpression(c1)
  (
    { n2 = new NodeSequence(2); }
    n4 = "|"
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = ComplexRegularExpression(c2)
    { n2.addNode(n5); }
    {
      if (morethanone)
        ch.getChoices().add((RegularExpression_)c2.member);
      else {
        morethanone = true;
        ch = new RChoice();
        ch.setLine(((RegularExpression_)c1.member).getLine());
        ch.setColumn(((RegularExpression_)c1.member).getColumn());
        ch.getChoices().add((RegularExpression_)c1.member);
        ch.getChoices().add((RegularExpression_)c2.member);
      }
    }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  {
    if (morethanone)
      c1.member = ch;
  }
  { jtbNode = new ComplexRegularExpressionChoices(n0, n1); }
  { return jtbNode; }
}

ComplexRegularExpression ComplexRegularExpression(Container c1) :
{
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  NodeSequence n1 = null;
  ComplexRegularExpressionUnit n2 = null;
  ComplexRegularExpression jtbNode = null;
  // --- user BNFProduction java block ---
  int count = 0;
  RSequence seq = new RSequence();
  Container c2 = new Container();
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(1); }
    n2 = ComplexRegularExpressionUnit(c2)
    { n1.addNode(n2); }
    {
      count++;
      if (count == 1)
        c1.member = c2.member;
      // if count does not go beyond 1, we are done.
      else
        if (count == 2) {
          // more than 1, so create a sequence.
          seq = new RSequence();
          seq.setLine(((RegularExpression_)c1.member).getLine());
          seq.setColumn(((RegularExpression_)c1.member).getColumn());
          seq.units.add((RegularExpression_)c1.member);
          seq.units.add((RegularExpression_)c2.member);
        } else
          seq.units.add((RegularExpression_)c2.member);
    }
    { n0.addNode(n1); }
  )+
  { n0.nodes.trimToSize(); }
  {
    if (count > 1)
      c1.member = seq;
  }
  { jtbNode = new ComplexRegularExpression(n0); }
  { return jtbNode; }
}

ComplexRegularExpressionUnit ComplexRegularExpressionUnit(Container c) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  StringLiteral n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  IdentifierAsString n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  CharacterList n10 = null;
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  ComplexRegularExpressionChoices n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeOptional n17 = new NodeOptional();
  NodeChoice n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeSequence n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeSequence n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeSequence n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  IntegerLiteral n31 = null;
  NodeOptional n32 = null;
  NodeSequence n33 = null;
  NodeToken n34 = null;
  Token n35 = null;
  NodeOptional n36 = null;
  NodeSequence n37 = null;
  IntegerLiteral n38 = null;
  NodeToken n39 = null;
  Token n40 = null;
  ComplexRegularExpressionUnit jtbNode = null;
  // --- user BNFProduction java block ---
  String image = null;
  Token t = getToken(1);
  int r1 = 0, r2 = -1;
  boolean hasMax = false;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(1); }
    { String oldJtbrt_StringLiteral_1 = jtbrt_StringLiteral; }
    n2 = StringLiteral()
    { image = jtbrt_StringLiteral; }
    { jtbrt_StringLiteral = oldJtbrt_StringLiteral_1; }
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 4); }
    {
      c.member = new RStringLiteral(t, image);
    }
  |
    { n3 = new NodeSequence(3); }
    n5 = "<"
    { n4 = (NodeToken) n5; }
    { n3.addNode(n4); }
    { String oldJtbrt_IdentifierAsString_2 = jtbrt_IdentifierAsString; }
    n6 = IdentifierAsString()
    { image = jtbrt_IdentifierAsString; }
    { jtbrt_IdentifierAsString = oldJtbrt_IdentifierAsString_2; }
    { n3.addNode(n6); }
    n8 = ">"
    { n7 = (NodeToken) n8; }
    { n3.addNode(n7); }
    { n0 = new NodeChoice(n3, 1, 4); }
    {
      c.member = new RJustName(t, image);
    }
  |
    { n9 = new NodeSequence(1); }
    n10 = CharacterList(c)
    { n9.addNode(n10); }
    { n0 = new NodeChoice(n9, 2, 4); }
  |
    { n11 = new NodeSequence(4); }
    n13 = "("
    { n12 = (NodeToken) n13; }
    { n11.addNode(n12); }
    n14 = ComplexRegularExpressionChoices(c)
    { n11.addNode(n14); }
    n16 = ")"
    { n15 = (NodeToken) n16; }
    { n11.addNode(n15); }
    (
      { n32 = new NodeOptional(); }
      (
        { n19 = new NodeSequence(1); }
        n21 = "+"
        { n20 = (NodeToken) n21; }
        { n19.addNode(n20); }
        {
          c.member = new ROneOrMore(t, (RegularExpression_)c.member);
        }
        { n18 = new NodeChoice(n19, 0, 4); }
      |
        { n22 = new NodeSequence(1); }
        n24 = "*"
        { n23 = (NodeToken) n24; }
        { n22.addNode(n23); }
        {
          c.member = new RZeroOrMore(t, (RegularExpression_)c.member);
        }
        { n18 = new NodeChoice(n22, 1, 4); }
      |
        { n25 = new NodeSequence(1); }
        n27 = "?"
        { n26 = (NodeToken) n27; }
        { n25.addNode(n26); }
        {
          RZeroOrOne zorexp = new RZeroOrOne();
          zorexp.setLine(t.beginLine);
          zorexp.setColumn(t.beginColumn);
          zorexp.regexpr = (RegularExpression_)c.member;
          c.member = zorexp;
        }
        { n18 = new NodeChoice(n25, 2, 4); }
      |
        { n28 = new NodeSequence(4); }
        n30 = "{"
        { n29 = (NodeToken) n30; }
        { n28.addNode(n29); }
        { int oldJtbrt_IntegerLiteral_3 = jtbrt_IntegerLiteral; }
        n31 = IntegerLiteral()
        { r1 = jtbrt_IntegerLiteral; }
        { jtbrt_IntegerLiteral = oldJtbrt_IntegerLiteral_3; }
        { n28.addNode(n31); }
        [
          { n36 = new NodeOptional(); }
          { n33 = new NodeSequence(2); }
          n35 = ","
          { n34 = (NodeToken) n35; }
          { n33.addNode(n34); }
          {
            hasMax = true;
          }
          [
            { n37 = new NodeSequence(1); }
            { int oldJtbrt_IntegerLiteral_4 = jtbrt_IntegerLiteral; }
            n38 = IntegerLiteral()
            { r2 = jtbrt_IntegerLiteral; }
            { jtbrt_IntegerLiteral = oldJtbrt_IntegerLiteral_4; }
            { n37.addNode(n38); }
            { n36.addNode(n37); }
          ]
          { n33.addNode(n36); }
          { n32.addNode(n33); }
        ]
        { n28.addNode(n32); }
        n40 = "}"
        { n39 = (NodeToken) n40; }
        { n28.addNode(n39); }
        {
          RRepetitionRange rrrexp = new RRepetitionRange();
          rrrexp.setLine(t.beginLine);
          rrrexp.setColumn(t.beginColumn);
          rrrexp.min = r1;
          rrrexp.max = r2;
          rrrexp.hasMax = hasMax;
          rrrexp.regexpr = (RegularExpression_)c.member;
          c.member = rrrexp;
        }
        { n18 = new NodeChoice(n28, 3, 4); }
      )
      { n17.addNode(n18); }
    )?
    { n11.addNode(n17); }
    { n0 = new NodeChoice(n11, 3, 4); }
  )
  { jtbNode = new ComplexRegularExpressionUnit(n0); }
  { return jtbNode; }
}

CharacterList CharacterList(Container c1) :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  CharacterDescriptor n8 = null;
  NodeListOptional n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  CharacterDescriptor n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  CharacterList jtbNode = null;
  // --- user BNFProduction java block ---
  RCharacterList chlist = new RCharacterList();
  Token t = getToken(1);
  chlist.setLine(t.beginLine);
  chlist.setColumn(t.beginColumn);
  Container c2 = new Container();
}
{
  // --- user BNFProduction ExpansionChoices ---
  [
    { n1 = new NodeSequence(1); }
    n3 = "~"
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    {
      chlist.negated_list = true;
    }
    { n0.addNode(n1); }
  ]
  n5 = "["
  { n4 = (NodeToken) n5; }
  [
    { n9 = new NodeListOptional(); }
    { n7 = new NodeSequence(2); }
    n8 = CharacterDescriptor(c2)
    { n7.addNode(n8); }
    {
      chlist.descriptors.add(c2.member);
    }
    (
      { n10 = new NodeSequence(2); }
      n12 = ","
      { n11 = (NodeToken) n12; }
      { n10.addNode(n11); }
      n13 = CharacterDescriptor(c2)
      { n10.addNode(n13); }
      {
        chlist.descriptors.add(c2.member);
      }
      { n9.addNode(n10); }
    )*
    { n9.nodes.trimToSize(); }
    { n7.addNode(n9); }
    { n6.addNode(n7); }
  ]
  n15 = "]"
  { n14 = (NodeToken) n15; }
  {
    c1.member = chlist;
  }
  { jtbNode = new CharacterList(n0, n4, n6, n14); }
  { return jtbNode; }
}

CharacterDescriptor CharacterDescriptor(Container c) :
{
  // --- JTB generated node declarations ---
  StringLiteral n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  StringLiteral n5 = null;
  CharacterDescriptor jtbNode = null;
  // --- user BNFProduction java block ---
  char c1 = ' ';
  char c2 = ' ';
  boolean isrange = false;
  String imageL = null;
  String imageR = null;
  Token t = getToken(1);
}
{
  // --- user BNFProduction ExpansionChoices ---
  { String oldJtbrt_StringLiteral_1 = jtbrt_StringLiteral; }
  n0 = StringLiteral()
  { imageL = jtbrt_StringLiteral; }
  { jtbrt_StringLiteral = oldJtbrt_StringLiteral_1; }
  {
    c1 = character_descriptor_assign(getToken(0), imageL);
  }
  [
    { n2 = new NodeSequence(2); }
    n4 = "-"
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    { String oldJtbrt_StringLiteral_2 = jtbrt_StringLiteral; }
    n5 = StringLiteral()
    { imageR = jtbrt_StringLiteral; }
    { jtbrt_StringLiteral = oldJtbrt_StringLiteral_2; }
    { n2.addNode(n5); }
    {
      isrange = true;
      c2 = character_descriptor_assign(getToken(0), imageR, imageL);
    }
    { n1.addNode(n2); }
  ]
  {
    if (isrange) {
      CharacterRange cr = new CharacterRange();
      cr.setLine(t.beginLine);
      cr.setColumn(t.beginColumn);
      cr.setLeft(c1);
      cr.setRight(c2);
      c.member = cr;
    } else {
      SingleCharacter sc = new SingleCharacter();
      sc.setLine(t.beginLine);
      sc.setColumn(t.beginColumn);
      sc.ch = c1;
      c.member = sc;
    }
  }
  { jtbNode = new CharacterDescriptor(n0, n1); }
  { return jtbNode; }
}

IdentifierAsString IdentifierAsString() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  IdentifierAsString jtbNode = null;
  // --- user BNFProduction java block ---
  Token t = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = < IDENTIFIER >
  { n0 = (NodeToken) n1; }
  { t = n1; }
  { jtbNode = new IdentifierAsString(n0); }
  {
    jtbrt_IdentifierAsString = t.image;
  }
  { return jtbNode; }
}

JavaIdentifier JavaIdentifier() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeSequence n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeSequence n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeSequence n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeSequence n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeSequence n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  NodeSequence n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  JavaIdentifier jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    (
      { n1 = new NodeSequence(1); }
      n3 = < IDENTIFIER >
      { n2 = (NodeToken) n3; }
      { n1.addNode(n2); }
      { n0 = new NodeChoice(n1, 0, 12); }
    // | "options"
    |
      { n4 = new NodeSequence(1); }
      n6 = "LOOKAHEAD"
      { n5 = (NodeToken) n6; }
      { n4.addNode(n5); }
      { n0 = new NodeChoice(n4, 1, 12); }
    |
      { n7 = new NodeSequence(1); }
      n9 = "IGNORE_CASE"
      { n8 = (NodeToken) n9; }
      { n7.addNode(n8); }
      { n0 = new NodeChoice(n7, 2, 12); }
    |
      { n10 = new NodeSequence(1); }
      n12 = "PARSER_BEGIN"
      { n11 = (NodeToken) n12; }
      { n10.addNode(n11); }
      { n0 = new NodeChoice(n10, 3, 12); }
    |
      { n13 = new NodeSequence(1); }
      n15 = "PARSER_END"
      { n14 = (NodeToken) n15; }
      { n13.addNode(n14); }
      { n0 = new NodeChoice(n13, 4, 12); }
    |
      { n16 = new NodeSequence(1); }
      n18 = "JAVACODE"
      { n17 = (NodeToken) n18; }
      { n16.addNode(n17); }
      { n0 = new NodeChoice(n16, 5, 12); }
    |
      { n19 = new NodeSequence(1); }
      n21 = "TOKEN"
      { n20 = (NodeToken) n21; }
      { n19.addNode(n20); }
      { n0 = new NodeChoice(n19, 6, 12); }
    |
      { n22 = new NodeSequence(1); }
      n24 = "SPECIAL_TOKEN"
      { n23 = (NodeToken) n24; }
      { n22.addNode(n23); }
      { n0 = new NodeChoice(n22, 7, 12); }
    |
      { n25 = new NodeSequence(1); }
      n27 = "MORE"
      { n26 = (NodeToken) n27; }
      { n25.addNode(n26); }
      { n0 = new NodeChoice(n25, 8, 12); }
    |
      { n28 = new NodeSequence(1); }
      n30 = "SKIP"
      { n29 = (NodeToken) n30; }
      { n28.addNode(n29); }
      { n0 = new NodeChoice(n28, 9, 12); }
    |
      { n31 = new NodeSequence(1); }
      n33 = "TOKEN_MGR_DECLS"
      { n32 = (NodeToken) n33; }
      { n31.addNode(n32); }
      { n0 = new NodeChoice(n31, 10, 12); }
    |
      { n34 = new NodeSequence(1); }
      n36 = "EOF"
      { n35 = (NodeToken) n36; }
      { n34.addNode(n35); }
      { n0 = new NodeChoice(n34, 11, 12); }
    )
  )
  { jtbNode = new JavaIdentifier(n0); }
  {
    Token retval = getToken(0);
    retval.kind = IDENTIFIER;
    jtbrt_JavaIdentifier = retval;
  }
  { return jtbNode; }
}

CompilationUnit CompilationUnit() :
/* The <EOF> is deleted since the compilation unit is embedded within grammar code */
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  PackageDeclaration n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  ImportDeclaration n5 = null;
  NodeListOptional n6 = new NodeListOptional();
  NodeSequence n7 = null;
  TypeDeclaration n8 = null;
  CompilationUnit jtbNode = null;
  // --- user BNFProduction java block ---
  set_initial_cu_token(getToken(1));
}
{
  // --- user BNFProduction ExpansionChoices ---
  [
    { n1 = new NodeSequence(1); }
    // ModMMa 2012/07 : fixed grammar
    // LOOKAHEAD((Annotation())* "package")
    n2 = PackageDeclaration()
    { n1.addNode(n2); }
    { n0.addNode(n1); }
  ]
  (
    { n4 = new NodeSequence(1); }
    n5 = ImportDeclaration()
    { n4.addNode(n5); }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  (
    { n7 = new NodeSequence(1); }
    n8 = TypeDeclaration()
    { n7.addNode(n8); }
    { n6.addNode(n7); }
  )*
  { n6.nodes.trimToSize(); }
  {
    insertionpointerrors(getToken(1));
  }
  { jtbNode = new CompilationUnit(n0, n3, n6); }
  { return jtbNode; }
}

PackageDeclaration PackageDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Name n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  PackageDeclaration jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  // ModMMa 2012/07 : fixed grammar : only at most one Annotation is permitted,
  // and must be in package-info.java, so we should not encounter it in the parsed file
  // Modifiers() "package" Name(null) ";"
  n1 = "package"
  { n0 = (NodeToken) n1; }
  { String oldJtbrt_Name_1 = jtbrt_Name; }
  n2 = Name(null)
  { // ModMMa 2023/07 : added assignment
  grammarPackage = jtbrt_Name; }
  { jtbrt_Name = oldJtbrt_Name_1; }
  n4 = ";"
  { n3 = (NodeToken) n4; }
  { jtbNode = new PackageDeclaration(n0, n2, n3); }
  { return jtbNode; }
}

ImportDeclaration ImportDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Name n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  ImportDeclaration jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "import"
  { n0 = (NodeToken) n1; }
  [
    { n3 = new NodeSequence(1); }
    n5 = "static"
    { n4 = (NodeToken) n5; }
    { n3.addNode(n4); }
    { n2.addNode(n3); }
  ]
  n6 = Name(null)
  [
    { n8 = new NodeSequence(2); }
    n10 = "."
    { n9 = (NodeToken) n10; }
    { n8.addNode(n9); }
    n12 = "*"
    { n11 = (NodeToken) n12; }
    { n8.addNode(n11); }
    { n7.addNode(n8); }
  ]
  n14 = ";"
  { n13 = (NodeToken) n14; }
  { jtbNode = new ImportDeclaration(n0, n2, n6, n7, n13); }
  { return jtbNode; }
}

Modifiers Modifiers() :
{
  // --- JTB generated node declarations ---
  NodeListOptional n0 = new NodeListOptional();
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeSequence n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeSequence n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeSequence n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeSequence n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeSequence n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeSequence n33 = null;
  NodeToken n34 = null;
  Token n35 = null;
  NodeSequence n36 = null;
  Annotation n37 = null;
  Modifiers jtbNode = null;
  // --- user BNFProduction java block ---
  int modifiers = 0;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    LOOKAHEAD( 2 )
    { n1 = new NodeSequence(1); }
    (
      (
        { n3 = new NodeSequence(1); }
        n5 = "public"
        { n4 = (NodeToken) n5; }
        { n3.addNode(n4); }
        {
          modifiers |= ModifierSet.M_PUBLIC;
        }
        { n2 = new NodeChoice(n3, 0, 12); }
      |
        { n6 = new NodeSequence(1); }
        n8 = "static"
        { n7 = (NodeToken) n8; }
        { n6.addNode(n7); }
        {
          modifiers |= ModifierSet.M_STATIC;
        }
        { n2 = new NodeChoice(n6, 1, 12); }
      |
        { n9 = new NodeSequence(1); }
        n11 = "protected"
        { n10 = (NodeToken) n11; }
        { n9.addNode(n10); }
        {
          modifiers |= ModifierSet.M_PROTECTED;
        }
        { n2 = new NodeChoice(n9, 2, 12); }
      |
        { n12 = new NodeSequence(1); }
        n14 = "private"
        { n13 = (NodeToken) n14; }
        { n12.addNode(n13); }
        {
          modifiers |= ModifierSet.M_PRIVATE;
        }
        { n2 = new NodeChoice(n12, 3, 12); }
      |
        { n15 = new NodeSequence(1); }
        n17 = "final"
        { n16 = (NodeToken) n17; }
        { n15.addNode(n16); }
        {
          modifiers |= ModifierSet.M_FINAL;
        }
        { n2 = new NodeChoice(n15, 4, 12); }
      |
        { n18 = new NodeSequence(1); }
        n20 = "abstract"
        { n19 = (NodeToken) n20; }
        { n18.addNode(n19); }
        {
          modifiers |= ModifierSet.M_ABSTRACT;
        }
        { n2 = new NodeChoice(n18, 5, 12); }
      |
        { n21 = new NodeSequence(1); }
        n23 = "synchronized"
        { n22 = (NodeToken) n23; }
        { n21.addNode(n22); }
        {
          modifiers |= ModifierSet.M_SYNCHRONIZED;
        }
        { n2 = new NodeChoice(n21, 6, 12); }
      |
        { n24 = new NodeSequence(1); }
        n26 = "native"
        { n25 = (NodeToken) n26; }
        { n24.addNode(n25); }
        {
          modifiers |= ModifierSet.M_NATIVE;
        }
        { n2 = new NodeChoice(n24, 7, 12); }
      |
        { n27 = new NodeSequence(1); }
        n29 = "transient"
        { n28 = (NodeToken) n29; }
        { n27.addNode(n28); }
        {
          modifiers |= ModifierSet.M_TRANSIENT;
        }
        { n2 = new NodeChoice(n27, 8, 12); }
      |
        { n30 = new NodeSequence(1); }
        n32 = "volatile"
        { n31 = (NodeToken) n32; }
        { n30.addNode(n31); }
        {
          modifiers |= ModifierSet.M_VOLATILE;
        }
        { n2 = new NodeChoice(n30, 9, 12); }
      |
        { n33 = new NodeSequence(1); }
        n35 = "strictfp"
        { n34 = (NodeToken) n35; }
        { n33.addNode(n34); }
        {
          modifiers |= ModifierSet.M_STRICTFP;
        }
        { n2 = new NodeChoice(n33, 10, 12); }
      |
        { n36 = new NodeSequence(1); }
        n37 = Annotation()
        { n36.addNode(n37); }
        { n2 = new NodeChoice(n36, 11, 12); }
      )
    )
    { n1.addNode(n2); }
    { n0.addNode(n1); }
  )*
  { n0.nodes.trimToSize(); }
  {
    jtbrt_Modifiers = modifiers;
  }
  { jtbNode = new Modifiers(n0); }
  { return jtbNode; }
}

TypeDeclaration TypeDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  Modifiers n5 = null;
  NodeChoice n6 = null;
  NodeSequence n7 = null;
  ClassOrInterfaceDeclaration n8 = null;
  NodeSequence n9 = null;
  EnumDeclaration n10 = null;
  NodeSequence n11 = null;
  AnnotationTypeDeclaration n12 = null;
  TypeDeclaration jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(1); }
    n3 = ";"
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  // ModMMa 2012/07 : problem ! Modifiers includes Annotation() which prevents from finding AnnotationTypeDeclaration()
  |
    { n4 = new NodeSequence(2); }
    n5 = Modifiers()
    { n4.addNode(n5); }
    (
      (
        { n7 = new NodeSequence(1); }
        n8 = ClassOrInterfaceDeclaration()
        { n7.addNode(n8); }
        { n6 = new NodeChoice(n7, 0, 3); }
      |
        { n9 = new NodeSequence(1); }
        n10 = EnumDeclaration()
        { n9.addNode(n10); }
        { n6 = new NodeChoice(n9, 1, 3); }
      |
        { n11 = new NodeSequence(1); }
        n12 = AnnotationTypeDeclaration()
        { n11.addNode(n12); }
        { n6 = new NodeChoice(n11, 2, 3); }
      )
    )
    { n4.addNode(n6); }
    { n0 = new NodeChoice(n4, 1, 2); }
  )
  { jtbNode = new TypeDeclaration(n0); }
  { return jtbNode; }
}

ClassOrInterfaceDeclaration ClassOrInterfaceDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeOptional n9 = new NodeOptional();
  NodeSequence n10 = null;
  TypeParameters n11 = null;
  NodeOptional n12 = new NodeOptional();
  NodeSequence n13 = null;
  ExtendsList n14 = null;
  NodeOptional n15 = new NodeOptional();
  NodeSequence n16 = null;
  ImplementsList n17 = null;
  ClassOrInterfaceBody n18 = null;
  ClassOrInterfaceDeclaration jtbNode = null;
  // --- user BNFProduction java block ---
  boolean isInterface = false;
  class_nesting++;
  Token t = null;
  boolean is_parser_class = false;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    (
      { n1 = new NodeSequence(1); }
      n3 = "class"
      { n2 = (NodeToken) n3; }
      { n1.addNode(n2); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      { n4 = new NodeSequence(1); }
      n6 = "interface"
      { n5 = (NodeToken) n6; }
      { n4.addNode(n5); }
      {
        isInterface = true;
      }
      { n0 = new NodeChoice(n4, 1, 2); }
    )
  )
  n8 = < IDENTIFIER >
  { n7 = (NodeToken) n8; }
  { t = n8; }
  [
    { n10 = new NodeSequence(1); }
    n11 = TypeParameters()
    { n10.addNode(n11); }
    { n9.addNode(n10); }
  ]
  [
    { n13 = new NodeSequence(1); }
    n14 = ExtendsList(isInterface)
    { n13.addNode(n14); }
    { n12.addNode(n13); }
  ]
  [
    { n16 = new NodeSequence(1); }
    n17 = ImplementsList(isInterface)
    { n16.addNode(n17); }
    { n15.addNode(n16); }
  ]
  {
    if (t.image.equals(parser_class_name) && class_nesting == 1 && processing_cu) {
      is_parser_class = true;
      setinsertionpoint(getToken(1), 1);
    }
  }
  n18 = ClassOrInterfaceBody(isInterface, null)
  {
    if (is_parser_class)
      setinsertionpoint(getToken(0), 2);
    class_nesting--;
  }
  { jtbNode = new ClassOrInterfaceDeclaration(n0, n7, n9, n12, n15, n18); }
  { return jtbNode; }
}

ExtendsList ExtendsList(boolean isInterface) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ClassOrInterfaceType n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  ClassOrInterfaceType n7 = null;
  ExtendsList jtbNode = null;
  // --- user BNFProduction java block ---
  boolean extendsMoreThanOne = false;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "extends"
  { n0 = (NodeToken) n1; }
  n2 = ClassOrInterfaceType()
  (
    { n4 = new NodeSequence(2); }
    n6 = ","
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    n7 = ClassOrInterfaceType()
    { n4.addNode(n7); }
    {
      extendsMoreThanOne = true;
    }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  {
    if (extendsMoreThanOne && !isInterface)
      throw new ParseException("A class cannot extend more than one other class");
  }
  { jtbNode = new ExtendsList(n0, n2, n3); }
  { return jtbNode; }
}

ImplementsList ImplementsList(boolean isInterface) :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ClassOrInterfaceType n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  ClassOrInterfaceType n7 = null;
  ImplementsList jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "implements"
  { n0 = (NodeToken) n1; }
  n2 = ClassOrInterfaceType()
  (
    { n4 = new NodeSequence(2); }
    n6 = ","
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    n7 = ClassOrInterfaceType()
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  {
    if (isInterface)
      throw new ParseException("An interface cannot implement other interfaces");
  }
  { jtbNode = new ImplementsList(n0, n2, n3); }
  { return jtbNode; }
}

EnumDeclaration EnumDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeSequence n5 = null;
  ImplementsList n6 = null;
  EnumBody n7 = null;
  EnumDeclaration jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "enum"
  { n0 = (NodeToken) n1; }
  n3 = < IDENTIFIER >
  { n2 = (NodeToken) n3; }
  [
    { n5 = new NodeSequence(1); }
    n6 = ImplementsList(false)
    { n5.addNode(n6); }
    { n4.addNode(n5); }
  ]
  n7 = EnumBody()
  { jtbNode = new EnumDeclaration(n0, n2, n4, n7); }
  { return jtbNode; }
}

EnumBody EnumBody() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  EnumConstant n4 = null;
  NodeListOptional n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  EnumConstant n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeOptional n14 = new NodeOptional();
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeListOptional n18 = null;
  NodeSequence n19 = null;
  ClassOrInterfaceBodyDeclaration n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  EnumBody jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "{"
  { n0 = (NodeToken) n1; }
  [
    { n5 = new NodeListOptional(); }
    { n3 = new NodeSequence(2); }
    n4 = EnumConstant()
    { n3.addNode(n4); }
    (
      LOOKAHEAD( 2 )
      { n6 = new NodeSequence(2); }
      n8 = ","
      { n7 = (NodeToken) n8; }
      { n6.addNode(n7); }
      n9 = EnumConstant()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
    )*
    { n5.nodes.trimToSize(); }
    { n3.addNode(n5); }
    { n2.addNode(n3); }
  ]
  [
    { n11 = new NodeSequence(1); }
    n13 = ","
    { n12 = (NodeToken) n13; }
    { n11.addNode(n12); }
    { n10.addNode(n11); }
  ]
  [
    { n18 = new NodeListOptional(); }
    { n15 = new NodeSequence(2); }
    n17 = ";"
    { n16 = (NodeToken) n17; }
    { n15.addNode(n16); }
    (
      { n19 = new NodeSequence(1); }
      n20 = ClassOrInterfaceBodyDeclaration(false)
      { n19.addNode(n20); }
      { n18.addNode(n19); }
    )*
    { n18.nodes.trimToSize(); }
    { n15.addNode(n18); }
    { n14.addNode(n15); }
  ]
  n22 = "}"
  { n21 = (NodeToken) n22; }
  { jtbNode = new EnumBody(n0, n2, n10, n14, n21); }
  { return jtbNode; }
}

EnumConstant EnumConstant() :
{
  // --- JTB generated node declarations ---
  Modifiers n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  Arguments n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  ClassOrInterfaceBody n8 = null;
  EnumConstant jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = Modifiers()
  n2 = < IDENTIFIER >
  { n1 = (NodeToken) n2; }
  [
    { n4 = new NodeSequence(1); }
    n5 = Arguments(null)
    { n4.addNode(n5); }
    { n3.addNode(n4); }
  ]
  [
    { n7 = new NodeSequence(1); }
    n8 = ClassOrInterfaceBody(false, null)
    { n7.addNode(n8); }
    { n6.addNode(n7); }
  ]
  { jtbNode = new EnumConstant(n0, n1, n3, n6); }
  { return jtbNode; }
}

TypeParameters TypeParameters() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  TypeParameter n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  TypeParameter n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  TypeParameters jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "<"
  { n0 = (NodeToken) n1; }
  n2 = TypeParameter()
  (
    { n4 = new NodeSequence(2); }
    n6 = ","
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    n7 = TypeParameter()
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  n9 = ">"
  { n8 = (NodeToken) n9; }
  { jtbNode = new TypeParameters(n0, n2, n3, n8); }
  { return jtbNode; }
}

TypeParameter TypeParameter() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  TypeBound n4 = null;
  TypeParameter jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = < IDENTIFIER >
  { n0 = (NodeToken) n1; }
  [
    { n3 = new NodeSequence(1); }
    n4 = TypeBound()
    { n3.addNode(n4); }
    { n2.addNode(n3); }
  ]
  { jtbNode = new TypeParameter(n0, n2); }
  { return jtbNode; }
}

TypeBound TypeBound() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ClassOrInterfaceType n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  ClassOrInterfaceType n7 = null;
  TypeBound jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "extends"
  { n0 = (NodeToken) n1; }
  n2 = ClassOrInterfaceType()
  (
    { n4 = new NodeSequence(2); }
    n6 = "&"
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    n7 = ClassOrInterfaceType()
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  { jtbNode = new TypeBound(n0, n2, n3); }
  { return jtbNode; }
}

ClassOrInterfaceBody ClassOrInterfaceBody(boolean isInterface, List<Token> tokens) :
/* Parsing this fills "tokens" with all tokens of the block excluding the braces at each end */
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  ClassOrInterfaceBodyDeclaration n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  ClassOrInterfaceBody jtbNode = null;
  // --- user BNFProduction java block ---
  Token first = null;
  Token last = null;
  if (tokens == null)
    tokens = new ArrayList<Token>();
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "{"
  { n0 = (NodeToken) n1; }
  {
    first = getToken(1);
  }
  (
    { n3 = new NodeSequence(1); }
    n4 = ClassOrInterfaceBodyDeclaration(isInterface)
    { n3.addNode(n4); }
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  {
    last = getToken(0);
  }
  n6 = "}"
  { n5 = (NodeToken) n6; }
  {
    if (last.next != first) {
      // i.e., this is not an empty sequence
      Token t = first;
      while (true) {
        tokens.add(t);
        if (t == last)
          break;
        t = t.next;
      } 
    }
  }
  { jtbNode = new ClassOrInterfaceBody(n0, n2, n5); }
  { return jtbNode; }
}

ClassOrInterfaceBodyDeclaration ClassOrInterfaceBodyDeclaration(boolean isInterface) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  Initializer n2 = null;
  NodeSequence n3 = null;
  Modifiers n4 = null;
  NodeChoice n5 = null;
  NodeSequence n6 = null;
  ClassOrInterfaceDeclaration n7 = null;
  NodeSequence n8 = null;
  EnumDeclaration n9 = null;
  NodeSequence n10 = null;
  AnnotationTypeDeclaration n11 = null;
  NodeSequence n12 = null;
  ConstructorDeclaration n13 = null;
  NodeSequence n14 = null;
  FieldDeclaration n15 = null;
  NodeSequence n16 = null;
  MethodDeclaration n17 = null;
  NodeSequence n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  ClassOrInterfaceBodyDeclaration jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    LOOKAHEAD( 2 )
    { n1 = new NodeSequence(1); }
    n2 = Initializer()
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 3); }
    {
      if (isInterface)
        throw new ParseException("An interface cannot have initializers");
    }
  |
    { n3 = new NodeSequence(2); }
    n4 = Modifiers()
    { n3.addNode(n4); }
    // Just get all the modifiers out of the way.
    // If you want to do more checks, pass the modifiers down to the member
    (
      (
        { n6 = new NodeSequence(1); }
        n7 = ClassOrInterfaceDeclaration()
        { n6.addNode(n7); }
        { n5 = new NodeChoice(n6, 0, 6); }
      |
        { n8 = new NodeSequence(1); }
        n9 = EnumDeclaration()
        { n8.addNode(n9); }
        { n5 = new NodeChoice(n8, 1, 6); }
      // ModMMa 2014/11 : added
      |
        { n10 = new NodeSequence(1); }
        n11 = AnnotationTypeDeclaration()
        { n10.addNode(n11); }
        { n5 = new NodeChoice(n10, 2, 6); }
      // ModMMa 2021/04 : fixed
      |
        LOOKAHEAD( ConstructorDeclaration() )
        { n12 = new NodeSequence(1); }
        n13 = ConstructorDeclaration()
        { n12.addNode(n13); }
        { n5 = new NodeChoice(n12, 3, 6); }
      // ModMMa 2021/04 : fixed
      |
        LOOKAHEAD( FieldDeclaration() )
        { n14 = new NodeSequence(1); }
        n15 = FieldDeclaration()
        { n14.addNode(n15); }
        { n5 = new NodeChoice(n14, 4, 6); }
      |
        { n16 = new NodeSequence(1); }
        n17 = MethodDeclaration()
        { n16.addNode(n17); }
        { n5 = new NodeChoice(n16, 5, 6); }
      )
    )
    { n3.addNode(n5); }
    { n0 = new NodeChoice(n3, 1, 3); }
  |
    { n18 = new NodeSequence(1); }
    n20 = ";"
    { n19 = (NodeToken) n20; }
    { n18.addNode(n19); }
    { n0 = new NodeChoice(n18, 2, 3); }
  )
  { jtbNode = new ClassOrInterfaceBodyDeclaration(n0); }
  { return jtbNode; }
}

FieldDeclaration FieldDeclaration() :
{
  // --- JTB generated node declarations ---
  Type n0 = null;
  VariableDeclarator n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  VariableDeclarator n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  FieldDeclaration jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  // Modifiers already matched in the caller
  n0 = Type()
  n1 = VariableDeclarator()
  (
    { n3 = new NodeSequence(2); }
    n5 = ","
    { n4 = (NodeToken) n5; }
    { n3.addNode(n4); }
    n6 = VariableDeclarator()
    { n3.addNode(n6); }
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  n8 = ";"
  { n7 = (NodeToken) n8; }
  { jtbNode = new FieldDeclaration(n0, n1, n2, n7); }
  { return jtbNode; }
}

VariableDeclarator VariableDeclarator() :
{
  // --- JTB generated node declarations ---
  VariableDeclaratorId n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  VariableInitializer n5 = null;
  VariableDeclarator jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = VariableDeclaratorId()
  [
    { n2 = new NodeSequence(2); }
    n4 = "="
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = VariableInitializer()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  ]
  { jtbNode = new VariableDeclarator(n0, n1); }
  { return jtbNode; }
}

VariableDeclaratorId VariableDeclaratorId() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  VariableDeclaratorId jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = < IDENTIFIER >
  { n0 = (NodeToken) n1; }
  (
    { n3 = new NodeSequence(2); }
    n5 = "["
    { n4 = (NodeToken) n5; }
    { n3.addNode(n4); }
    n7 = "]"
    { n6 = (NodeToken) n7; }
    { n3.addNode(n6); }
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  { jtbNode = new VariableDeclaratorId(n0, n2); }
  { return jtbNode; }
}

VariableInitializer VariableInitializer() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  ArrayInitializer n2 = null;
  NodeSequence n3 = null;
  Expression n4 = null;
  VariableInitializer jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(1); }
    n2 = ArrayInitializer()
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n3 = new NodeSequence(1); }
    n4 = Expression(null)
    { n3.addNode(n4); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { jtbNode = new VariableInitializer(n0); }
  { return jtbNode; }
}

ArrayInitializer ArrayInitializer() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  VariableInitializer n4 = null;
  NodeListOptional n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  VariableInitializer n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  ArrayInitializer jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "{"
  { n0 = (NodeToken) n1; }
  [
    { n5 = new NodeListOptional(); }
    { n3 = new NodeSequence(2); }
    n4 = VariableInitializer()
    { n3.addNode(n4); }
    (
      LOOKAHEAD( 2 )
      { n6 = new NodeSequence(2); }
      n8 = ","
      { n7 = (NodeToken) n8; }
      { n6.addNode(n7); }
      n9 = VariableInitializer()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
    )*
    { n5.nodes.trimToSize(); }
    { n3.addNode(n5); }
    { n2.addNode(n3); }
  ]
  [
    { n11 = new NodeSequence(1); }
    n13 = ","
    { n12 = (NodeToken) n13; }
    { n11.addNode(n12); }
    { n10.addNode(n11); }
  ]
  n15 = "}"
  { n14 = (NodeToken) n15; }
  { jtbNode = new ArrayInitializer(n0, n2, n10, n14); }
  { return jtbNode; }
}

MethodDeclaration MethodDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  TypeParameters n2 = null;
  ResultType n3 = null;
  MethodDeclarator n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NameList n9 = null;
  NodeChoice n10 = null;
  NodeSequence n11 = null;
  Block n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  MethodDeclaration jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  // Modifiers already matched in the caller
  [
    { n1 = new NodeSequence(1); }
    n2 = TypeParameters()
    { n1.addNode(n2); }
    { n0.addNode(n1); }
  ]
  n3 = ResultType(null)
  n4 = MethodDeclarator()
  [
    { n6 = new NodeSequence(2); }
    n8 = "throws"
    { n7 = (NodeToken) n8; }
    { n6.addNode(n7); }
    n9 = NameList()
    { n6.addNode(n9); }
    { n5.addNode(n6); }
  ]
  (
    (
      { n11 = new NodeSequence(1); }
      n12 = Block(null)
      { n11.addNode(n12); }
      { n10 = new NodeChoice(n11, 0, 2); }
    |
      { n13 = new NodeSequence(1); }
      n15 = ";"
      { n14 = (NodeToken) n15; }
      { n13.addNode(n14); }
      { n10 = new NodeChoice(n13, 1, 2); }
    )
  )
  { jtbNode = new MethodDeclaration(n0, n3, n4, n5, n10); }
  { return jtbNode; }
}

MethodDeclarator MethodDeclarator() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  FormalParameters n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  MethodDeclarator jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = < IDENTIFIER >
  { n0 = (NodeToken) n1; }
  n2 = FormalParameters(null)
  (
    { n4 = new NodeSequence(2); }
    n6 = "["
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    n8 = "]"
    { n7 = (NodeToken) n8; }
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  { jtbNode = new MethodDeclarator(n0, n2, n3); }
  { return jtbNode; }
}

FormalParameters FormalParameters(List<Token> tokens) :
/* Parsing this fills "tokens" with all tokens of the formal parameters excluding the parentheses at each end */
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  FormalParameter n4 = null;
  NodeListOptional n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  FormalParameter n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  FormalParameters jtbNode = null;
  // --- user BNFProduction java block ---
  Token first = null;
  Token last = null;
  if (tokens == null)
    tokens = new ArrayList<Token>();
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "("
  { n0 = (NodeToken) n1; }
  {
    first = getToken(1);
  }
  [
    { n5 = new NodeListOptional(); }
    { n3 = new NodeSequence(2); }
    n4 = FormalParameter()
    { n3.addNode(n4); }
    (
      { n6 = new NodeSequence(2); }
      n8 = ","
      { n7 = (NodeToken) n8; }
      { n6.addNode(n7); }
      n9 = FormalParameter()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
    )*
    { n5.nodes.trimToSize(); }
    { n3.addNode(n5); }
    { n2.addNode(n3); }
  ]
  {
    last = getToken(0);
  }
  n11 = ")"
  { n10 = (NodeToken) n11; }
  {
    if (last.next != first) {
      // i.e., this is not an empty sequence
      Token t = first;
      while (true) {
        tokens.add(t);
        if (t == last)
          break;
        t = t.next;
      } 
    }
  }
  { jtbNode = new FormalParameters(n0, n2, n10); }
  { return jtbNode; }
}

FormalParameter FormalParameter() :
{
  // --- JTB generated node declarations ---
  Modifiers n0 = null;
  Type n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  VariableDeclaratorId n6 = null;
  FormalParameter jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = Modifiers()
  n1 = Type()
  [
    { n3 = new NodeSequence(1); }
    n5 = "..."
    { n4 = (NodeToken) n5; }
    { n3.addNode(n4); }
    { n2.addNode(n3); }
  ]
  n6 = VariableDeclaratorId()
  { jtbNode = new FormalParameter(n0, n1, n2, n6); }
  { return jtbNode; }
}

ConstructorDeclaration ConstructorDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  TypeParameters n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  FormalParameters n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NameList n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeOptional n13 = new NodeOptional();
  NodeSequence n14 = null;
  ExplicitConstructorInvocation n15 = null;
  NodeListOptional n16 = new NodeListOptional();
  NodeSequence n17 = null;
  BlockStatement n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  ConstructorDeclaration jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  // Modifiers already matched in the caller
  [
    { n1 = new NodeSequence(1); }
    n2 = TypeParameters()
    { n1.addNode(n2); }
    { n0.addNode(n1); }
  ]
  n4 = < IDENTIFIER >
  { n3 = (NodeToken) n4; }
  n5 = FormalParameters(null)
  [
    { n7 = new NodeSequence(2); }
    n9 = "throws"
    { n8 = (NodeToken) n9; }
    { n7.addNode(n8); }
    n10 = NameList()
    { n7.addNode(n10); }
    { n6.addNode(n7); }
  ]
  n12 = "{"
  { n11 = (NodeToken) n12; }
  [
    LOOKAHEAD( ExplicitConstructorInvocation() )
    { n14 = new NodeSequence(1); }
    n15 = ExplicitConstructorInvocation()
    { n14.addNode(n15); }
    { n13.addNode(n14); }
  ]
  (
    { n17 = new NodeSequence(1); }
    n18 = BlockStatement()
    { n17.addNode(n18); }
    { n16.addNode(n17); }
  )*
  { n16.nodes.trimToSize(); }
  n20 = "}"
  { n19 = (NodeToken) n20; }
  { jtbNode = new ConstructorDeclaration(n0, n3, n5, n6, n11, n13, n16, n19); }
  { return jtbNode; }
}

ExplicitConstructorInvocation ExplicitConstructorInvocation() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  ReferenceType n6 = null;
  NodeListOptional n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  ReferenceType n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeChoice n14 = null;
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  Arguments n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeSequence n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  Arguments n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeSequence n27 = null;
  NodeSequence n28 = null;
  PrimaryExpression n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  Arguments n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  ExplicitConstructorInvocation jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  // ModMMa 2014/12 : modified to resolve the conflict with "this" alone in PrimaryPrefix()
  (
    (
      LOOKAHEAD( 3 )
      { n1 = new NodeSequence(2); }
      // ModMMa 2014/11 : added
      [
        { n7 = new NodeListOptional(); }
        { n3 = new NodeSequence(4); }
        n5 = "<"
        { n4 = (NodeToken) n5; }
        { n3.addNode(n4); }
        n6 = ReferenceType()
        { n3.addNode(n6); }
        (
          { n8 = new NodeSequence(2); }
          n10 = ","
          { n9 = (NodeToken) n10; }
          { n8.addNode(n9); }
          n11 = ReferenceType()
          { n8.addNode(n11); }
          { n7.addNode(n8); }
        )*
        { n7.nodes.trimToSize(); }
        { n3.addNode(n7); }
        n13 = ">"
        { n12 = (NodeToken) n13; }
        { n3.addNode(n12); }
        { n2.addNode(n3); }
      ]
      { n1.addNode(n2); }
      (
        (
          { n15 = new NodeSequence(3); }
          n17 = "this"
          { n16 = (NodeToken) n17; }
          { n15.addNode(n16); }
          n18 = Arguments(null)
          { n15.addNode(n18); }
          n20 = ";"
          { n19 = (NodeToken) n20; }
          { n15.addNode(n19); }
          { n14 = new NodeChoice(n15, 0, 2); }
        |
          { n21 = new NodeSequence(3); }
          n23 = "super"
          { n22 = (NodeToken) n23; }
          { n21.addNode(n22); }
          n24 = Arguments(null)
          { n21.addNode(n24); }
          n26 = ";"
          { n25 = (NodeToken) n26; }
          { n21.addNode(n25); }
          { n14 = new NodeChoice(n21, 1, 2); }
        )
      )
      { n1.addNode(n14); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      { n27 = new NodeSequence(1); }
      (
                { n28 = new NodeSequence(5); }
        n29 = PrimaryExpression()
        { n28.addNode(n29); }
        n31 = "."
        { n30 = (NodeToken) n31; }
        { n28.addNode(n30); }
        n33 = "super"
        { n32 = (NodeToken) n33; }
        { n28.addNode(n32); }
        n34 = Arguments(null)
        { n28.addNode(n34); }
        n36 = ";"
        { n35 = (NodeToken) n36; }
        { n28.addNode(n35); }

      )
      { n27.addNode(n28); }
      { n0 = new NodeChoice(n27, 1, 2); }
    )
  )
  { jtbNode = new ExplicitConstructorInvocation(n0); }
  { return jtbNode; }
}

Initializer Initializer() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Block n4 = null;
  Initializer jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  [
    { n1 = new NodeSequence(1); }
    n3 = "static"
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    { n0.addNode(n1); }
  ]
  n4 = Block(null)
  { jtbNode = new Initializer(n0, n4); }
  { return jtbNode; }
}

Type Type() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  ReferenceType n2 = null;
  NodeSequence n3 = null;
  PrimitiveType n4 = null;
  Type jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    LOOKAHEAD( 2 )
    { n1 = new NodeSequence(1); }
    n2 = ReferenceType()
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n3 = new NodeSequence(1); }
    n4 = PrimitiveType()
    { n3.addNode(n4); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { jtbNode = new Type(n0); }
  { return jtbNode; }
}

ReferenceType ReferenceType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  PrimitiveType n2 = null;
  NodeList n3 = new NodeList();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  ClassOrInterfaceType n10 = null;
  NodeListOptional n11 = new NodeListOptional();
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  ReferenceType jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(2); }
    n2 = PrimitiveType()
    { n1.addNode(n2); }
    (
      LOOKAHEAD( 2 )
      { n4 = new NodeSequence(2); }
      n6 = "["
      { n5 = (NodeToken) n6; }
      { n4.addNode(n5); }
      n8 = "]"
      { n7 = (NodeToken) n8; }
      { n4.addNode(n7); }
      { n3.addNode(n4); }
    )+
    { n3.nodes.trimToSize(); }
    { n1.addNode(n3); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n9 = new NodeSequence(2); }
    n10 = ClassOrInterfaceType()
    { n9.addNode(n10); }
    (
      LOOKAHEAD( 2 )
      { n12 = new NodeSequence(2); }
      n14 = "["
      { n13 = (NodeToken) n14; }
      { n12.addNode(n13); }
      n16 = "]"
      { n15 = (NodeToken) n16; }
      { n12.addNode(n15); }
      { n11.addNode(n12); }
    )*
    { n11.nodes.trimToSize(); }
    { n9.addNode(n11); }
    { n0 = new NodeChoice(n9, 1, 2); }
  )
  { jtbNode = new ReferenceType(n0); }
  { return jtbNode; }
}

ClassOrInterfaceType ClassOrInterfaceType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  TypeArguments n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeOptional n11 = null;
  NodeSequence n12 = null;
  TypeArguments n13 = null;
  ClassOrInterfaceType jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = < IDENTIFIER >
  { n0 = (NodeToken) n1; }
  [
    LOOKAHEAD( 2 )
    { n3 = new NodeSequence(1); }
    n4 = TypeArguments()
    { n3.addNode(n4); }
    { n2.addNode(n3); }
  ]
  (
    LOOKAHEAD( 2 )
    { n11 = new NodeOptional(); }
    { n6 = new NodeSequence(3); }
    n8 = "."
    { n7 = (NodeToken) n8; }
    { n6.addNode(n7); }
    n10 = < IDENTIFIER >
    { n9 = (NodeToken) n10; }
    { n6.addNode(n9); }
    [
      LOOKAHEAD( 2 )
      { n12 = new NodeSequence(1); }
      n13 = TypeArguments()
      { n12.addNode(n13); }
      { n11.addNode(n12); }
    ]
    { n6.addNode(n11); }
    { n5.addNode(n6); }
  )*
  { n5.nodes.trimToSize(); }
  { jtbNode = new ClassOrInterfaceType(n0, n2, n5); }
  { return jtbNode; }
}

TypeArguments TypeArguments() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  TypeArgument n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  TypeArgument n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  TypeArguments jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "<"
  { n0 = (NodeToken) n1; }
  n2 = TypeArgument()
  (
    { n4 = new NodeSequence(2); }
    n6 = ","
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    n7 = TypeArgument()
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  n9 = ">"
  { n8 = (NodeToken) n9; }
  { jtbNode = new TypeArguments(n0, n2, n3, n8); }
  { return jtbNode; }
}

EmptyTypeArguments EmptyTypeArguments() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  EmptyTypeArguments jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "<"
  { n0 = (NodeToken) n1; }
  n3 = ">"
  { n2 = (NodeToken) n3; }
  { jtbNode = new EmptyTypeArguments(n0, n2); }
  { return jtbNode; }
}

TypeArgument TypeArgument() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  ReferenceType n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  WildcardBounds n8 = null;
  TypeArgument jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(1); }
    n2 = ReferenceType()
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n3 = new NodeSequence(2); }
    n5 = "?"
    { n4 = (NodeToken) n5; }
    { n3.addNode(n4); }
    [
      { n7 = new NodeSequence(1); }
      n8 = WildcardBounds()
      { n7.addNode(n8); }
      { n6.addNode(n7); }
    ]
    { n3.addNode(n6); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { jtbNode = new TypeArgument(n0); }
  { return jtbNode; }
}

WildcardBounds WildcardBounds() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  ReferenceType n4 = null;
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  ReferenceType n8 = null;
  WildcardBounds jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(2); }
    n3 = "extends"
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    n4 = ReferenceType()
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n5 = new NodeSequence(2); }
    n7 = "super"
    { n6 = (NodeToken) n7; }
    { n5.addNode(n6); }
    n8 = ReferenceType()
    { n5.addNode(n8); }
    { n0 = new NodeChoice(n5, 1, 2); }
  )
  { jtbNode = new WildcardBounds(n0); }
  { return jtbNode; }
}

PrimitiveType PrimitiveType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeSequence n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeSequence n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  PrimitiveType jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(1); }
    n3 = "boolean"
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 8); }
  |
    { n4 = new NodeSequence(1); }
    n6 = "char"
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    { n0 = new NodeChoice(n4, 1, 8); }
  |
    { n7 = new NodeSequence(1); }
    n9 = "byte"
    { n8 = (NodeToken) n9; }
    { n7.addNode(n8); }
    { n0 = new NodeChoice(n7, 2, 8); }
  |
    { n10 = new NodeSequence(1); }
    n12 = "short"
    { n11 = (NodeToken) n12; }
    { n10.addNode(n11); }
    { n0 = new NodeChoice(n10, 3, 8); }
  |
    { n13 = new NodeSequence(1); }
    n15 = "int"
    { n14 = (NodeToken) n15; }
    { n13.addNode(n14); }
    { n0 = new NodeChoice(n13, 4, 8); }
  |
    { n16 = new NodeSequence(1); }
    n18 = "long"
    { n17 = (NodeToken) n18; }
    { n16.addNode(n17); }
    { n0 = new NodeChoice(n16, 5, 8); }
  |
    { n19 = new NodeSequence(1); }
    n21 = "float"
    { n20 = (NodeToken) n21; }
    { n19.addNode(n20); }
    { n0 = new NodeChoice(n19, 6, 8); }
  |
    { n22 = new NodeSequence(1); }
    n24 = "double"
    { n23 = (NodeToken) n24; }
    { n22.addNode(n23); }
    { n0 = new NodeChoice(n22, 7, 8); }
  )
  { jtbNode = new PrimitiveType(n0); }
  { return jtbNode; }
}

ResultType ResultType(List<Token> tokens) :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  Type n5 = null;
  ResultType jtbNode = null;
  // --- user BNFProduction java block ---
  Token first = getToken(1);
  if (tokens == null)
    tokens = new ArrayList<Token>();
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    (
      { n1 = new NodeSequence(1); }
      n3 = "void"
      { n2 = (NodeToken) n3; }
      { n1.addNode(n2); }
      { n0 = new NodeChoice(n1, 0, 2); }
    |
      { n4 = new NodeSequence(1); }
      n5 = Type()
      { n4.addNode(n5); }
      { n0 = new NodeChoice(n4, 1, 2); }
    )
  )
  {
    Token last = getToken(0);
    Token t = first;
    while (true) {
      tokens.add(t);
      if (t == last)
        break;
      t = t.next;
    } 
  }
  { jtbNode = new ResultType(n0); }
  { return jtbNode; }
}

Name Name(List<Token> tokens) :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{
  // --- JTB generated node declarations ---
  JavaIdentifier n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  JavaIdentifier n5 = null;
  Name jtbNode = null;
  // --- user BNFProduction java block ---
  if (tokens == null)
    tokens = new ArrayList<Token>();
  Token first = getToken(1);
  String name = "";
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = JavaIdentifier()
  (
    LOOKAHEAD( 2 )
    { n2 = new NodeSequence(2); }
    n4 = "."
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = JavaIdentifier()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new Name(n0, n1); }
  {
    Token last = getToken(0);
    Token t = first;
    while (true) {
      tokens.add(t);
      name += t.image;
      if (t == last)
        break;
      t = t.next;
    } 
    jtbrt_Name = name;
  }
  { return jtbNode; }
}

NameList NameList() :
{
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Name n5 = null;
  NameList jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = Name(null)
  (
    { n2 = new NodeSequence(2); }
    n4 = ","
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = Name(null)
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new NameList(n0, n1); }
  { return jtbNode; }
}

Expression Expression(List<Token> tokens) :
/*
 * This expansion has been written this way for performance reasons instead of:
 *   Assignment() | ConditionalExpression()
 * However, it is a weakening of the grammar for it allows the LHS of assignments to be
 * any conditional expression whereas it can only be a primary expression.
 * Consider adding a semantic predicate to work around this.
 */
{
  // --- JTB generated node declarations ---
  ConditionalExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  AssignmentOperator n3 = null;
  Expression n4 = null;
  Expression jtbNode = null;
  // --- user BNFProduction java block ---
  Token first = getToken(1);
  if (tokens == null)
    tokens = new ArrayList<Token>();
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = ConditionalExpression()
  [
    LOOKAHEAD( 2 )
    { n2 = new NodeSequence(2); }
    n3 = AssignmentOperator()
    { n2.addNode(n3); }
    n4 = Expression(null)
    { n2.addNode(n4); }
    { n1.addNode(n2); }
  ]
  {
    Token last = getToken(0);
    Token t = first;
    while (true) {
      tokens.add(t);
      if (t == last)
        break;
      t = t.next;
    } 
  }
  { jtbNode = new Expression(n0, n1); }
  { return jtbNode; }
}

AssignmentOperator AssignmentOperator() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeSequence n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeSequence n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeSequence n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeSequence n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeSequence n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  NodeSequence n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
  AssignmentOperator jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(1); }
    n3 = "="
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 12); }
  |
    { n4 = new NodeSequence(1); }
    n6 = "*="
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    { n0 = new NodeChoice(n4, 1, 12); }
  |
    { n7 = new NodeSequence(1); }
    n9 = "/="
    { n8 = (NodeToken) n9; }
    { n7.addNode(n8); }
    { n0 = new NodeChoice(n7, 2, 12); }
  |
    { n10 = new NodeSequence(1); }
    n12 = "%="
    { n11 = (NodeToken) n12; }
    { n10.addNode(n11); }
    { n0 = new NodeChoice(n10, 3, 12); }
  |
    { n13 = new NodeSequence(1); }
    n15 = "+="
    { n14 = (NodeToken) n15; }
    { n13.addNode(n14); }
    { n0 = new NodeChoice(n13, 4, 12); }
  |
    { n16 = new NodeSequence(1); }
    n18 = "-="
    { n17 = (NodeToken) n18; }
    { n16.addNode(n17); }
    { n0 = new NodeChoice(n16, 5, 12); }
  |
    { n19 = new NodeSequence(1); }
    n21 = "<<="
    { n20 = (NodeToken) n21; }
    { n19.addNode(n20); }
    { n0 = new NodeChoice(n19, 6, 12); }
  |
    { n22 = new NodeSequence(1); }
    n24 = ">>="
    { n23 = (NodeToken) n24; }
    { n22.addNode(n23); }
    { n0 = new NodeChoice(n22, 7, 12); }
  |
    { n25 = new NodeSequence(1); }
    n27 = ">>>="
    { n26 = (NodeToken) n27; }
    { n25.addNode(n26); }
    { n0 = new NodeChoice(n25, 8, 12); }
  |
    { n28 = new NodeSequence(1); }
    n30 = "&="
    { n29 = (NodeToken) n30; }
    { n28.addNode(n29); }
    { n0 = new NodeChoice(n28, 9, 12); }
  |
    { n31 = new NodeSequence(1); }
    n33 = "^="
    { n32 = (NodeToken) n33; }
    { n31.addNode(n32); }
    { n0 = new NodeChoice(n31, 10, 12); }
  |
    { n34 = new NodeSequence(1); }
    n36 = "|="
    { n35 = (NodeToken) n36; }
    { n34.addNode(n35); }
    { n0 = new NodeChoice(n34, 11, 12); }
  )
  { jtbNode = new AssignmentOperator(n0); }
  { return jtbNode; }
}

ConditionalExpression ConditionalExpression() :
{
  // --- JTB generated node declarations ---
  ConditionalOrExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Expression n8 = null;
  ConditionalExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = ConditionalOrExpression()
  [
    { n2 = new NodeSequence(4); }
    n4 = "?"
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = Expression(null)
    { n2.addNode(n5); }
    n7 = ":"
    { n6 = (NodeToken) n7; }
    { n2.addNode(n6); }
    n8 = Expression(null)
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  ]
  { jtbNode = new ConditionalExpression(n0, n1); }
  { return jtbNode; }
}

ConditionalOrExpression ConditionalOrExpression() :
{
  // --- JTB generated node declarations ---
  ConditionalAndExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ConditionalAndExpression n5 = null;
  ConditionalOrExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = ConditionalAndExpression()
  (
    { n2 = new NodeSequence(2); }
    n4 = "||"
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = ConditionalAndExpression()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new ConditionalOrExpression(n0, n1); }
  { return jtbNode; }
}

ConditionalAndExpression ConditionalAndExpression() :
{
  // --- JTB generated node declarations ---
  InclusiveOrExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  InclusiveOrExpression n5 = null;
  ConditionalAndExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = InclusiveOrExpression()
  (
    { n2 = new NodeSequence(2); }
    n4 = "&&"
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = InclusiveOrExpression()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new ConditionalAndExpression(n0, n1); }
  { return jtbNode; }
}

InclusiveOrExpression InclusiveOrExpression() :
{
  // --- JTB generated node declarations ---
  ExclusiveOrExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ExclusiveOrExpression n5 = null;
  InclusiveOrExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = ExclusiveOrExpression()
  (
    { n2 = new NodeSequence(2); }
    n4 = "|"
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = ExclusiveOrExpression()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new InclusiveOrExpression(n0, n1); }
  { return jtbNode; }
}

ExclusiveOrExpression ExclusiveOrExpression() :
{
  // --- JTB generated node declarations ---
  AndExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  AndExpression n5 = null;
  ExclusiveOrExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = AndExpression()
  (
    { n2 = new NodeSequence(2); }
    n4 = "^"
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = AndExpression()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new ExclusiveOrExpression(n0, n1); }
  { return jtbNode; }
}

AndExpression AndExpression() :
{
  // --- JTB generated node declarations ---
  EqualityExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  EqualityExpression n5 = null;
  AndExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = EqualityExpression()
  (
    { n2 = new NodeSequence(2); }
    n4 = "&"
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = EqualityExpression()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new AndExpression(n0, n1); }
  { return jtbNode; }
}

EqualityExpression EqualityExpression() :
{
  // --- JTB generated node declarations ---
  InstanceOfExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  InstanceOfExpression n10 = null;
  EqualityExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = InstanceOfExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        { n4 = new NodeSequence(1); }
        n6 = "=="
        { n5 = (NodeToken) n6; }
        { n4.addNode(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        { n7 = new NodeSequence(1); }
        n9 = "!="
        { n8 = (NodeToken) n9; }
        { n7.addNode(n8); }
        { n3 = new NodeChoice(n7, 1, 2); }
      )
    )
    { n2.addNode(n3); }
    n10 = InstanceOfExpression()
    { n2.addNode(n10); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new EqualityExpression(n0, n1); }
  { return jtbNode; }
}

InstanceOfExpression InstanceOfExpression() :
{
  // --- JTB generated node declarations ---
  RelationalExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Type n5 = null;
  InstanceOfExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = RelationalExpression()
  [
    { n2 = new NodeSequence(2); }
    n4 = "instanceof"
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = Type()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  ]
  { jtbNode = new InstanceOfExpression(n0, n1); }
  { return jtbNode; }
}

RelationalExpression RelationalExpression() :
{
  // --- JTB generated node declarations ---
  ShiftExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  ShiftExpression n16 = null;
  RelationalExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = ShiftExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        { n4 = new NodeSequence(1); }
        n6 = "<"
        { n5 = (NodeToken) n6; }
        { n4.addNode(n5); }
        { n3 = new NodeChoice(n4, 0, 4); }
      |
        { n7 = new NodeSequence(1); }
        n9 = ">"
        { n8 = (NodeToken) n9; }
        { n7.addNode(n8); }
        { n3 = new NodeChoice(n7, 1, 4); }
      |
        { n10 = new NodeSequence(1); }
        n12 = "<="
        { n11 = (NodeToken) n12; }
        { n10.addNode(n11); }
        { n3 = new NodeChoice(n10, 2, 4); }
      |
        { n13 = new NodeSequence(1); }
        n15 = ">="
        { n14 = (NodeToken) n15; }
        { n13.addNode(n14); }
        { n3 = new NodeChoice(n13, 3, 4); }
      )
    )
    { n2.addNode(n3); }
    n16 = ShiftExpression()
    { n2.addNode(n16); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new RelationalExpression(n0, n1); }
  { return jtbNode; }
}

ShiftExpression ShiftExpression() :
{
  // --- JTB generated node declarations ---
  AdditiveExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  RUnsignedShift n8 = null;
  NodeSequence n9 = null;
  RSignedShift n10 = null;
  AdditiveExpression n11 = null;
  ShiftExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = AdditiveExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        { n4 = new NodeSequence(1); }
        n6 = "<<"
        { n5 = (NodeToken) n6; }
        { n4.addNode(n5); }
        { n3 = new NodeChoice(n4, 0, 3); }
      // ModMMa 2012/07 : renamed from RUNSIGNEDSHIFT() and put before RSignedShift
      |
        { n7 = new NodeSequence(1); }
        n8 = RUnsignedShift()
        { n7.addNode(n8); }
        { n3 = new NodeChoice(n7, 1, 3); }
      // ModMMa 2012/07 : renamed from RSIGNEDSHIFT()
      |
        { n9 = new NodeSequence(1); }
        n10 = RSignedShift()
        { n9.addNode(n10); }
        { n3 = new NodeChoice(n9, 2, 3); }
      )
    )
    { n2.addNode(n3); }
    n11 = AdditiveExpression()
    { n2.addNode(n11); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new ShiftExpression(n0, n1); }
  { return jtbNode; }
}

RSignedShift RSignedShift() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  RSignedShift jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  LOOKAHEAD( { getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT } )
  // ModMMa 2012/07 : '">" ">"' changed to '">>"'
  n1 = ">>"
  { n0 = (NodeToken) n1; }
  { jtbNode = new RSignedShift(n0); }
  { return jtbNode; }
}

RUnsignedShift RUnsignedShift() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  RUnsignedShift jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  LOOKAHEAD( { getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT } )
  // ModMMa 2012/07 : '">" ">" ">"' changed to '">>>"'
  n1 = ">>>"
  { n0 = (NodeToken) n1; }
  { jtbNode = new RUnsignedShift(n0); }
  { return jtbNode; }
}

AdditiveExpression AdditiveExpression() :
{
  // --- JTB generated node declarations ---
  MultiplicativeExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  MultiplicativeExpression n10 = null;
  AdditiveExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = MultiplicativeExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        { n4 = new NodeSequence(1); }
        n6 = "+"
        { n5 = (NodeToken) n6; }
        { n4.addNode(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        { n7 = new NodeSequence(1); }
        n9 = "-"
        { n8 = (NodeToken) n9; }
        { n7.addNode(n8); }
        { n3 = new NodeChoice(n7, 1, 2); }
      )
    )
    { n2.addNode(n3); }
    n10 = MultiplicativeExpression()
    { n2.addNode(n10); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new AdditiveExpression(n0, n1); }
  { return jtbNode; }
}

MultiplicativeExpression MultiplicativeExpression() :
{
  // --- JTB generated node declarations ---
  UnaryExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  UnaryExpression n13 = null;
  MultiplicativeExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = UnaryExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        { n4 = new NodeSequence(1); }
        n6 = "*"
        { n5 = (NodeToken) n6; }
        { n4.addNode(n5); }
        { n3 = new NodeChoice(n4, 0, 3); }
      |
        { n7 = new NodeSequence(1); }
        n9 = "/"
        { n8 = (NodeToken) n9; }
        { n7.addNode(n8); }
        { n3 = new NodeChoice(n7, 1, 3); }
      |
        { n10 = new NodeSequence(1); }
        n12 = "%"
        { n11 = (NodeToken) n12; }
        { n10.addNode(n11); }
        { n3 = new NodeChoice(n10, 2, 3); }
      )
    )
    { n2.addNode(n3); }
    n13 = UnaryExpression()
    { n2.addNode(n13); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new MultiplicativeExpression(n0, n1); }
  { return jtbNode; }
}

UnaryExpression UnaryExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  UnaryExpression n9 = null;
  NodeSequence n10 = null;
  PreIncrementExpression n11 = null;
  NodeSequence n12 = null;
  PreDecrementExpression n13 = null;
  NodeSequence n14 = null;
  UnaryExpressionNotPlusMinus n15 = null;
  UnaryExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(2); }
    (
      (
        { n3 = new NodeSequence(1); }
        n5 = "+"
        { n4 = (NodeToken) n5; }
        { n3.addNode(n4); }
        { n2 = new NodeChoice(n3, 0, 2); }
      |
        { n6 = new NodeSequence(1); }
        n8 = "-"
        { n7 = (NodeToken) n8; }
        { n6.addNode(n7); }
        { n2 = new NodeChoice(n6, 1, 2); }
      )
    )
    { n1.addNode(n2); }
    n9 = UnaryExpression()
    { n1.addNode(n9); }
    { n0 = new NodeChoice(n1, 0, 4); }
  |
    { n10 = new NodeSequence(1); }
    n11 = PreIncrementExpression()
    { n10.addNode(n11); }
    { n0 = new NodeChoice(n10, 1, 4); }
  |
    { n12 = new NodeSequence(1); }
    n13 = PreDecrementExpression()
    { n12.addNode(n13); }
    { n0 = new NodeChoice(n12, 2, 4); }
  |
    { n14 = new NodeSequence(1); }
    n15 = UnaryExpressionNotPlusMinus()
    { n14.addNode(n15); }
    { n0 = new NodeChoice(n14, 3, 4); }
  )
  { jtbNode = new UnaryExpression(n0); }
  { return jtbNode; }
}

PreIncrementExpression PreIncrementExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  PrimaryExpression n2 = null;
  PreIncrementExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "++"
  { n0 = (NodeToken) n1; }
  n2 = PrimaryExpression()
  { jtbNode = new PreIncrementExpression(n0, n2); }
  { return jtbNode; }
}

PreDecrementExpression PreDecrementExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  PrimaryExpression n2 = null;
  PreDecrementExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "--"
  { n0 = (NodeToken) n1; }
  n2 = PrimaryExpression()
  { jtbNode = new PreDecrementExpression(n0, n2); }
  { return jtbNode; }
}

UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  UnaryExpression n9 = null;
  NodeSequence n10 = null;
  CastExpression n11 = null;
  NodeSequence n12 = null;
  PostfixExpression n13 = null;
  UnaryExpressionNotPlusMinus jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(2); }
    (
      (
        { n3 = new NodeSequence(1); }
        n5 = "~"
        { n4 = (NodeToken) n5; }
        { n3.addNode(n4); }
        { n2 = new NodeChoice(n3, 0, 2); }
      |
        { n6 = new NodeSequence(1); }
        n8 = "!"
        { n7 = (NodeToken) n8; }
        { n6.addNode(n7); }
        { n2 = new NodeChoice(n6, 1, 2); }
      )
    )
    { n1.addNode(n2); }
    n9 = UnaryExpression()
    { n1.addNode(n9); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    LOOKAHEAD( CastLookahead() )
    { n10 = new NodeSequence(1); }
    n11 = CastExpression()
    { n10.addNode(n11); }
    { n0 = new NodeChoice(n10, 1, 3); }
  |
    { n12 = new NodeSequence(1); }
    n13 = PostfixExpression()
    { n12.addNode(n13); }
    { n0 = new NodeChoice(n12, 2, 3); }
  )
  { jtbNode = new UnaryExpressionNotPlusMinus(n0); }
  { return jtbNode; }
}

CastLookahead CastLookahead() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  PrimitiveType n4 = null;
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Type n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  Type n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeChoice n19 = null;
  NodeSequence n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeSequence n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeSequence n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeSequence n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeSequence n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  NodeSequence n35 = null;
  NodeToken n36 = null;
  Token n37 = null;
  NodeSequence n38 = null;
  NodeToken n39 = null;
  Token n40 = null;
  NodeSequence n41 = null;
  Literal n42 = null;
  CastLookahead jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    LOOKAHEAD( 2 )
    { n1 = new NodeSequence(2); }
    n3 = "("
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    n4 = PrimitiveType()
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    LOOKAHEAD( "("
    Type()
    "[" )
    { n5 = new NodeSequence(4); }
    n7 = "("
    { n6 = (NodeToken) n7; }
    { n5.addNode(n6); }
    n8 = Type()
    { n5.addNode(n8); }
    n10 = "["
    { n9 = (NodeToken) n10; }
    { n5.addNode(n9); }
    n12 = "]"
    { n11 = (NodeToken) n12; }
    { n5.addNode(n11); }
    { n0 = new NodeChoice(n5, 1, 3); }
  |
    { n13 = new NodeSequence(4); }
    n15 = "("
    { n14 = (NodeToken) n15; }
    { n13.addNode(n14); }
    n16 = Type()
    { n13.addNode(n16); }
    n18 = ")"
    { n17 = (NodeToken) n18; }
    { n13.addNode(n17); }
    (
      (
        { n20 = new NodeSequence(1); }
        n22 = "~"
        { n21 = (NodeToken) n22; }
        { n20.addNode(n21); }
        { n19 = new NodeChoice(n20, 0, 8); }
      |
        { n23 = new NodeSequence(1); }
        n25 = "!"
        { n24 = (NodeToken) n25; }
        { n23.addNode(n24); }
        { n19 = new NodeChoice(n23, 1, 8); }
      |
        { n26 = new NodeSequence(1); }
        n28 = "("
        { n27 = (NodeToken) n28; }
        { n26.addNode(n27); }
        { n19 = new NodeChoice(n26, 2, 8); }
      |
        { n29 = new NodeSequence(1); }
        n31 = < IDENTIFIER >
        { n30 = (NodeToken) n31; }
        { n29.addNode(n30); }
        { n19 = new NodeChoice(n29, 3, 8); }
      |
        { n32 = new NodeSequence(1); }
        n34 = "this"
        { n33 = (NodeToken) n34; }
        { n32.addNode(n33); }
        { n19 = new NodeChoice(n32, 4, 8); }
      |
        { n35 = new NodeSequence(1); }
        n37 = "super"
        { n36 = (NodeToken) n37; }
        { n35.addNode(n36); }
        { n19 = new NodeChoice(n35, 5, 8); }
      |
        { n38 = new NodeSequence(1); }
        n40 = "new"
        { n39 = (NodeToken) n40; }
        { n38.addNode(n39); }
        { n19 = new NodeChoice(n38, 6, 8); }
      |
        { n41 = new NodeSequence(1); }
        n42 = Literal()
        { n41.addNode(n42); }
        { n19 = new NodeChoice(n41, 7, 8); }
      )
    )
    { n13.addNode(n19); }
    { n0 = new NodeChoice(n13, 2, 3); }
  )
  { jtbNode = new CastLookahead(n0); }
  { return jtbNode; }
}

PostfixExpression PostfixExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  PostfixExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = PrimaryExpression()
  [
    (
      { n3 = new NodeSequence(1); }
      n5 = "++"
      { n4 = (NodeToken) n5; }
      { n3.addNode(n4); }
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      { n6 = new NodeSequence(1); }
      n8 = "--"
      { n7 = (NodeToken) n8; }
      { n6.addNode(n7); }
      { n2 = new NodeChoice(n6, 1, 2); }
    )
    { n1.addNode(n2); }
  ]
  { jtbNode = new PostfixExpression(n0, n1); }
  { return jtbNode; }
}

CastExpression CastExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Type n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  UnaryExpression n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  Type n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  UnaryExpressionNotPlusMinus n14 = null;
  CastExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    LOOKAHEAD( "("
    PrimitiveType() )
    { n1 = new NodeSequence(4); }
    n3 = "("
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    n4 = Type()
    { n1.addNode(n4); }
    n6 = ")"
    { n5 = (NodeToken) n6; }
    { n1.addNode(n5); }
    n7 = UnaryExpression()
    { n1.addNode(n7); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n8 = new NodeSequence(4); }
    n10 = "("
    { n9 = (NodeToken) n10; }
    { n8.addNode(n9); }
    n11 = Type()
    { n8.addNode(n11); }
    n13 = ")"
    { n12 = (NodeToken) n13; }
    { n8.addNode(n12); }
    n14 = UnaryExpressionNotPlusMinus()
    { n8.addNode(n14); }
    { n0 = new NodeChoice(n8, 1, 2); }
  )
  { jtbNode = new CastExpression(n0); }
  { return jtbNode; }
}

PrimaryExpression PrimaryExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryPrefix n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  PrimarySuffix n3 = null;
  PrimaryExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = PrimaryPrefix()
  (
    LOOKAHEAD( 2 )
    { n2 = new NodeSequence(1); }
    n3 = PrimarySuffix()
    { n2.addNode(n3); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new PrimaryExpression(n0, n1); }
  { return jtbNode; }
}

MemberSelector MemberSelector() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  TypeArguments n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MemberSelector jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "."
  { n0 = (NodeToken) n1; }
  n2 = TypeArguments()
  n4 = < IDENTIFIER >
  { n3 = (NodeToken) n4; }
  { jtbNode = new MemberSelector(n0, n2, n3); }
  { return jtbNode; }
}

PrimaryPrefix PrimaryPrefix() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  Literal n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  Expression n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeSequence n19 = null;
  AllocationExpression n20 = null;
  NodeSequence n21 = null;
  ResultType n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeSequence n27 = null;
  Name n28 = null;
  PrimaryPrefix jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(1); }
    n2 = Literal()
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 7); }
  |
    { n3 = new NodeSequence(1); }
    n5 = "this"
    { n4 = (NodeToken) n5; }
    { n3.addNode(n4); }
    { n0 = new NodeChoice(n3, 1, 7); }
  |
    { n6 = new NodeSequence(3); }
    n8 = "super"
    { n7 = (NodeToken) n8; }
    { n6.addNode(n7); }
    n10 = "."
    { n9 = (NodeToken) n10; }
    { n6.addNode(n9); }
    n12 = < IDENTIFIER >
    { n11 = (NodeToken) n12; }
    { n6.addNode(n11); }
    { n0 = new NodeChoice(n6, 2, 7); }
  |
    { n13 = new NodeSequence(3); }
    n15 = "("
    { n14 = (NodeToken) n15; }
    { n13.addNode(n14); }
    n16 = Expression(null)
    { n13.addNode(n16); }
    n18 = ")"
    { n17 = (NodeToken) n18; }
    { n13.addNode(n17); }
    { n0 = new NodeChoice(n13, 3, 7); }
  |
    { n19 = new NodeSequence(1); }
    n20 = AllocationExpression()
    { n19.addNode(n20); }
    { n0 = new NodeChoice(n19, 4, 7); }
  |
    LOOKAHEAD( ResultType(null)
    "."
    "class" )
    { n21 = new NodeSequence(3); }
    n22 = ResultType(null)
    { n21.addNode(n22); }
    n24 = "."
    { n23 = (NodeToken) n24; }
    { n21.addNode(n23); }
    n26 = "class"
    { n25 = (NodeToken) n26; }
    { n21.addNode(n25); }
    { n0 = new NodeChoice(n21, 5, 7); }
  |
    { n27 = new NodeSequence(1); }
    n28 = Name(null)
    { n27.addNode(n28); }
    { n0 = new NodeChoice(n27, 6, 7); }
  )
  { jtbNode = new PrimaryPrefix(n0); }
  { return jtbNode; }
}

PrimarySuffix PrimarySuffix() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  AllocationExpression n9 = null;
  NodeSequence n10 = null;
  MemberSelector n11 = null;
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  Expression n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeSequence n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeSequence n23 = null;
  Arguments n24 = null;
  PrimarySuffix jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    LOOKAHEAD( 2 )
    { n1 = new NodeSequence(2); }
    n3 = "."
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    n5 = "this"
    { n4 = (NodeToken) n5; }
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 6); }
  |
    LOOKAHEAD( 2 )
    { n6 = new NodeSequence(2); }
    n8 = "."
    { n7 = (NodeToken) n8; }
    { n6.addNode(n7); }
    n9 = AllocationExpression()
    { n6.addNode(n9); }
    { n0 = new NodeChoice(n6, 1, 6); }
  |
    LOOKAHEAD( 3 )
    { n10 = new NodeSequence(1); }
    n11 = MemberSelector()
    { n10.addNode(n11); }
    { n0 = new NodeChoice(n10, 2, 6); }
  |
    { n12 = new NodeSequence(3); }
    n14 = "["
    { n13 = (NodeToken) n14; }
    { n12.addNode(n13); }
    n15 = Expression(null)
    { n12.addNode(n15); }
    n17 = "]"
    { n16 = (NodeToken) n17; }
    { n12.addNode(n16); }
    { n0 = new NodeChoice(n12, 3, 6); }
  |
    { n18 = new NodeSequence(2); }
    n20 = "."
    { n19 = (NodeToken) n20; }
    { n18.addNode(n19); }
    n22 = < IDENTIFIER >
    { n21 = (NodeToken) n22; }
    { n18.addNode(n21); }
    { n0 = new NodeChoice(n18, 4, 6); }
  |
    { n23 = new NodeSequence(1); }
    n24 = Arguments(null)
    { n23.addNode(n24); }
    { n0 = new NodeChoice(n23, 5, 6); }
  )
  { jtbNode = new PrimarySuffix(n0); }
  { return jtbNode; }
}

Literal Literal() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  BooleanLiteral n14 = null;
  NodeSequence n15 = null;
  NullLiteral n16 = null;
  Literal jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(1); }
    n3 = < INTEGER_LITERAL >
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 6); }
  |
    { n4 = new NodeSequence(1); }
    n6 = < FLOATING_POINT_LITERAL >
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    { n0 = new NodeChoice(n4, 1, 6); }
  |
    { n7 = new NodeSequence(1); }
    n9 = < CHARACTER_LITERAL >
    { n8 = (NodeToken) n9; }
    { n7.addNode(n8); }
    { n0 = new NodeChoice(n7, 2, 6); }
  |
    { n10 = new NodeSequence(1); }
    // not a StringLiteral() ! only in CastLookahead and PrimaryPrefix
    n12 = < STRING_LITERAL >
    { n11 = (NodeToken) n12; }
    { n10.addNode(n11); }
    { n0 = new NodeChoice(n10, 3, 6); }
  |
    { n13 = new NodeSequence(1); }
    n14 = BooleanLiteral()
    { n13.addNode(n14); }
    { n0 = new NodeChoice(n13, 4, 6); }
  |
    { n15 = new NodeSequence(1); }
    n16 = NullLiteral()
    { n15.addNode(n16); }
    { n0 = new NodeChoice(n15, 5, 6); }
  )
  { jtbNode = new Literal(n0); }
  { return jtbNode; }
}

IntegerLiteral IntegerLiteral() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  IntegerLiteral jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = < INTEGER_LITERAL >
  { n0 = (NodeToken) n1; }
  {
    try {
      jtbrt_IntegerLiteral = Integer.parseInt(token.image);
    }
    catch (NumberFormatException e) {
      throw new Error();
    }
  }
  { jtbNode = new IntegerLiteral(n0); }
  { return jtbNode; }
}

BooleanLiteral BooleanLiteral() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  BooleanLiteral jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(1); }
    n3 = "true"
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
    {
      jtbrt_BooleanLiteral = true;
    }
  |
    { n4 = new NodeSequence(1); }
    n6 = "false"
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    { n0 = new NodeChoice(n4, 1, 2); }
    {
      jtbrt_BooleanLiteral = false;
    }
  )
  { jtbNode = new BooleanLiteral(n0); }
  { return jtbNode; }
}

StringLiteral StringLiteral() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  StringLiteral jtbNode = null;
  // --- user BNFProduction java block ---
  Token t = null;
  ;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = < STRING_LITERAL >
  { n0 = (NodeToken) n1; }
  { t = n1; }
  { jtbNode = new StringLiteral(n0); }
  {
    jtbrt_StringLiteral = remove_escapes_and_quotes(t, t.image);
  }
  { return jtbNode; }
}

NullLiteral NullLiteral() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NullLiteral jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "null"
  { n0 = (NodeToken) n1; }
  { jtbNode = new NullLiteral(n0); }
  { return jtbNode; }
}

Arguments Arguments(List<Token> tokens) :
/* Parsing this fills "tokens" with all tokens of the arguments excluding the parentheses at each end */
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  ArgumentList n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Arguments jtbNode = null;
  // --- user BNFProduction java block ---
  Token first = null;
  Token last = null;
  if (tokens == null)
    tokens = new ArrayList<Token>();
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "("
  { n0 = (NodeToken) n1; }
  {
    first = getToken(1);
  }
  [
    { n3 = new NodeSequence(1); }
    n4 = ArgumentList()
    { n3.addNode(n4); }
    { n2.addNode(n3); }
  ]
  {
    last = getToken(0);
  }
  n6 = ")"
  { n5 = (NodeToken) n6; }
  {
    if (last.next != first) {
      // i.e., this is not an empty sequence
      Token t = first;
      while (true) {
        tokens.add(t);
        if (t == last)
          break;
        t = t.next;
      } 
    }
  }
  { jtbNode = new Arguments(n0, n2, n5); }
  { return jtbNode; }
}

ArgumentList ArgumentList() :
{
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  ArgumentList jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = Expression(null)
  (
    { n2 = new NodeSequence(2); }
    n4 = ","
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = Expression(null)
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new ArgumentList(n0, n1); }
  { return jtbNode; }
}

AllocationExpression AllocationExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  PrimitiveType n4 = null;
  ArrayDimsAndInits n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  ClassOrInterfaceType n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeChoice n11 = null;
  NodeSequence n12 = null;
  EmptyTypeArguments n13 = null;
  NodeSequence n14 = null;
  TypeArguments n15 = null;
  NodeChoice n16 = null;
  NodeSequence n17 = null;
  ArrayDimsAndInits n18 = null;
  NodeSequence n19 = null;
  Arguments n20 = null;
  NodeOptional n21 = new NodeOptional();
  NodeSequence n22 = null;
  ClassOrInterfaceBody n23 = null;
  AllocationExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    LOOKAHEAD( 2 )
    { n1 = new NodeSequence(3); }
    n3 = "new"
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    n4 = PrimitiveType()
    { n1.addNode(n4); }
    n5 = ArrayDimsAndInits()
    { n1.addNode(n5); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n6 = new NodeSequence(4); }
    n8 = "new"
    { n7 = (NodeToken) n8; }
    { n6.addNode(n7); }
    n9 = ClassOrInterfaceType()
    { n6.addNode(n9); }
    [
      (
        LOOKAHEAD( 2 )
        { n12 = new NodeSequence(1); }
        n13 = EmptyTypeArguments()
        { n12.addNode(n13); }
        { n11 = new NodeChoice(n12, 0, 2); }
      |
        { n14 = new NodeSequence(1); }
        n15 = TypeArguments()
        { n14.addNode(n15); }
        { n11 = new NodeChoice(n14, 1, 2); }
      )
      { n10.addNode(n11); }
    ]
    { n6.addNode(n10); }
    (
      (
        { n17 = new NodeSequence(1); }
        n18 = ArrayDimsAndInits()
        { n17.addNode(n18); }
        { n16 = new NodeChoice(n17, 0, 2); }
      |
        { n19 = new NodeSequence(2); }
        n20 = Arguments(null)
        { n19.addNode(n20); }
        [
          { n22 = new NodeSequence(1); }
          n23 = ClassOrInterfaceBody(false, null)
          { n22.addNode(n23); }
          { n21.addNode(n22); }
        ]
        { n19.addNode(n21); }
        { n16 = new NodeChoice(n19, 1, 2); }
      )
    )
    { n6.addNode(n16); }
    { n0 = new NodeChoice(n6, 1, 2); }
  )
  { jtbNode = new AllocationExpression(n0); }
  { return jtbNode; }
}

ArrayDimsAndInits ArrayDimsAndInits() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeList n2 = new NodeList();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Expression n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeListOptional n9 = new NodeListOptional();
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeSequence n15 = null;
  NodeList n16 = new NodeList();
  NodeSequence n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  ArrayInitializer n22 = null;
  ArrayDimsAndInits jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    LOOKAHEAD( 2 )
    { n1 = new NodeSequence(2); }
    (
      LOOKAHEAD( 2 )
      { n3 = new NodeSequence(3); }
      n5 = "["
      { n4 = (NodeToken) n5; }
      { n3.addNode(n4); }
      n6 = Expression(null)
      { n3.addNode(n6); }
      n8 = "]"
      { n7 = (NodeToken) n8; }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
    )+
    { n2.nodes.trimToSize(); }
    { n1.addNode(n2); }
    (
      LOOKAHEAD( 2 )
      { n10 = new NodeSequence(2); }
      n12 = "["
      { n11 = (NodeToken) n12; }
      { n10.addNode(n11); }
      n14 = "]"
      { n13 = (NodeToken) n14; }
      { n10.addNode(n13); }
      { n9.addNode(n10); }
    )*
    { n9.nodes.trimToSize(); }
    { n1.addNode(n9); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n15 = new NodeSequence(2); }
    (
      { n17 = new NodeSequence(2); }
      n19 = "["
      { n18 = (NodeToken) n19; }
      { n17.addNode(n18); }
      n21 = "]"
      { n20 = (NodeToken) n21; }
      { n17.addNode(n20); }
      { n16.addNode(n17); }
    )+
    { n16.nodes.trimToSize(); }
    { n15.addNode(n16); }
    n22 = ArrayInitializer()
    { n15.addNode(n22); }
    { n0 = new NodeChoice(n15, 1, 2); }
  )
  { jtbNode = new ArrayDimsAndInits(n0); }
  { return jtbNode; }
}

Statement Statement() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  LabeledStatement n2 = null;
  NodeSequence n3 = null;
  AssertStatement n4 = null;
  NodeSequence n5 = null;
  Block n6 = null;
  NodeSequence n7 = null;
  EmptyStatement n8 = null;
  NodeSequence n9 = null;
  StatementExpression n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  SwitchStatement n14 = null;
  NodeSequence n15 = null;
  IfStatement n16 = null;
  NodeSequence n17 = null;
  WhileStatement n18 = null;
  NodeSequence n19 = null;
  DoStatement n20 = null;
  NodeSequence n21 = null;
  ForStatement n22 = null;
  NodeSequence n23 = null;
  BreakStatement n24 = null;
  NodeSequence n25 = null;
  ContinueStatement n26 = null;
  NodeSequence n27 = null;
  ReturnStatement n28 = null;
  NodeSequence n29 = null;
  ThrowStatement n30 = null;
  NodeSequence n31 = null;
  SynchronizedStatement n32 = null;
  NodeSequence n33 = null;
  TryStatement n34 = null;
  Statement jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    LOOKAHEAD( 2 )
    { n1 = new NodeSequence(1); }
    n2 = LabeledStatement()
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 16); }
  |
    { n3 = new NodeSequence(1); }
    n4 = AssertStatement()
    { n3.addNode(n4); }
    { n0 = new NodeChoice(n3, 1, 16); }
  |
    { n5 = new NodeSequence(1); }
    n6 = Block(null)
    { n5.addNode(n6); }
    { n0 = new NodeChoice(n5, 2, 16); }
  |
    { n7 = new NodeSequence(1); }
    n8 = EmptyStatement()
    { n7.addNode(n8); }
    { n0 = new NodeChoice(n7, 3, 16); }
  |
    { n9 = new NodeSequence(2); }
    n10 = StatementExpression()
    { n9.addNode(n10); }
    n12 = ";"
    { n11 = (NodeToken) n12; }
    { n9.addNode(n11); }
    { n0 = new NodeChoice(n9, 4, 16); }
  |
    { n13 = new NodeSequence(1); }
    n14 = SwitchStatement()
    { n13.addNode(n14); }
    { n0 = new NodeChoice(n13, 5, 16); }
  |
    { n15 = new NodeSequence(1); }
    n16 = IfStatement()
    { n15.addNode(n16); }
    { n0 = new NodeChoice(n15, 6, 16); }
  |
    { n17 = new NodeSequence(1); }
    n18 = WhileStatement()
    { n17.addNode(n18); }
    { n0 = new NodeChoice(n17, 7, 16); }
  |
    { n19 = new NodeSequence(1); }
    n20 = DoStatement()
    { n19.addNode(n20); }
    { n0 = new NodeChoice(n19, 8, 16); }
  |
    { n21 = new NodeSequence(1); }
    n22 = ForStatement()
    { n21.addNode(n22); }
    { n0 = new NodeChoice(n21, 9, 16); }
  |
    { n23 = new NodeSequence(1); }
    n24 = BreakStatement()
    { n23.addNode(n24); }
    { n0 = new NodeChoice(n23, 10, 16); }
  |
    { n25 = new NodeSequence(1); }
    n26 = ContinueStatement()
    { n25.addNode(n26); }
    { n0 = new NodeChoice(n25, 11, 16); }
  |
    { n27 = new NodeSequence(1); }
    n28 = ReturnStatement()
    { n27.addNode(n28); }
    { n0 = new NodeChoice(n27, 12, 16); }
  |
    { n29 = new NodeSequence(1); }
    n30 = ThrowStatement()
    { n29.addNode(n30); }
    { n0 = new NodeChoice(n29, 13, 16); }
  |
    { n31 = new NodeSequence(1); }
    n32 = SynchronizedStatement()
    { n31.addNode(n32); }
    { n0 = new NodeChoice(n31, 14, 16); }
  |
    { n33 = new NodeSequence(1); }
    n34 = TryStatement()
    { n33.addNode(n34); }
    { n0 = new NodeChoice(n33, 15, 16); }
  )
  { jtbNode = new Statement(n0); }
  { return jtbNode; }
}

AssertStatement AssertStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Expression n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Expression n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  AssertStatement jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "assert"
  { n0 = (NodeToken) n1; }
  n2 = Expression(null)
  [
    { n4 = new NodeSequence(2); }
    n6 = ":"
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    n7 = Expression(null)
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  ]
  n9 = ";"
  { n8 = (NodeToken) n9; }
  { jtbNode = new AssertStatement(n0, n2, n3, n8); }
  { return jtbNode; }
}

LabeledStatement LabeledStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Statement n4 = null;
  LabeledStatement jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = < IDENTIFIER >
  { n0 = (NodeToken) n1; }
  n3 = ":"
  { n2 = (NodeToken) n3; }
  n4 = Statement()
  { jtbNode = new LabeledStatement(n0, n2, n4); }
  { return jtbNode; }
}

Block Block(List<Token> tokens) :
/* Parsing this fills "tokens" with all tokens of the block excluding the braces at each end */
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  BlockStatement n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Block jtbNode = null;
  // --- user BNFProduction java block ---
  Token first = null;
  Token last = null;
  if (tokens == null)
    tokens = new ArrayList<Token>();
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "{"
  { n0 = (NodeToken) n1; }
  {
    first = getToken(1);
  }
  (
    { n3 = new NodeSequence(1); }
    n4 = BlockStatement()
    { n3.addNode(n4); }
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  {
    last = getToken(0);
  }
  n6 = "}"
  { n5 = (NodeToken) n6; }
  {
    if (last.next != first) {
      // i.e., this is not an empty sequence
      Token t = first;
      while (true) {
        tokens.add(t);
        if (t == last)
          break;
        t = t.next;
      } 
    }
  }
  { jtbNode = new Block(n0, n2, n5); }
  { return jtbNode; }
}

BlockStatement BlockStatement() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  LocalVariableDeclaration n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeSequence n5 = null;
  Statement n6 = null;
  NodeSequence n7 = null;
  ClassOrInterfaceDeclaration n8 = null;
  BlockStatement jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    // ModMMa 2012/07
    //  LOOKAHEAD(Modifiers() Type() JavaIdentifier())
    LOOKAHEAD( VariableModifiers()
    Type()
    JavaIdentifier() )
    { n1 = new NodeSequence(2); }
    n2 = LocalVariableDeclaration()
    { n1.addNode(n2); }
    n4 = ";"
    { n3 = (NodeToken) n4; }
    { n1.addNode(n3); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    { n5 = new NodeSequence(1); }
    n6 = Statement()
    { n5.addNode(n6); }
    { n0 = new NodeChoice(n5, 1, 3); }
  |
    { n7 = new NodeSequence(1); }
    n8 = ClassOrInterfaceDeclaration()
    { n7.addNode(n8); }
    { n0 = new NodeChoice(n7, 2, 3); }
  )
  { jtbNode = new BlockStatement(n0); }
  { return jtbNode; }
}

LocalVariableDeclaration LocalVariableDeclaration() :
{
  // --- JTB generated node declarations ---
  VariableModifiers n0 = null;
  Type n1 = null;
  VariableDeclarator n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  VariableDeclarator n7 = null;
  LocalVariableDeclaration jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  // ModMMa 2012/06
  //  Modifiers() Type() VariableDeclarator()
  n0 = VariableModifiers()
  n1 = Type()
  n2 = VariableDeclarator()
  (
    { n4 = new NodeSequence(2); }
    n6 = ","
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    n7 = VariableDeclarator()
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  { jtbNode = new LocalVariableDeclaration(n0, n1, n2, n3); }
  { return jtbNode; }
}

VariableModifiers VariableModifiers() :
{
  // --- JTB generated node declarations ---
  NodeListOptional n0 = new NodeListOptional();
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeSequence n6 = null;
  Annotation n7 = null;
  VariableModifiers jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    LOOKAHEAD( 2 )
    { n1 = new NodeSequence(1); }
    (
      (
        { n3 = new NodeSequence(1); }
        n5 = "final"
        { n4 = (NodeToken) n5; }
        { n3.addNode(n4); }
        { n2 = new NodeChoice(n3, 0, 2); }
      |
        { n6 = new NodeSequence(1); }
        n7 = Annotation()
        { n6.addNode(n7); }
        { n2 = new NodeChoice(n6, 1, 2); }
      )
    )
    { n1.addNode(n2); }
    { n0.addNode(n1); }
  )*
  { n0.nodes.trimToSize(); }
  { jtbNode = new VariableModifiers(n0); }
  { return jtbNode; }
}

EmptyStatement EmptyStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  EmptyStatement jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = ";"
  { n0 = (NodeToken) n1; }
  { jtbNode = new EmptyStatement(n0); }
  { return jtbNode; }
}

StatementExpression StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal Java expansions for StatementExpression.
 * This expansion does not use PostfixExpression for performance reasons.
 */
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  PreIncrementExpression n2 = null;
  NodeSequence n3 = null;
  PreDecrementExpression n4 = null;
  NodeSequence n5 = null;
  PrimaryExpression n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeChoice n8 = null;
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeSequence n15 = null;
  AssignmentOperator n16 = null;
  Expression n17 = null;
  StatementExpression jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(1); }
    n2 = PreIncrementExpression()
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    { n3 = new NodeSequence(1); }
    n4 = PreDecrementExpression()
    { n3.addNode(n4); }
    { n0 = new NodeChoice(n3, 1, 3); }
  |
    { n5 = new NodeSequence(2); }
    n6 = PrimaryExpression()
    { n5.addNode(n6); }
    [
      (
        { n9 = new NodeSequence(1); }
        n11 = "++"
        { n10 = (NodeToken) n11; }
        { n9.addNode(n10); }
        { n8 = new NodeChoice(n9, 0, 3); }
      |
        { n12 = new NodeSequence(1); }
        n14 = "--"
        { n13 = (NodeToken) n14; }
        { n12.addNode(n13); }
        { n8 = new NodeChoice(n12, 1, 3); }
      |
        { n15 = new NodeSequence(2); }
        n16 = AssignmentOperator()
        { n15.addNode(n16); }
        n17 = Expression(null)
        { n15.addNode(n17); }
        { n8 = new NodeChoice(n15, 2, 3); }
      )
      { n7.addNode(n8); }
    ]
    { n5.addNode(n7); }
    { n0 = new NodeChoice(n5, 2, 3); }
  )
  { jtbNode = new StatementExpression(n0); }
  { return jtbNode; }
}

SwitchStatement SwitchStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeListOptional n9 = new NodeListOptional();
  NodeSequence n10 = null;
  SwitchLabel n11 = null;
  NodeListOptional n12 = null;
  NodeSequence n13 = null;
  BlockStatement n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  SwitchStatement jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "switch"
  { n0 = (NodeToken) n1; }
  n3 = "("
  { n2 = (NodeToken) n3; }
  n4 = Expression(null)
  n6 = ")"
  { n5 = (NodeToken) n6; }
  n8 = "{"
  { n7 = (NodeToken) n8; }
  (
    { n12 = new NodeListOptional(); }
    { n10 = new NodeSequence(2); }
    n11 = SwitchLabel()
    { n10.addNode(n11); }
    (
      { n13 = new NodeSequence(1); }
      n14 = BlockStatement()
      { n13.addNode(n14); }
      { n12.addNode(n13); }
    )*
    { n12.nodes.trimToSize(); }
    { n10.addNode(n12); }
    { n9.addNode(n10); }
  )*
  { n9.nodes.trimToSize(); }
  n16 = "}"
  { n15 = (NodeToken) n16; }
  { jtbNode = new SwitchStatement(n0, n2, n4, n5, n7, n9, n15); }
  { return jtbNode; }
}

SwitchLabel SwitchLabel() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  SwitchLabel jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(3); }
    n3 = "case"
    { n2 = (NodeToken) n3; }
    { n1.addNode(n2); }
    n4 = Expression(null)
    { n1.addNode(n4); }
    n6 = ":"
    { n5 = (NodeToken) n6; }
    { n1.addNode(n5); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n7 = new NodeSequence(2); }
    n9 = "default"
    { n8 = (NodeToken) n9; }
    { n7.addNode(n8); }
    n11 = ":"
    { n10 = (NodeToken) n11; }
    { n7.addNode(n10); }
    { n0 = new NodeChoice(n7, 1, 2); }
  )
  { jtbNode = new SwitchLabel(n0); }
  { return jtbNode; }
}

IfStatement IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling else's to the innermost if statement.
 * The LOOKAHEAD specification is to tell JavaCC that we know what we are doing.
 */
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Statement n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  Statement n12 = null;
  IfStatement jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "if"
  { n0 = (NodeToken) n1; }
  n3 = "("
  { n2 = (NodeToken) n3; }
  n4 = Expression(null)
  n6 = ")"
  { n5 = (NodeToken) n6; }
  n7 = Statement()
  [
    LOOKAHEAD( 1 )
    { n9 = new NodeSequence(2); }
    n11 = "else"
    { n10 = (NodeToken) n11; }
    { n9.addNode(n10); }
    n12 = Statement()
    { n9.addNode(n12); }
    { n8.addNode(n9); }
  ]
  { jtbNode = new IfStatement(n0, n2, n4, n5, n7, n8); }
  { return jtbNode; }
}

WhileStatement WhileStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Statement n7 = null;
  WhileStatement jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "while"
  { n0 = (NodeToken) n1; }
  n3 = "("
  { n2 = (NodeToken) n3; }
  n4 = Expression(null)
  n6 = ")"
  { n5 = (NodeToken) n6; }
  n7 = Statement()
  { jtbNode = new WhileStatement(n0, n2, n4, n5, n7); }
  { return jtbNode; }
}

DoStatement DoStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Statement n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Expression n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  DoStatement jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "do"
  { n0 = (NodeToken) n1; }
  n2 = Statement()
  n4 = "while"
  { n3 = (NodeToken) n4; }
  n6 = "("
  { n5 = (NodeToken) n6; }
  n7 = Expression(null)
  n9 = ")"
  { n8 = (NodeToken) n9; }
  n11 = ";"
  { n10 = (NodeToken) n11; }
  { jtbNode = new DoStatement(n0, n2, n3, n5, n7, n8, n10); }
  { return jtbNode; }
}

ForStatement ForStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeChoice n4 = null;
  NodeSequence n5 = null;
  VariableModifiers n6 = null;
  Type n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  Expression n12 = null;
  NodeSequence n13 = null;
  NodeOptional n14 = new NodeOptional();
  NodeSequence n15 = null;
  ForInit n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeOptional n19 = new NodeOptional();
  NodeSequence n20 = null;
  Expression n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeOptional n24 = new NodeOptional();
  NodeSequence n25 = null;
  ForUpdate n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  Statement n29 = null;
  ForStatement jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "for"
  { n0 = (NodeToken) n1; }
  n3 = "("
  { n2 = (NodeToken) n3; }
  (
    (
      // ModMMa : fixed grammar
      // LOOKAHEAD(Modifiers() Type() < IDENTIFIER > ":")
      // Modifiers() Type() < IDENTIFIER > ":" Expression(null)
      LOOKAHEAD( VariableModifiers()
      Type()
      < IDENTIFIER >
      ":" )
      { n5 = new NodeSequence(5); }
      n6 = VariableModifiers()
      { n5.addNode(n6); }
      n7 = Type()
      { n5.addNode(n7); }
      n9 = < IDENTIFIER >
      { n8 = (NodeToken) n9; }
      { n5.addNode(n8); }
      n11 = ":"
      { n10 = (NodeToken) n11; }
      { n5.addNode(n10); }
      n12 = Expression(null)
      { n5.addNode(n12); }
      { n4 = new NodeChoice(n5, 0, 2); }
    |
      { n13 = new NodeSequence(5); }
      [
        { n15 = new NodeSequence(1); }
        n16 = ForInit()
        { n15.addNode(n16); }
        { n14.addNode(n15); }
      ]
      { n13.addNode(n14); }
      n18 = ";"
      { n17 = (NodeToken) n18; }
      { n13.addNode(n17); }
      [
        { n20 = new NodeSequence(1); }
        n21 = Expression(null)
        { n20.addNode(n21); }
        { n19.addNode(n20); }
      ]
      { n13.addNode(n19); }
      n23 = ";"
      { n22 = (NodeToken) n23; }
      { n13.addNode(n22); }
      [
        { n25 = new NodeSequence(1); }
        n26 = ForUpdate()
        { n25.addNode(n26); }
        { n24.addNode(n25); }
      ]
      { n13.addNode(n24); }
      { n4 = new NodeChoice(n13, 1, 2); }
    )
  )
  n28 = ")"
  { n27 = (NodeToken) n28; }
  n29 = Statement()
  { jtbNode = new ForStatement(n0, n2, n4, n27, n29); }
  { return jtbNode; }
}

ForInit ForInit() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  LocalVariableDeclaration n2 = null;
  NodeSequence n3 = null;
  StatementExpressionList n4 = null;
  ForInit jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    // ModMMa : fixed grammar
    // LOOKAHEAD(Modifiers() Type() < IDENTIFIER >)
    LOOKAHEAD( VariableModifiers()
    Type()
    < IDENTIFIER > )
    { n1 = new NodeSequence(1); }
    n2 = LocalVariableDeclaration()
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n3 = new NodeSequence(1); }
    n4 = StatementExpressionList()
    { n3.addNode(n4); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { jtbNode = new ForInit(n0); }
  { return jtbNode; }
}

StatementExpressionList StatementExpressionList() :
{
  // --- JTB generated node declarations ---
  StatementExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  StatementExpression n5 = null;
  StatementExpressionList jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = StatementExpression()
  (
    { n2 = new NodeSequence(2); }
    n4 = ","
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = StatementExpression()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new StatementExpressionList(n0, n1); }
  { return jtbNode; }
}

ForUpdate ForUpdate() :
{
  // --- JTB generated node declarations ---
  StatementExpressionList n0 = null;
  ForUpdate jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = StatementExpressionList()
  { jtbNode = new ForUpdate(n0); }
  { return jtbNode; }
}

BreakStatement BreakStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  BreakStatement jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "break"
  { n0 = (NodeToken) n1; }
  [
    { n3 = new NodeSequence(1); }
    n5 = < IDENTIFIER >
    { n4 = (NodeToken) n5; }
    { n3.addNode(n4); }
    { n2.addNode(n3); }
  ]
  n7 = ";"
  { n6 = (NodeToken) n7; }
  { jtbNode = new BreakStatement(n0, n2, n6); }
  { return jtbNode; }
}

ContinueStatement ContinueStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  ContinueStatement jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "continue"
  { n0 = (NodeToken) n1; }
  [
    { n3 = new NodeSequence(1); }
    n5 = < IDENTIFIER >
    { n4 = (NodeToken) n5; }
    { n3.addNode(n4); }
    { n2.addNode(n3); }
  ]
  n7 = ";"
  { n6 = (NodeToken) n7; }
  { jtbNode = new ContinueStatement(n0, n2, n6); }
  { return jtbNode; }
}

ReturnStatement ReturnStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  ReturnStatement jtbNode = null;
  // --- user BNFProduction java block ---
  Token t = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "return"
  { n0 = (NodeToken) n1; }
  { t = n1; }
  {
    // Add if statement to prevent subsequent code generated from being dead code
    if (inAction) {
      t.image = "{if (true) return";
      jumpPatched = true;
    }
  }
  [
    { n3 = new NodeSequence(1); }
    n4 = Expression(null)
    { n3.addNode(n4); }
    { n2.addNode(n3); }
  ]
  n6 = ";"
  { n5 = (NodeToken) n6; }
  { t = n6; }
  {
    // Add closing brace for above if statement
    if (inAction)
      t.image = ";}";
  }
  { jtbNode = new ReturnStatement(n0, n2, n5); }
  { return jtbNode; }
}

ThrowStatement ThrowStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Expression n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ThrowStatement jtbNode = null;
  // --- user BNFProduction java block ---
  Token t = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "throw"
  { n0 = (NodeToken) n1; }
  { t = n1; }
  {
    // Add if statement to prevent subsequent code generated from being dead code
    if (inAction) {
      t.image = "{if (true) throw";
      jumpPatched = true;
    }
  }
  n2 = Expression(null)
  n4 = ";"
  { n3 = (NodeToken) n4; }
  { t = n4; }
  {
    // Add closing brace for above if statement
    if (inAction)
      t.image = ";}";
  }
  { jtbNode = new ThrowStatement(n0, n2, n3); }
  { return jtbNode; }
}

SynchronizedStatement SynchronizedStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Block n7 = null;
  SynchronizedStatement jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "synchronized"
  { n0 = (NodeToken) n1; }
  n3 = "("
  { n2 = (NodeToken) n3; }
  n4 = Expression(null)
  n6 = ")"
  { n5 = (NodeToken) n6; }
  n7 = Block(null)
  { jtbNode = new SynchronizedStatement(n0, n2, n4, n5, n7); }
  { return jtbNode; }
}

TryStatement TryStatement() :
/* Semantic check required here to make sure that at least one finally/catch is present */
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Block n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  FormalParameter n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  Block n12 = null;
  NodeOptional n13 = new NodeOptional();
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  Block n17 = null;
  TryStatement jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "try"
  { n0 = (NodeToken) n1; }
  n2 = Block(null)
  (
    { n4 = new NodeSequence(5); }
    n6 = "catch"
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    n8 = "("
    { n7 = (NodeToken) n8; }
    { n4.addNode(n7); }
    n9 = FormalParameter()
    { n4.addNode(n9); }
    n11 = ")"
    { n10 = (NodeToken) n11; }
    { n4.addNode(n10); }
    n12 = Block(null)
    { n4.addNode(n12); }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  [
    { n14 = new NodeSequence(2); }
    n16 = "finally"
    { n15 = (NodeToken) n16; }
    { n14.addNode(n15); }
    n17 = Block(null)
    { n14.addNode(n17); }
    { n13.addNode(n14); }
  ]
  { jtbNode = new TryStatement(n0, n2, n3, n13); }
  { return jtbNode; }
}

Annotation Annotation() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NormalAnnotation n2 = null;
  NodeSequence n3 = null;
  SingleMemberAnnotation n4 = null;
  NodeSequence n5 = null;
  MarkerAnnotation n6 = null;
  Annotation jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    // ModMMa 2012/09 : fixed (added parentheses)
    LOOKAHEAD( "@"
    Name(null)
    "("
    (
      < IDENTIFIER >
      "="
    |
      ")"
    ) )
    { n1 = new NodeSequence(1); }
    n2 = NormalAnnotation()
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    LOOKAHEAD( "@"
    Name(null)
    "(" )
    { n3 = new NodeSequence(1); }
    n4 = SingleMemberAnnotation()
    { n3.addNode(n4); }
    { n0 = new NodeChoice(n3, 1, 3); }
  |
    { n5 = new NodeSequence(1); }
    n6 = MarkerAnnotation()
    { n5.addNode(n6); }
    { n0 = new NodeChoice(n5, 2, 3); }
  )
  { jtbNode = new Annotation(n0); }
  { return jtbNode; }
}

NormalAnnotation NormalAnnotation() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Name n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeSequence n6 = null;
  MemberValuePairs n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NormalAnnotation jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "@"
  { n0 = (NodeToken) n1; }
  n2 = Name(null)
  n4 = "("
  { n3 = (NodeToken) n4; }
  [
    { n6 = new NodeSequence(1); }
    n7 = MemberValuePairs()
    { n6.addNode(n7); }
    { n5.addNode(n6); }
  ]
  n9 = ")"
  { n8 = (NodeToken) n9; }
  { jtbNode = new NormalAnnotation(n0, n2, n3, n5, n8); }
  { return jtbNode; }
}

MarkerAnnotation MarkerAnnotation() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Name n2 = null;
  MarkerAnnotation jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "@"
  { n0 = (NodeToken) n1; }
  n2 = Name(null)
  { jtbNode = new MarkerAnnotation(n0, n2); }
  { return jtbNode; }
}

SingleMemberAnnotation SingleMemberAnnotation() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Name n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MemberValue n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  SingleMemberAnnotation jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "@"
  { n0 = (NodeToken) n1; }
  n2 = Name(null)
  n4 = "("
  { n3 = (NodeToken) n4; }
  n5 = MemberValue()
  n7 = ")"
  { n6 = (NodeToken) n7; }
  { jtbNode = new SingleMemberAnnotation(n0, n2, n3, n5, n6); }
  { return jtbNode; }
}

MemberValuePairs MemberValuePairs() :
{
  // --- JTB generated node declarations ---
  MemberValuePair n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MemberValuePair n5 = null;
  MemberValuePairs jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n0 = MemberValuePair()
  (
    { n2 = new NodeSequence(2); }
    n4 = ","
    { n3 = (NodeToken) n4; }
    { n2.addNode(n3); }
    n5 = MemberValuePair()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { jtbNode = new MemberValuePairs(n0, n1); }
  { return jtbNode; }
}

MemberValuePair MemberValuePair() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  MemberValue n4 = null;
  MemberValuePair jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = < IDENTIFIER >
  { n0 = (NodeToken) n1; }
  n3 = "="
  { n2 = (NodeToken) n3; }
  n4 = MemberValue()
  { jtbNode = new MemberValuePair(n0, n2, n4); }
  { return jtbNode; }
}

MemberValue MemberValue() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  Annotation n2 = null;
  NodeSequence n3 = null;
  MemberValueArrayInitializer n4 = null;
  NodeSequence n5 = null;
  ConditionalExpression n6 = null;
  MemberValue jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(1); }
    n2 = Annotation()
    { n1.addNode(n2); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    { n3 = new NodeSequence(1); }
    n4 = MemberValueArrayInitializer()
    { n3.addNode(n4); }
    { n0 = new NodeChoice(n3, 1, 3); }
  |
    { n5 = new NodeSequence(1); }
    n6 = ConditionalExpression()
    { n5.addNode(n6); }
    { n0 = new NodeChoice(n5, 2, 3); }
  )
  { jtbNode = new MemberValue(n0); }
  { return jtbNode; }
}

MemberValueArrayInitializer MemberValueArrayInitializer() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  MemberValue n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  MemberValue n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  MemberValueArrayInitializer jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "{"
  { n0 = (NodeToken) n1; }
  n2 = MemberValue()
  (
    LOOKAHEAD( 2 )
    { n4 = new NodeSequence(2); }
    n6 = ","
    { n5 = (NodeToken) n6; }
    { n4.addNode(n5); }
    n7 = MemberValue()
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  [
    { n9 = new NodeSequence(1); }
    n11 = ","
    { n10 = (NodeToken) n11; }
    { n9.addNode(n10); }
    { n8.addNode(n9); }
  ]
  n13 = "}"
  { n12 = (NodeToken) n13; }
  { jtbNode = new MemberValueArrayInitializer(n0, n2, n3, n8, n12); }
  { return jtbNode; }
}

AnnotationTypeDeclaration AnnotationTypeDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  AnnotationTypeBody n6 = null;
  AnnotationTypeDeclaration jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "@"
  { n0 = (NodeToken) n1; }
  n3 = "interface"
  { n2 = (NodeToken) n3; }
  n5 = < IDENTIFIER >
  { n4 = (NodeToken) n5; }
  n6 = AnnotationTypeBody()
  { jtbNode = new AnnotationTypeDeclaration(n0, n2, n4, n6); }
  { return jtbNode; }
}

AnnotationTypeBody AnnotationTypeBody() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  AnnotationTypeMemberDeclaration n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  AnnotationTypeBody jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "{"
  { n0 = (NodeToken) n1; }
  (
    { n3 = new NodeSequence(1); }
    n4 = AnnotationTypeMemberDeclaration()
    { n3.addNode(n4); }
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  n6 = "}"
  { n5 = (NodeToken) n6; }
  { jtbNode = new AnnotationTypeBody(n0, n2, n5); }
  { return jtbNode; }
}

AnnotationTypeMemberDeclaration AnnotationTypeMemberDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  Modifiers n2 = null;
  NodeChoice n3 = null;
  NodeSequence n4 = null;
  Type n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeOptional n12 = new NodeOptional();
  NodeSequence n13 = null;
  DefaultValue n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeSequence n17 = null;
  ClassOrInterfaceDeclaration n18 = null;
  NodeSequence n19 = null;
  EnumDeclaration n20 = null;
  NodeSequence n21 = null;
  AnnotationTypeDeclaration n22 = null;
  NodeSequence n23 = null;
  FieldDeclaration n24 = null;
  NodeSequence n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  AnnotationTypeMemberDeclaration jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  (
    { n1 = new NodeSequence(2); }
    n2 = Modifiers()
    { n1.addNode(n2); }
    (
      (
        LOOKAHEAD( Type()
        < IDENTIFIER >
        "(" )
        { n4 = new NodeSequence(6); }
        n5 = Type()
        { n4.addNode(n5); }
        n7 = < IDENTIFIER >
        { n6 = (NodeToken) n7; }
        { n4.addNode(n6); }
        n9 = "("
        { n8 = (NodeToken) n9; }
        { n4.addNode(n8); }
        n11 = ")"
        { n10 = (NodeToken) n11; }
        { n4.addNode(n10); }
        [
          { n13 = new NodeSequence(1); }
          n14 = DefaultValue()
          { n13.addNode(n14); }
          { n12.addNode(n13); }
        ]
        { n4.addNode(n12); }
        n16 = ";"
        { n15 = (NodeToken) n16; }
        { n4.addNode(n15); }
        { n3 = new NodeChoice(n4, 0, 5); }
      |
        { n17 = new NodeSequence(1); }
        n18 = ClassOrInterfaceDeclaration()
        { n17.addNode(n18); }
        { n3 = new NodeChoice(n17, 1, 5); }
      |
        { n19 = new NodeSequence(1); }
        n20 = EnumDeclaration()
        { n19.addNode(n20); }
        { n3 = new NodeChoice(n19, 2, 5); }
      |
        { n21 = new NodeSequence(1); }
        n22 = AnnotationTypeDeclaration()
        { n21.addNode(n22); }
        { n3 = new NodeChoice(n21, 3, 5); }
      |
        { n23 = new NodeSequence(1); }
        n24 = FieldDeclaration()
        { n23.addNode(n24); }
        { n3 = new NodeChoice(n23, 4, 5); }
      )
    )
    { n1.addNode(n3); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n25 = new NodeSequence(1); }
    n27 = ";"
    { n26 = (NodeToken) n27; }
    { n25.addNode(n26); }
    { n0 = new NodeChoice(n25, 1, 2); }
  )
  { jtbNode = new AnnotationTypeMemberDeclaration(n0); }
  { return jtbNode; }
}

DefaultValue DefaultValue() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  MemberValue n2 = null;
  DefaultValue jtbNode = null;
}
{
  // --- user BNFProduction ExpansionChoices ---
  n1 = "default"
  { n0 = (NodeToken) n1; }
  n2 = MemberValue()
  { jtbNode = new DefaultValue(n0, n2); }
  { return jtbNode; }
}

/* IDENTIFIERS */
TOKEN :
{
  < IDENTIFIER : <LETTER>( <PART_LETTER> )* >
| < #LETTER : [// all chars for which Character.isIdentifierStart is true
  "$", "A"-"Z", "_", "a"-"z", "\u00a2"-"\u00a5", "\u00aa", "\u00b5", "\u00ba", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u021f", "\u0222"-"\u0233", "\u0250"-"\u02ad", "\u02b0"-"\u02b8", "\u02bb"-"\u02c1", "\u02d0"-"\u02d1", "\u02e0"-"\u02e4", "\u02ee", "\u037a", "\u0386", "\u0388"-"\u038a", "\u038c", "\u038e"-"\u03a1", "\u03a3"-"\u03ce", "\u03d0"-"\u03d7", "\u03da"-"\u03f3", "\u0400"-"\u0481", "\u048c"-"\u04c4", "\u04c7"-"\u04c8", "\u04cb"-"\u04cc", "\u04d0"-"\u04f5", "\u04f8"-"\u04f9", "\u0531"-"\u0556", "\u0559", "\u0561"-"\u0587", "\u05d0"-"\u05ea", "\u05f0"-"\u05f2", "\u0621"-"\u063a", "\u0640"-"\u064a", "\u0671"-"\u06d3", "\u06d5", "\u06e5"-"\u06e6", "\u06fa"-"\u06fc", "\u0710", "\u0712"-"\u072c", "\u0780"-"\u07a5", "\u0905"-"\u0939", "\u093d", "\u0950", "\u0958"-"\u0961", "\u0985"-"\u098c", "\u098f"-"\u0990", "\u0993"-"\u09a8", "\u09aa"-"\u09b0", "\u09b2", "\u09b6"-"\u09b9", "\u09dc"-"\u09dd", "\u09df"-"\u09e1", "\u09f0"-"\u09f3", "\u0a05"-"\u0a0a", "\u0a0f"-"\u0a10", "\u0a13"-"\u0a28", "\u0a2a"-"\u0a30", "\u0a32"-"\u0a33", "\u0a35"-"\u0a36", "\u0a38"-"\u0a39", "\u0a59"-"\u0a5c", "\u0a5e", "\u0a72"-"\u0a74", "\u0a85"-"\u0a8b", "\u0a8d", "\u0a8f"-"\u0a91", "\u0a93"-"\u0aa8", "\u0aaa"-"\u0ab0", "\u0ab2"-"\u0ab3", "\u0ab5"-"\u0ab9", "\u0abd", "\u0ad0", "\u0ae0", "\u0b05"-"\u0b0c", "\u0b0f"-"\u0b10", "\u0b13"-"\u0b28", "\u0b2a"-"\u0b30", "\u0b32"-"\u0b33", "\u0b36"-"\u0b39", "\u0b3d", "\u0b5c"-"\u0b5d", "\u0b5f"-"\u0b61", "\u0b85"-"\u0b8a", "\u0b8e"-"\u0b90", "\u0b92"-"\u0b95", "\u0b99"-"\u0b9a", "\u0b9c", "\u0b9e"-"\u0b9f", "\u0ba3"-"\u0ba4", "\u0ba8"-"\u0baa", "\u0bae"-"\u0bb5", "\u0bb7"-"\u0bb9", "\u0c05"-"\u0c0c", "\u0c0e"-"\u0c10", "\u0c12"-"\u0c28", "\u0c2a"-"\u0c33", "\u0c35"-"\u0c39", "\u0c60"-"\u0c61", "\u0c85"-"\u0c8c", "\u0c8e"-"\u0c90", "\u0c92"-"\u0ca8", "\u0caa"-"\u0cb3", "\u0cb5"-"\u0cb9", "\u0cde", "\u0ce0"-"\u0ce1", "\u0d05"-"\u0d0c", "\u0d0e"-"\u0d10", "\u0d12"-"\u0d28", "\u0d2a"-"\u0d39", "\u0d60"-"\u0d61", "\u0d85"-"\u0d96", "\u0d9a"-"\u0db1", "\u0db3"-"\u0dbb", "\u0dbd", "\u0dc0"-"\u0dc6", "\u0e01"-"\u0e30", "\u0e32"-"\u0e33", "\u0e3f"-"\u0e46", "\u0e81"-"\u0e82", "\u0e84", "\u0e87"-"\u0e88", "\u0e8a", "\u0e8d", "\u0e94"-"\u0e97", "\u0e99"-"\u0e9f", "\u0ea1"-"\u0ea3", "\u0ea5", "\u0ea7", "\u0eaa"-"\u0eab", "\u0ead"-"\u0eb0", "\u0eb2"-"\u0eb3", "\u0ebd", "\u0ec0"-"\u0ec4", "\u0ec6", "\u0edc"-"\u0edd", "\u0f00", "\u0f40"-"\u0f47", "\u0f49"-"\u0f6a", "\u0f88"-"\u0f8b", "\u1000"-"\u1021", "\u1023"-"\u1027", "\u1029"-"\u102a", "\u1050"-"\u1055", "\u10a0"-"\u10c5", "\u10d0"-"\u10f6", "\u1100"-"\u1159", "\u115f"-"\u11a2", "\u11a8"-"\u11f9", "\u1200"-"\u1206", "\u1208"-"\u1246", "\u1248", "\u124a"-"\u124d", "\u1250"-"\u1256", "\u1258", "\u125a"-"\u125d", "\u1260"-"\u1286", "\u1288", "\u128a"-"\u128d", "\u1290"-"\u12ae", "\u12b0", "\u12b2"-"\u12b5", "\u12b8"-"\u12be", "\u12c0", "\u12c2"-"\u12c5", "\u12c8"-"\u12ce", "\u12d0"-"\u12d6", "\u12d8"-"\u12ee", "\u12f0"-"\u130e", "\u1310", "\u1312"-"\u1315", "\u1318"-"\u131e", "\u1320"-"\u1346", "\u1348"-"\u135a", "\u13a0"-"\u13f4", "\u1401"-"\u166c", "\u166f"-"\u1676", "\u1681"-"\u169a", "\u16a0"-"\u16ea", "\u1780"-"\u17b3", "\u17db", "\u1820"-"\u1877", "\u1880"-"\u18a8", "\u1e00"-"\u1e9b", "\u1ea0"-"\u1ef9", "\u1f00"-"\u1f15", "\u1f18"-"\u1f1d", "\u1f20"-"\u1f45", "\u1f48"-"\u1f4d", "\u1f50"-"\u1f57", "\u1f59", "\u1f5b", "\u1f5d", "\u1f5f"-"\u1f7d", "\u1f80"-"\u1fb4", "\u1fb6"-"\u1fbc", "\u1fbe", "\u1fc2"-"\u1fc4", "\u1fc6"-"\u1fcc", "\u1fd0"-"\u1fd3", "\u1fd6"-"\u1fdb", "\u1fe0"-"\u1fec", "\u1ff2"-"\u1ff4", "\u1ff6"-"\u1ffc", "\u203f"-"\u2040", "\u207f", "\u20a0"-"\u20af", "\u2102", "\u2107", "\u210a"-"\u2113", "\u2115", "\u2119"-"\u211d", "\u2124", "\u2126", "\u2128", "\u212a"-"\u212d", "\u212f"-"\u2131", "\u2133"-"\u2139", "\u2160"-"\u2183", "\u3005"-"\u3007", "\u3021"-"\u3029", "\u3031"-"\u3035", "\u3038"-"\u303a", "\u3041"-"\u3094", "\u309d"-"\u309e", "\u30a1"-"\u30fe", "\u3105"-"\u312c", "\u3131"-"\u318e", "\u31a0"-"\u31b7", "\u3400"-"\u4db5", "\u4e00"-"\u9fa5", "\ua000"-"\ua48c", "\uac00"-"\ud7a3", "\uf900"-"\ufa2d", "\ufb00"-"\ufb06", "\ufb13"-"\ufb17", "\ufb1d", "\ufb1f"-"\ufb28", "\ufb2a"-"\ufb36", "\ufb38"-"\ufb3c", "\ufb3e", "\ufb40"-"\ufb41", "\ufb43"-"\ufb44", "\ufb46"-"\ufbb1", "\ufbd3"-"\ufd3d", "\ufd50"-"\ufd8f", "\ufd92"-"\ufdc7", "\ufdf0"-"\ufdfb", "\ufe33"-"\ufe34", "\ufe4d"-"\ufe4f", "\ufe69", "\ufe70"-"\ufe72", "\ufe74", "\ufe76"-"\ufefc", "\uff04", "\uff21"-"\uff3a", "\uff3f", "\uff41"-"\uff5a", "\uff65"-"\uffbe", "\uffc2"-"\uffc7", "\uffca"-"\uffcf", "\uffd2"-"\uffd7", "\uffda"-"\uffdc", "\uffe0"-"\uffe1", "\uffe5"-"\uffe6"] >
| < #PART_LETTER : [// all chars for which Character.isIdentifierPart is true
  "\u0000"-"", "\u000e"-"\u001b", "$", "0"-"9", "A"-"Z", "_", "a"-"z", "\u007f"-"\u009f", "\u00a2"-"\u00a5", "\u00aa", "\u00b5", "\u00ba", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u021f", "\u0222"-"\u0233", "\u0250"-"\u02ad", "\u02b0"-"\u02b8", "\u02bb"-"\u02c1", "\u02d0"-"\u02d1", "\u02e0"-"\u02e4", "\u02ee", "\u0300"-"\u034e", "\u0360"-"\u0362", "\u037a", "\u0386", "\u0388"-"\u038a", "\u038c", "\u038e"-"\u03a1", "\u03a3"-"\u03ce", "\u03d0"-"\u03d7", "\u03da"-"\u03f3", "\u0400"-"\u0481", "\u0483"-"\u0486", "\u048c"-"\u04c4", "\u04c7"-"\u04c8", "\u04cb"-"\u04cc", "\u04d0"-"\u04f5", "\u04f8"-"\u04f9", "\u0531"-"\u0556", "\u0559", "\u0561"-"\u0587", "\u0591"-"\u05a1", "\u05a3"-"\u05b9", "\u05bb"-"\u05bd", "\u05bf", "\u05c1"-"\u05c2", "\u05c4", "\u05d0"-"\u05ea", "\u05f0"-"\u05f2", "\u0621"-"\u063a", "\u0640"-"\u0655", "\u0660"-"\u0669", "\u0670"-"\u06d3", "\u06d5"-"\u06dc", "\u06df"-"\u06e8", "\u06ea"-"\u06ed", "\u06f0"-"\u06fc", "\u070f"-"\u072c", "\u0730"-"\u074a", "\u0780"-"\u07b0", "\u0901"-"\u0903", "\u0905"-"\u0939", "\u093c"-"\u094d", "\u0950"-"\u0954", "\u0958"-"\u0963", "\u0966"-"\u096f", "\u0981"-"\u0983", "\u0985"-"\u098c", "\u098f"-"\u0990", "\u0993"-"\u09a8", "\u09aa"-"\u09b0", "\u09b2", "\u09b6"-"\u09b9", "\u09bc", "\u09be"-"\u09c4", "\u09c7"-"\u09c8", "\u09cb"-"\u09cd", "\u09d7", "\u09dc"-"\u09dd", "\u09df"-"\u09e3", "\u09e6"-"\u09f3", "\u0a02", "\u0a05"-"\u0a0a", "\u0a0f"-"\u0a10", "\u0a13"-"\u0a28", "\u0a2a"-"\u0a30", "\u0a32"-"\u0a33", "\u0a35"-"\u0a36", "\u0a38"-"\u0a39", "\u0a3c", "\u0a3e"-"\u0a42", "\u0a47"-"\u0a48", "\u0a4b"-"\u0a4d", "\u0a59"-"\u0a5c", "\u0a5e", "\u0a66"-"\u0a74", "\u0a81"-"\u0a83", "\u0a85"-"\u0a8b", "\u0a8d", "\u0a8f"-"\u0a91", "\u0a93"-"\u0aa8", "\u0aaa"-"\u0ab0", "\u0ab2"-"\u0ab3", "\u0ab5"-"\u0ab9", "\u0abc"-"\u0ac5", "\u0ac7"-"\u0ac9", "\u0acb"-"\u0acd", "\u0ad0", "\u0ae0", "\u0ae6"-"\u0aef", "\u0b01"-"\u0b03", "\u0b05"-"\u0b0c", "\u0b0f"-"\u0b10", "\u0b13"-"\u0b28", "\u0b2a"-"\u0b30", "\u0b32"-"\u0b33", "\u0b36"-"\u0b39", "\u0b3c"-"\u0b43", "\u0b47"-"\u0b48", "\u0b4b"-"\u0b4d", "\u0b56"-"\u0b57", "\u0b5c"-"\u0b5d", "\u0b5f"-"\u0b61", "\u0b66"-"\u0b6f", "\u0b82"-"\u0b83", "\u0b85"-"\u0b8a", "\u0b8e"-"\u0b90", "\u0b92"-"\u0b95", "\u0b99"-"\u0b9a", "\u0b9c", "\u0b9e"-"\u0b9f", "\u0ba3"-"\u0ba4", "\u0ba8"-"\u0baa", "\u0bae"-"\u0bb5", "\u0bb7"-"\u0bb9", "\u0bbe"-"\u0bc2", "\u0bc6"-"\u0bc8", "\u0bca"-"\u0bcd", "\u0bd7", "\u0be7"-"\u0bef", "\u0c01"-"\u0c03", "\u0c05"-"\u0c0c", "\u0c0e"-"\u0c10", "\u0c12"-"\u0c28", "\u0c2a"-"\u0c33", "\u0c35"-"\u0c39", "\u0c3e"-"\u0c44", "\u0c46"-"\u0c48", "\u0c4a"-"\u0c4d", "\u0c55"-"\u0c56", "\u0c60"-"\u0c61", "\u0c66"-"\u0c6f", "\u0c82"-"\u0c83", "\u0c85"-"\u0c8c", "\u0c8e"-"\u0c90", "\u0c92"-"\u0ca8", "\u0caa"-"\u0cb3", "\u0cb5"-"\u0cb9", "\u0cbe"-"\u0cc4", "\u0cc6"-"\u0cc8", "\u0cca"-"\u0ccd", "\u0cd5"-"\u0cd6", "\u0cde", "\u0ce0"-"\u0ce1", "\u0ce6"-"\u0cef", "\u0d02"-"\u0d03", "\u0d05"-"\u0d0c", "\u0d0e"-"\u0d10", "\u0d12"-"\u0d28", "\u0d2a"-"\u0d39", "\u0d3e"-"\u0d43", "\u0d46"-"\u0d48", "\u0d4a"-"\u0d4d", "\u0d57", "\u0d60"-"\u0d61", "\u0d66"-"\u0d6f", "\u0d82"-"\u0d83", "\u0d85"-"\u0d96", "\u0d9a"-"\u0db1", "\u0db3"-"\u0dbb", "\u0dbd", "\u0dc0"-"\u0dc6", "\u0dca", "\u0dcf"-"\u0dd4", "\u0dd6", "\u0dd8"-"\u0ddf", "\u0df2"-"\u0df3", "\u0e01"-"\u0e3a", "\u0e3f"-"\u0e4e", "\u0e50"-"\u0e59", "\u0e81"-"\u0e82", "\u0e84", "\u0e87"-"\u0e88", "\u0e8a", "\u0e8d", "\u0e94"-"\u0e97", "\u0e99"-"\u0e9f", "\u0ea1"-"\u0ea3", "\u0ea5", "\u0ea7", "\u0eaa"-"\u0eab", "\u0ead"-"\u0eb9", "\u0ebb"-"\u0ebd", "\u0ec0"-"\u0ec4", "\u0ec6", "\u0ec8"-"\u0ecd", "\u0ed0"-"\u0ed9", "\u0edc"-"\u0edd", "\u0f00", "\u0f18"-"\u0f19", "\u0f20"-"\u0f29", "\u0f35", "\u0f37", "\u0f39", "\u0f3e"-"\u0f47", "\u0f49"-"\u0f6a", "\u0f71"-"\u0f84", "\u0f86"-"\u0f8b", "\u0f90"-"\u0f97", "\u0f99"-"\u0fbc", "\u0fc6", "\u1000"-"\u1021", "\u1023"-"\u1027", "\u1029"-"\u102a", "\u102c"-"\u1032", "\u1036"-"\u1039", "\u1040"-"\u1049", "\u1050"-"\u1059", "\u10a0"-"\u10c5", "\u10d0"-"\u10f6", "\u1100"-"\u1159", "\u115f"-"\u11a2", "\u11a8"-"\u11f9", "\u1200"-"\u1206", "\u1208"-"\u1246", "\u1248", "\u124a"-"\u124d", "\u1250"-"\u1256", "\u1258", "\u125a"-"\u125d", "\u1260"-"\u1286", "\u1288", "\u128a"-"\u128d", "\u1290"-"\u12ae", "\u12b0", "\u12b2"-"\u12b5", "\u12b8"-"\u12be", "\u12c0", "\u12c2"-"\u12c5", "\u12c8"-"\u12ce", "\u12d0"-"\u12d6", "\u12d8"-"\u12ee", "\u12f0"-"\u130e", "\u1310", "\u1312"-"\u1315", "\u1318"-"\u131e", "\u1320"-"\u1346", "\u1348"-"\u135a", "\u1369"-"\u1371", "\u13a0"-"\u13f4", "\u1401"-"\u166c", "\u166f"-"\u1676", "\u1681"-"\u169a", "\u16a0"-"\u16ea", "\u1780"-"\u17d3", "\u17db", "\u17e0"-"\u17e9", "\u180b"-"\u180e", "\u1810"-"\u1819", "\u1820"-"\u1877", "\u1880"-"\u18a9", "\u1e00"-"\u1e9b", "\u1ea0"-"\u1ef9", "\u1f00"-"\u1f15", "\u1f18"-"\u1f1d", "\u1f20"-"\u1f45", "\u1f48"-"\u1f4d", "\u1f50"-"\u1f57", "\u1f59", "\u1f5b", "\u1f5d", "\u1f5f"-"\u1f7d", "\u1f80"-"\u1fb4", "\u1fb6"-"\u1fbc", "\u1fbe", "\u1fc2"-"\u1fc4", "\u1fc6"-"\u1fcc", "\u1fd0"-"\u1fd3", "\u1fd6"-"\u1fdb", "\u1fe0"-"\u1fec", "\u1ff2"-"\u1ff4", "\u1ff6"-"\u1ffc", "\u200c"-"\u200f", "\u202a"-"\u202e", "\u203f"-"\u2040", "\u206a"-"\u206f", "\u207f", "\u20a0"-"\u20af", "\u20d0"-"\u20dc", "\u20e1", "\u2102", "\u2107", "\u210a"-"\u2113", "\u2115", "\u2119"-"\u211d", "\u2124", "\u2126", "\u2128", "\u212a"-"\u212d", "\u212f"-"\u2131", "\u2133"-"\u2139", "\u2160"-"\u2183", "\u3005"-"\u3007", "\u3021"-"\u302f", "\u3031"-"\u3035", "\u3038"-"\u303a", "\u3041"-"\u3094", "\u3099"-"\u309a", "\u309d"-"\u309e", "\u30a1"-"\u30fe", "\u3105"-"\u312c", "\u3131"-"\u318e", "\u31a0"-"\u31b7", "\u3400"-"\u4db5", "\u4e00"-"\u9fa5", "\ua000"-"\ua48c", "\uac00"-"\ud7a3", "\uf900"-"\ufa2d", "\ufb00"-"\ufb06", "\ufb13"-"\ufb17", "\ufb1d"-"\ufb28", "\ufb2a"-"\ufb36", "\ufb38"-"\ufb3c", "\ufb3e", "\ufb40"-"\ufb41", "\ufb43"-"\ufb44", "\ufb46"-"\ufbb1", "\ufbd3"-"\ufd3d", "\ufd50"-"\ufd8f", "\ufd92"-"\ufdc7", "\ufdf0"-"\ufdfb", "\ufe20"-"\ufe23", "\ufe33"-"\ufe34", "\ufe4d"-"\ufe4f", "\ufe69", "\ufe70"-"\ufe72", "\ufe74", "\ufe76"-"\ufefc", "\ufeff", "\uff04", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff3f", "\uff41"-"\uff5a", "\uff65"-"\uffbe", "\uffc2"-"\uffc7", "\uffca"-"\uffcf", "\uffd2"-"\uffd7", "\uffda"-"\uffdc", "\uffe0"-"\uffe1", "\uffe5"-"\uffe6", "\ufff9"-"\ufffb"] >
}

