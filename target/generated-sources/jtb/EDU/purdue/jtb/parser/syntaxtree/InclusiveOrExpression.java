/* Generated by JTB 1.5.1 */
package EDU.purdue.jtb.parser.syntaxtree;

import EDU.purdue.jtb.parser.visitor.IIntVisitor;
import EDU.purdue.jtb.parser.visitor.IVoidVisitor;


/**
 * JTB node class for the production InclusiveOrExpression:<br>
 * Corresponding grammar:<br>
 * f0 -> ExclusiveOrExpression()<br>
 * f1 -> ( #0 "|" #1 ExclusiveOrExpression() )*<br>
 * s: 963402497<br>
 */
public class InclusiveOrExpression implements INode {

  /** Child node 0 */
  public ExclusiveOrExpression f0;

  /** Child node 1 */
  public NodeListOptional f1;

  /** The serial version UID */
  private static final long serialVersionUID = 151L;

  /**
   * Constructs the node with all its children nodes.
   *
   * @param n0 - first child node
   * @param n1 - next child node
   */
  public InclusiveOrExpression(final ExclusiveOrExpression n0, final NodeListOptional n1) {
    f0 = n0;
    f1 = n1;
  }
  /*
   * Visitors accept methods (no -novis option, visitors specification : Void,void,None;Int,int,None)
   */

  /**
   * Accepts a {@link IIntVisitor} visitor with user return data.
   *
   * @param vis - the visitor
   * @return the user Return data
   */
  @Override
  public int accept(final IIntVisitor vis) {
    return vis.visit(this);
  }

  /**
   * Accepts a {@link IVoidVisitor} visitor} visitor with user return data.
   *
   * @param vis - the visitor
   */
  @Override
  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }


}
