/* Generated by JTB 1.5.1 */
package EDU.purdue.jtb.parser.syntaxtree;

import EDU.purdue.jtb.parser.Token;
import EDU.purdue.jtb.parser.visitor.IIntVisitor;
import EDU.purdue.jtb.parser.visitor.IVoidVisitor;


/**
 * JTB node class for the production Statement:<br>
 * Corresponding grammar:<br>
 * f0 -> . %00 LabeledStatement()<br>
 * .. .. | %01 AssertStatement()<br>
 * .. .. | %02 Block()<br>
 * .. .. | %03 EmptyStatement()<br>
 * .. .. | %04 #0 StatementExpression() #1 ";"<br>
 * .. .. | %05 SwitchStatement()<br>
 * .. .. | %06 IfStatement()<br>
 * .. .. | %07 WhileStatement()<br>
 * .. .. | %08 DoStatement()<br>
 * .. .. | %09 ForStatement()<br>
 * .. .. | %10 BreakStatement()<br>
 * .. .. | %11 ContinueStatement()<br>
 * .. .. | %12 ReturnStatement()<br>
 * .. .. | %13 ThrowStatement()<br>
 * .. .. | %14 SynchronizedStatement()<br>
 * .. .. | %15 TryStatement()<br>
 * s: 1394695492<br>
 */
public class Statement implements INode {

  /** Child node 0 */
  public NodeChoice f0;

  /** The serial version UID */
  private static final long serialVersionUID = 151L;

  /**
   * Constructs the node with its child node.
   *
   * @param n0 - the child node
   */
  public Statement(final NodeChoice n0) {
    f0 = n0;
  }
  /*
   * Visitors accept methods (no -novis option, visitors specification : Void,void,None;Int,int,None)
   */

  /**
   * Accepts a {@link IIntVisitor} visitor with user return data.
   *
   * @param vis - the visitor
   * @return the user Return data
   */
  @Override
  public int accept(final IIntVisitor vis) {
    return vis.visit(this);
  }

  /**
   * Accepts a {@link IVoidVisitor} visitor} visitor with user return data.
   *
   * @param vis - the visitor
   */
  @Override
  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }


}
