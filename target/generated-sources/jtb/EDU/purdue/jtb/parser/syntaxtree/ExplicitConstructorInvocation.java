/* Generated by JTB 1.5.1 */
package EDU.purdue.jtb.parser.syntaxtree;

import EDU.purdue.jtb.parser.Token;
import EDU.purdue.jtb.parser.visitor.IIntVisitor;
import EDU.purdue.jtb.parser.visitor.IVoidVisitor;


/**
 * JTB node class for the production ExplicitConstructorInvocation:<br>
 * Corresponding grammar:<br>
 * f0 -> ( %0 #0 [ $0 "<" $1 ReferenceType()<br>
 * .. .. . .. .. . $2 ( ?0 "," ?1 ReferenceType() )*<br>
 * .. .. . .. .. . $3 ">" ]<br>
 * .. .. . .. #1 ( &0 $0 "this" $1 Arguments() $2 ";"<br>
 * .. .. . .. .. | &1 $0 "super" $1 Arguments() $2 ";" )<br>
 * .. .. | %1 ( #0 PrimaryExpression() #1 "." #2 "super" #3 Arguments() #4 ";" ) )<br>
 * s: -492225557<br>
 */
public class ExplicitConstructorInvocation implements INode {

  /** Child node 0 */
  public NodeChoice f0;

  /** The serial version UID */
  private static final long serialVersionUID = 151L;

  /**
   * Constructs the node with its child node.
   *
   * @param n0 - the child node
   */
  public ExplicitConstructorInvocation(final NodeChoice n0) {
    f0 = n0;
  }
  /*
   * Visitors accept methods (no -novis option, visitors specification : Void,void,None;Int,int,None)
   */

  /**
   * Accepts a {@link IIntVisitor} visitor with user return data.
   *
   * @param vis - the visitor
   * @return the user Return data
   */
  @Override
  public int accept(final IIntVisitor vis) {
    return vis.visit(this);
  }

  /**
   * Accepts a {@link IVoidVisitor} visitor} visitor with user return data.
   *
   * @param vis - the visitor
   */
  @Override
  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }


}
