/* Generated by JTB 1.5.1 */
package examples.java.ex1jtb.visitor;

import static examples.java.ex1jtb.syntaxtree.NodeConstants.*;

import examples.java.ex1jtb.syntaxtree.*;

import examples.java.ex1jtb.visitor.signature.NodeFieldsSignature;
/**
 * Provides default methods which visit each node in the tree in depth-first order.<br>
 * In your "Gen" visitors extend this class and override part or all of these methods.
 *
 */
public class DepthFirstGenVisitor implements IGenVisitor {


  /*
   * Base nodes classes visit methods (to be overridden if necessary)
   */

  /**
   * Visits a {@link NodeChoice} node.
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   */
  @Override
  public void visit(final NodeChoice n, final String argu) {
    n.choice.accept(this, argu);
    return;
  }

  /**
   * Visits a {@link NodeList} node.
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   */
  @Override
  public void visit(final NodeList n, final String argu) {
    for (INode e : n.nodes) {
      e.accept(this, argu);
    }
    return;
  }

  /**
   * Visits a {@link NodeListOptional} node.
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   */
  @Override
  public void visit(final NodeListOptional n, final String argu) {
    if (n.present()) {
      for (INode e : n.nodes) {
        e.accept(this, argu);
      }
      return;
    }
    return;
  }

  /**
   * Visits a {@link NodeOptional} node.
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   */
  @Override
  public void visit(final NodeOptional n, final String argu) {
    if (n.present()) {
      n.node.accept(this, argu);
      return;
    }
    return;
  }

  /**
   * Visits a {@link NodeSequence} node.
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   */
  @Override
  public void visit(final NodeSequence n, final String argu) {
    for (INode e : n.nodes) {
      e.accept(this, argu);
    }
    return;
  }

  /**
   * Visits a {@link NodeToken} node.
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   */
  @Override
  public void visit(final NodeToken n, @SuppressWarnings("unused") final String argu) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  /*
   * User grammar generated visit methods (to be overridden if necessary)
   */

  /**
   * Visits a {@link Start} node, whose children are the following :
   * <p>
   * f0 -> Expression()<br>
   * f1 -> ";"<br>
   * s: 1859009853<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   */
  @Override
  @NodeFieldsSignature({ 1859009853, JTB_SIG_START, JTB_USER_START })
  public void visit(final Start n, final String argu) {
    // f0 -> Expression()
    n.f0.accept(this, argu);
    // f1 -> ";"
    n.f1.accept(this, argu);
  }

  /**
   * Visits a {@link Expression} node, whose child is the following :
   * <p>
   * f0 -> AdditiveExpression()<br>
   * s: -762347234<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   */
  @Override
  @NodeFieldsSignature({ -762347234, JTB_SIG_EXPRESSION, JTB_USER_EXPRESSION })
  public void visit(final Expression n, final String argu) {
    // f0 -> AdditiveExpression()
    n.f0.accept(this, argu);
  }

  /**
   * Visits a {@link AdditiveExpression} node, whose children are the following :
   * <p>
   * f0 -> MultiplicativeExpression()<br>
   * f1 -> ( #0 ( %0 "+"<br>
   * .. .. . .. | %1 "-" )<br>
   * .. .. . #1 MultiplicativeExpression() )*<br>
   * s: -1807059397<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   */
  @Override
  @NodeFieldsSignature({ -1807059397, JTB_SIG_ADDITIVEEXPRESSION, JTB_USER_ADDITIVEEXPRESSION })
  public void visit(final AdditiveExpression n, final String argu) {
    // f0 -> MultiplicativeExpression()
    n.f0.accept(this, argu);
    // f1 -> ( #0 ( %0 "+"
    // .. .. . .. | %1 "-" )
    // .. .. . #1 MultiplicativeExpression() )*
    n.f1.accept(this, argu);
  }

  /**
   * Visits a {@link MultiplicativeExpression} node, whose children are the following :
   * <p>
   * f0 -> UnaryExpression()<br>
   * f1 -> ( #0 ( %0 "*"<br>
   * .. .. . .. | %1 "/"<br>
   * .. .. . .. | %2 "%" )<br>
   * .. .. . #1 UnaryExpression() )*<br>
   * s: 853643830<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   */
  @Override
  @NodeFieldsSignature({ 853643830, JTB_SIG_MULTIPLICATIVEEXPRESSION, JTB_USER_MULTIPLICATIVEEXPRESSION })
  public void visit(final MultiplicativeExpression n, final String argu) {
    // f0 -> UnaryExpression()
    n.f0.accept(this, argu);
    // f1 -> ( #0 ( %0 "*"
    // .. .. . .. | %1 "/"
    // .. .. . .. | %2 "%" )
    // .. .. . #1 UnaryExpression() )*
    n.f1.accept(this, argu);
  }

  /**
   * Visits a {@link UnaryExpression} node, whose child is the following :
   * <p>
   * f0 -> . %0 #0 "(" #1 Expression() #2 ")"<br>
   * .. .. | %1 Identifier()<br>
   * .. .. | %2 EgInteger()<br>
   * s: 190447292<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   */
  @Override
  @NodeFieldsSignature({ 190447292, JTB_SIG_UNARYEXPRESSION, JTB_USER_UNARYEXPRESSION })
  public void visit(final UnaryExpression n, final String argu) {
    // f0 -> . %0 #0 "(" #1 Expression() #2 ")"
    // .. .. | %1 Identifier()
    // .. .. | %2 EgInteger()
    n.f0.accept(this, argu);
  }

  /**
   * Visits a {@link Identifier} node, whose child is the following :
   * <p>
   * f0 -> < IDENTIFIER ><br>
   * s: -1580059612<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   */
  @Override
  @NodeFieldsSignature({ -1580059612, JTB_SIG_IDENTIFIER, JTB_USER_IDENTIFIER })
  public void visit(final Identifier n, final String argu) {
    // f0 -> < IDENTIFIER >
    n.f0.accept(this, argu);
  }

  /**
   * Visits a {@link EgInteger} node, whose child is the following :
   * <p>
   * f0 -> < INTEGER_LITERAL ><br>
   * s: -1048223857<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   */
  @Override
  @NodeFieldsSignature({ -1048223857, JTB_SIG_EGINTEGER, JTB_USER_EGINTEGER })
  public void visit(final EgInteger n, final String argu) {
    // f0 -> < INTEGER_LITERAL >
    n.f0.accept(this, argu);
  }

}
