/* Generated by JTB 1.5.1 */
package examples.java.ex2jtb.syntaxtree;

import examples.java.ex2jtb.visitor.IGenVisitor;


/**
 * JTB node class for the production ASTMultiplicativeExpression:<br>
 * Corresponding grammar:<br>
 * f0 -> UnaryExpression()<br>
 * f1 -> ( #0 ( %0 "*"<br>
 * .. .. . .. | %1 "/"<br>
 * .. .. . .. | %2 "%" )<br>
 * .. .. . #1 UnaryExpression() )*<br>
 * s: 853643830<br>
 */
public class ASTMultiplicativeExpression implements INode {

  /** Child node 0 */
  public ASTUnaryExpression f0;

  /** Child node 1 */
  public NodeListOptional f1;

  /** The serial version UID */
  private static final long serialVersionUID = 151L;

  /**
   * Constructs the node with all its children nodes.
   *
   * @param n0 - first child node
   * @param n1 - next child node
   */
  public ASTMultiplicativeExpression(final ASTUnaryExpression n0, final NodeListOptional n1) {
    f0 = n0;
    f1 = n1;
  }
  /*
   * Visitors accept methods (no -novis option, visitors specification : Gen,void,java.lang.String)
   */

  /**
   * Accepts a {@link IGenVisitor} visitor with user argument data.
   *
   * @param vis - the visitor
   * @param argu - the user Argument data
   */
  @Override
  public void accept(final IGenVisitor vis, final String argu) {
    vis.visit(this, argu);
  }


}
