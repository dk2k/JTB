/* Generated by JTB 1.5.1 */
package grammars.a.sgvis;

import grammars.a.sgtree.*;

/**
 * All "IVis2Visitor" visitors must implement this interface.

 * @param <R> - The return type parameter
 * @param <A> - The argument 0 type parameter
 */
public interface IVis2Visitor<R, A> {

  /*
   * Base nodes visit methods
   */

  /**
   * Visits a {@link NodeChoice} node), passing it argument(s).
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   * @param argu1 - the user argument 1
   * @param argu2 - the user argument 2
   * @return the user return information
   */
  public R visit(final NodeChoice n, final A argu, final int[] argu1, final short... argu2);

  /**
   * Visits a {@link NodeList} node), passing it argument(s).
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   * @param argu1 - the user argument 1
   * @param argu2 - the user argument 2
   * @return the user return information
   */
  public R visit(final NodeList n, final A argu, final int[] argu1, final short... argu2);

  /**
   * Visits a {@link NodeListOptional} node), passing it argument(s).
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   * @param argu1 - the user argument 1
   * @param argu2 - the user argument 2
   * @return the user return information
   */
  public R visit(final NodeListOptional n, final A argu, final int[] argu1, final short... argu2);

  /**
   * Visits a {@link NodeOptional} node), passing it argument(s).
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   * @param argu1 - the user argument 1
   * @param argu2 - the user argument 2
   * @return the user return information
   */
  public R visit(final NodeOptional n, final A argu, final int[] argu1, final short... argu2);

  /**
   * Visits a {@link NodeSequence} node), passing it argument(s).
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   * @param argu1 - the user argument 1
   * @param argu2 - the user argument 2
   * @return the user return information
   */
  public R visit(final NodeSequence n, final A argu, final int[] argu1, final short... argu2);

  /**
   * Visits a {@link NodeToken} node), passing it argument(s).
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   * @param argu1 - the user argument 1
   * @param argu2 - the user argument 2
   * @return the user return information
   */
  public R visit(final NodeToken n, final A argu, final int[] argu1, final short... argu2);

  /*
   * User grammar generated visit methods
   */

  /**
   * Visits a {@link ASTclassDeclaration123} node, whose children are the following :
   * <p>
   * nodeToken -> "class"<br>
   * className -> className()<br>
   * nodeToken1 -> "{"<br>
   * nodeListOptional -> ( %0 method()<br>
   * ................ .. | %1 instruction() )*<br>
   * nodeToken2 -> "}"<br>
   * nodeToken3 -> "."<br>
   * jc_0 -> jc_0()<br>
   * nodeToken4 -> < EOF ><br>
   * s: 102044286<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   * @param argu1 - the user argument 1
   * @param argu2 - the user argument 2
   * @return the user return information
   */
  public R visit(final ASTclassDeclaration123 n, final A argu, final int[] argu1, final short... argu2);

  /**
   * Visits a {@link ASTclassName123} node, whose child is the following :
   * <p>
   * nodeToken -> < ID ><br>
   * s: 24392035<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   * @param argu1 - the user argument 1
   * @param argu2 - the user argument 2
   * @return the user return information
   */
  public R visit(final ASTclassName123 n, final A argu, final int[] argu1, final short... argu2);

  /**
   * Visits a {@link ASTmethod123} node, whose children are the following :
   * <p>
   * methodName -> methodName()<br>
   * nodeToken -> "("<br>
   * nodeList -> ( instruction() )+<br>
   * nodeToken1 -> ")"<br>
   * s: -5715686<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   * @param argu1 - the user argument 1
   * @param argu2 - the user argument 2
   * @return the user return information
   */
  public R visit(final ASTmethod123 n, final A argu, final int[] argu1, final short... argu2);

  /**
   * Visits a {@link ASTmethodName123} node, whose child is the following :
   * <p>
   * nodeToken -> < ID ><br>
   * s: 24392035<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   * @param argu1 - the user argument 1
   * @param argu2 - the user argument 2
   * @return the user return information
   */
  public R visit(final ASTmethodName123 n, final A argu, final int[] argu1, final short... argu2);

  /**
   * Visits a {@link ASTinstruction123} node, whose child is the following :
   * <p>
   * nodeChoice -> . %0 #0 < ID > #1 ";"<br>
   * .......... .. | %1 ","<br>
   * s: -427851232<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   * @param argu1 - the user argument 1
   * @param argu2 - the user argument 2
   * @return the user return information
   */
  public R visit(final ASTinstruction123 n, final A argu, final int[] argu1, final short... argu2);

  /**
   * Visits a {@link ASTbp_jual123} node, whose child is the following :
   * <p>
   * nodeToken -> < ID ><br>
   * s: 24392035<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   * @param argu1 - the user argument 1
   * @param argu2 - the user argument 2
   * @return the user return information
   */
  public R visit(final ASTbp_jual123 n, final A argu, final int[] argu1, final short... argu2);

  /**
   * Visits a {@link ASTbp_hm123} node, whose child is the following :
   * <p>
   * nodeToken -> < ID ><br>
   * s: 24392035<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   * @param argu1 - the user argument 1
   * @param argu2 - the user argument 2
   * @return the user return information
   */
  public R visit(final ASTbp_hm123 n, final A argu, final int[] argu1, final short... argu2);

  /**
   * Visits a {@link ASTjc_0123} node, with no child :
   * <p>
   * s: 0<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument 0
   * @param argu1 - the user argument 1
   * @param argu2 - the user argument 2
   * @return the user return information
   */
  public R visit(final ASTjc_0123 n, final A argu, final int[] argu1, final short... argu2);

}
