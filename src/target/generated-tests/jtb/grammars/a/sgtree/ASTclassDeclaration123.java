/* Generated by JTB 1.5.1 */
package grammars.a.sgtree;

import java.util.ArrayList;
import java.util.List;
import grammars.a.sgvis.IVis2Visitor;
import grammars.a.sgvis.IVoidVisitor;


/**
 * JTB node class for the production ASTclassDeclaration123:<br>
 * Corresponding grammar:<br>
 * nodeToken -> "class"<br>
 * className -> className()<br>
 * nodeToken1 -> "{"<br>
 * nodeListOptional -> ( %0 method()<br>
 * ................ .. | %1 instruction() )*<br>
 * nodeToken2 -> "}"<br>
 * nodeToken3 -> "."<br>
 * jc_0 -> jc_0()<br>
 * nodeToken4 -> < EOF ><br>
 * s: 102044286<br>
 */
public class ASTclassDeclaration123 implements INode {

  /** Child node 0 */
  public NodeToken nodeToken;

  /** Child node 1 */
  public ASTclassName123 className;

  /** Child node 2 */
  public NodeToken nodeToken1;

  /** Child node 3 */
  public NodeListOptional nodeListOptional;

  /** Child node 4 */
  public NodeToken nodeToken2;

  /** Child node 5 */
  public NodeToken nodeToken3;

  /** Child node 6 */
  public ASTjc_0123 jc_0;

  /** Child node 7 */
  public NodeToken nodeToken4;

  /** The parent node */
  private INode parent;

  /** The serial version UID */
  private static final long serialVersionUID = 151L;

  /**
   * Constructs the node with all its children nodes.
   *
   * @param n0 - first child node
   * @param n1 - next child node
   * @param n2 - next child node
   * @param n3 - next child node
   * @param n4 - next child node
   * @param n5 - next child node
   * @param n6 - next child node
   * @param n7 - next child node
   */
  public ASTclassDeclaration123(final NodeToken n0, final ASTclassName123 n1, final NodeToken n2, final NodeListOptional n3, final NodeToken n4, final NodeToken n5, final ASTjc_0123 n6, final NodeToken n7) {
    nodeToken = n0;
    if (nodeToken != null)
      nodeToken.setParent(this);
    className = n1;
    if (className != null)
      className.setParent(this);
    nodeToken1 = n2;
    if (nodeToken1 != null)
      nodeToken1.setParent(this);
    nodeListOptional = n3;
    if (nodeListOptional != null)
      nodeListOptional.setParent(this);
    nodeToken2 = n4;
    if (nodeToken2 != null)
      nodeToken2.setParent(this);
    nodeToken3 = n5;
    if (nodeToken3 != null)
      nodeToken3.setParent(this);
    jc_0 = n6;
    if (jc_0 != null)
      jc_0.setParent(this);
    nodeToken4 = n7;
    if (nodeToken4 != null)
      nodeToken4.setParent(this);
  }
  /*
   * Visitors accept methods (no -novis option, visitors specification : Void,void,None;Vis2,R,A,int[],short...)
   */

  /**
   * Accepts a {@link IVis2Visitor} visitor with user return and argument data.
   *
   * @param <R> - the return type parameter
   * @param <A> - The argument 0 type parameter
   * @param vis - the visitor
   * @param argu - the user Argument data
   * @param argu1 - the user Argument data
   * @param argu2 - the user Argument data
   * @return the user Return data
   */
  @Override
  public <R, A> R accept(final IVis2Visitor<R, A> vis, final A argu, final int[] argu1, final short... argu2) {
    return vis.visit(this, argu, argu1, argu2);
  }

  /**
   * Accepts a {@link IVoidVisitor} visitor} visitor with user return data.
   *
   * @param vis - the visitor
   */
  @Override
  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }

  /*
   * Parent pointer getter and setter (-pp option)
   */

  /**
   * Gets the parent node.
   *
   * @return the parent node
   */
  @Override
  public INode getParent() {
    return parent;
  }

  /**
   * Sets the parent node.
   *
   * @param n - the parent node
   */
  @Override
  public void setParent(final INode n) {
    parent = n;
  }

  /*
   * Children methods (-chm option)
   */

  /** The list of all direct children (base + user nodes) */
  private List<INode> lac = null;

  /** The list of direct base nodes children */
  private List<INode> lbc = null;

  /** The list of direct user nodes children */
  private List<INode> luc = null;

  /**
   * @return true if the node is a base node, false otherwise (always false : the node is a user node)
   */
  @Override
  public boolean isBaseNode() {
    return false;
  }


  /**
   * @return the number of all direct children (base + user nodes) (always 8))
   */
  @Override
  public int getNbAllChildren() {
    return 8;
  }

  /**
   * @return the number of direct base nodes children (always 6))
   */
  @Override
  public int getNbBaseChildren() {
    return 6;
  }

  /**
   * @return the number of direct user nodes children (always 2))
   */
  @Override
  public int getNbUserChildren() {
    return 2;
  }

  /**
   * @return the list of all direct children (base + user nodes) (always 8 nodes))
   */
  @Override
  public List<INode> getAllChildren() {
    if (lac == null) {
      lac = new ArrayList<>(8);
      lac.add(nodeToken);
      lac.add(className);
      lac.add(nodeToken1);
      lac.add(nodeListOptional);
      lac.add(nodeToken2);
      lac.add(nodeToken3);
      lac.add(jc_0);
      lac.add(nodeToken4);
    }
    return lac;
  }

  /**
   * @return the list of all direct children (base + user nodes) (always 6 nodes))
   */
  @Override
  public List<INode> getBaseChildren() {
    if (lbc == null) {
      lbc = new ArrayList<>(6);
      lbc.add(nodeToken);
      lbc.add(nodeToken1);
      lbc.add(nodeListOptional);
      lbc.add(nodeToken2);
      lbc.add(nodeToken3);
      lbc.add(nodeToken4);
    }
    return lbc;
  }

  /**
   * @return the list of all direct children (base + user nodes) (always 2 nodes))
   */
  @Override
  public List<INode> getUserChildren() {
    if (luc == null) {
      luc = new ArrayList<>(2);
      luc.add(className);
      luc.add(jc_0);
    }
    return luc;
  }

}
