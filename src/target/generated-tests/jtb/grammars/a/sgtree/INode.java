/* Generated by JTB 1.5.1 */
package grammars.a.sgtree;

import java.util.List;
import grammars.a.sgvis.IVis2Visitor;
import grammars.a.sgvis.IVoidVisitor;

/**
 * The interface which all syntax tree classes must implement.
 */
public interface INode extends java.io.Serializable {

  /** The OS line separator */
  public static final String LS = System.getProperty("line.separator"); //$NON-NLS-1$

  /*
   * Visitors accept methods (no -novis option, visitors specification : Void,void,None;Vis2,R,A,int[],short...)
   */

  /**
   * Accepts a {@link IVis2Visitor} visitor with user return and argument data.
   *
   * @param <R> - the return type parameter
   * @param <A> - The argument 0 type parameter
   * @param vis - the visitor
   * @param argu - the user Argument data
   * @param argu1 - the user Argument data
   * @param argu2 - the user Argument data
   * @return the user Return data
   */
  public <R, A> R accept(final IVis2Visitor<R, A> vis, final A argu, final int[] argu1, final short... argu2);

  /**
   * Accepts a {@link IVoidVisitor} visitor} visitor with user return data.
   *
   * @param vis - the visitor
   */
  public void accept(final IVoidVisitor vis);

  /*
   * Parent pointer getter and setter (-pp option)
   */

  /**
   * Gets the parent node.
   *
   * @return the parent node
   */
  public INode getParent();

  /**
   * Sets the parent node. (It is the responsibility of each implementing class
   * to call setParent() on each of its child nodes.)
   *
   * @param n - the parent node
   */
  public void setParent(final INode n);

  /*
   * Children methods (-chm option)
   */

  /**
   * @return the number of all direct children (base + user nodes)
   */
  public int getNbAllChildren();

  /**
   * @return the number of direct base nodes children
   */
  public int getNbBaseChildren();

  /**
   * @return the number of direct user nodes children
   */
  public int getNbUserChildren();

  /**
   * @return the list of all direct children (base + user nodes)
   */
  public List<INode> getAllChildren();

  /**
   * @return the list of direct base nodes children
   */
  public List<INode> getBaseChildren();

  /**
   * @return the list of direct user nodes children
   */
  public List<INode> getUserChildren();

  /**
   * @return true if the node is a base node, false otherwise
   */
  public boolean isBaseNode();

}
