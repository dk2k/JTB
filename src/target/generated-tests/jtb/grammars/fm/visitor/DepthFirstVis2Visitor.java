/* Generated by JTB 1.5.1 */
package grammars.fm.visitor;

import static grammars.fm.syntaxtree.NodeConstants.*;

import grammars.fm.syntaxtree.*;

import grammars.fm.visitor.signature.NodeFieldsSignature;
@SuppressWarnings("javadoc")
public class DepthFirstVis2Visitor implements IVis2Visitor {


  @Override
  public int visit(final NodeChoice n, final String argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    final int nRes = n.choice.accept(this, argu);
    return nRes;
  }

  @Override
  public int visit(final NodeList n, final String argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    int nRes = 0;
    for (INode e : n.nodes) {
      @SuppressWarnings("unused")
      final int sRes = e.accept(this, argu);
    }
    return nRes;
  }

  @Override
  public int visit(final NodeListOptional n, final String argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    if (n.present()) {
      int nRes = 0;
      for (INode e : n.nodes) {
        @SuppressWarnings("unused")
        int sRes = e.accept(this, argu);
      }
      return nRes;
    }
    return 0;
  }

  @Override
  public int visit(final NodeOptional n, final String argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    if (n.present()) {
      final int nRes = n.node.accept(this, argu);
      return nRes;
    }
    return 0;
  }

  @Override
  public int visit(final NodeSequence n, final String argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    int nRes = 0;
    for (INode e : n.nodes) {
      @SuppressWarnings("unused")
      int subRet = e.accept(this, argu);
    }
    return nRes;
  }

  @Override
  public int visit(final NodeToken n, @SuppressWarnings("unused") final String argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    int nRes = 0;
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return nRes;
  }

  @Override
  @NodeFieldsSignature({ 0, JTB_SIG_CLASSDECLARATION, JTB_USER_CLASSDECLARATION })
  public int visit(final classDeclaration n, final String argu) {
    int nRes = 0;
    final skip n0 = n.f0;
    nRes = n0.accept(this, argu);
    final NodeToken n1 = n.f1;
    nRes = n1.accept(this, argu);
    final NodeToken n2 = n.f2;
    nRes = n2.accept(this, argu);
    final NodeListOptional n3 = n.f3;
    if (n3.present()) {
      for (int i = 0; i < n3.size(); i++) {
        final INode nloeai = n3.elementAt(i);
        nRes = nloeai.accept(this, argu);
      }
    }
    final NodeToken n4 = n.f4;
    nRes = n4.accept(this, argu);
    final NodeToken n5 = n.f5;
    nRes = n5.accept(this, argu);
    final NodeToken n6 = n.f6;
    nRes = n6.accept(this, argu);
    return nRes;
  }

  @Override
  @NodeFieldsSignature({ 0, JTB_SIG_CLASSNAME, JTB_USER_CLASSNAME })
  public int visit(final className n, final String argu) {
    int nRes = 0;
    final NodeToken n0 = n.f0;
    nRes = n0.accept(this, argu);
    return nRes;
  }

  @Override
  @NodeFieldsSignature({ 0, JTB_SIG_METHOD, JTB_USER_METHOD })
  public int visit(final method n, final String argu) {
    int nRes = 0;
    final methodName n0 = n.f0;
    nRes = n0.accept(this, argu);
    final NodeToken n1 = n.f1;
    nRes = n1.accept(this, argu);
    final NodeList n2 = n.f2;
    for (int i = 0; i < n2.size(); i++) {
      final INode lsteai = n2.elementAt(i);
      nRes = lsteai.accept(this, argu);
    }
    final NodeToken n3 = n.f3;
    nRes = n3.accept(this, argu);
    return nRes;
  }

  @Override
  @NodeFieldsSignature({ 0, JTB_SIG_METHODNAME, JTB_USER_METHODNAME })
  public int visit(final methodName n, final String argu) {
    int nRes = 0;
    final NodeToken n0 = n.f0;
    nRes = n0.accept(this, argu);
    return nRes;
  }

  @Override
  @NodeFieldsSignature({ 0, JTB_SIG_INSTRUCTION, JTB_USER_INSTRUCTION })
  public int visit(final instruction n, final String argu) {
    int nRes = 0;
    final NodeToken n0 = n.f0;
    nRes = n0.accept(this, argu);
    final NodeToken n1 = n.f1;
    nRes = n1.accept(this, argu);
    return nRes;
  }

  @SuppressWarnings("unused")
  @Override
  @NodeFieldsSignature({ 0, JTB_SIG_SKIP, JTB_USER_SKIP })
  public int visit(final skip n, final String argu) {
    int nRes = 0;
    /* empty node, nothing that can be generated so far */
    return nRes;
  }

@SuppressWarnings("javadoc")
  public static class ShouldNotOccurException extends RuntimeException {

    private static final long serialVersionUID = 1L;

    public ShouldNotOccurException() {
      super();
    }

    public ShouldNotOccurException(final NodeChoice ch) {
      super("Invalid switch value (" + ch.which + ") or fall-through");
    }

  }

}
