/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * We changed, from the original JJTree examples, the directory structure to comply to the maven
 *  directory structure, but to allow use of a custom node class ASTMyID it has to be under the
 *  JJTree generated classes directory (target/generated-tests/jj), so it is not under the normal
 *  maven java test classes directory (src/test/java).
 * Otherwise one would have to manually delete the generated
 *  target/generated-tests/jj/examples/java/ex2jjt/ASTMyID.java source after manual compilation
 *  by JJTree (or after the Eclipse project's automatic build).
 * This is handled in the build.xml.
 */

options
{
  MULTI = true;
  KEEP_LINE_COLUMN = false;
  // added to the original JJTree example for complying with maven directory conventions
  // relative path of Java files generated by JavaCC from the JJ file
  OUTPUT_DIRECTORY = "../../../../../../target/generated-tests/jj/examples/java/ex2jjt";
}

PARSER_BEGIN(Eg2)
// added to the original JJTree example
package examples.java.ex2jjt;

/** An Arithmetic Grammar. */
public class Eg2
{
  /** Main entry point. */
  public static void main(String args [])
  {
    System.err.flush();
    System.out.println("Reading from standard input (JJTree version)...");
    Eg2 t = new Eg2(System.in);
    try
    {
      ASTStart n = t.Start();
      n.dump("");
      System.out.println("Thank you.");
      System.exit(0);
    }
    catch (Exception e)
    {
      System.out.flush();
      System.err.println("Oops.");
      System.err.println(e.getMessage());
      e.printStackTrace();
      System.exit(-1);
    }
  }
}

PARSER_END(Eg2)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
  >
| 
  < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| 
  < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| 
  < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| 
  < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| 
  < #DIGIT : [ "0"-"9" ] >
}

/** Main production. */
ASTStart Start() :
{}
{
  Expression() ";"
  {
    return jjtThis;
  }
}

/** An Expression. */
void Expression() #void :
{}
{
  AdditiveExpression()
}

/** An Additive Expression. */
void AdditiveExpression() #void :
{}
{
  (
    MultiplicativeExpression()
    (
      (
        "+"
      | "-"
      )
      MultiplicativeExpression()
    )*
  ) #Add(>1)
}

/** A Multiplicative Expression. */
void MultiplicativeExpression() #void :
{}
{
  (
    UnaryExpression()
    (
      (
        "*"
      | "/"
      | "%"
      )
      UnaryExpression()
    )*
  ) #Mult(>1)
}

/** A Unary Expression. */
// slightly modified, need to create the node
//void UnaryExpression() #void : {}
void UnaryExpression() :
{}
{
  "(" Expression() ")"
| MyID()
  // Added to the JJTree example to check proper handling of actions on the node in the last block
  {
    ASTMyID m = (ASTMyID) ( (ASTUnaryExpression) jjtree.peekNode() ).jjtGetChild(0);
    m.setName("reset");
  }
| Integer()
}

/** An Identifier. */
void MyID() :
{
  Token t;
}
{
  t = < IDENTIFIER >
  {
    // slightly modified from the original example
    jjtThis.setName(t.image + " modified");
  }
}

/** An Integer. */
void Integer() :
{}
{
  < INTEGER_LITERAL >
}
