/* A small grammar for testing:
 * - options section not present
 * - no PackageDeclaration()
 * - no ImportDeclaration()
 */
//options
//{
//  STATIC = false; // (default false)
//  IGNORE_CASE = true; // (default false)
//  //  DEBUG_PARSER = true; // (default false)
//  // Relative path of Java files generated by JavaCC from the JJ file
//  OUTPUT_DIRECTORY = "../../../../../target/generated-tests/jj/grammars/a";
//  TOKEN_FACTORY = "NoOptionsSectionGrammar";
//  JTB_O = "../../../../../target/generated-tests/jtb/grammars/a/NoOptionsSectionGrammar.jj"; // out file (default jtb.out.jj)
//  JTB_CHM = true; // children methods (default false)
//  JTB_CL = true; // classes list (default false)
//  JTB_DL = true; // depth level (default false)
//  //JTB_EG = "EDU.purdue.jtb.freemarker.egt.ExternalGeneratorTester"; // need new plugin with classpath
//  JTB_F = true; // descriptive fields (default false)
//  JTB_HK = true; // hook (default false)
//  JTB_HKD = "../../../../../target/generated-tests/jtb/grammars/a/sghook";
//  JTB_HKP = "grammars.a.sghook";
////  JTB_IA = true; // inline accepts (default false)
//  JTB_JD = true; // javadoc comments (default false)
//  JTB_ND = "../../../../../target/generated-tests/jtb/grammars/a/sgtree";
//  JTB_NP = "grammars.a.sgtree";
//  JTB_NOPLG = true; // no parallel user nodes generation (default false)
//  JTB_NOSIG = true; // no signature (default false)
//  JTB_NPFX = "AST"; // nodes prefix
//  JTB_NSFX = "123"; // nodes suffix
//  JTB_PP = true; // parent pointers (default false)
//  JTB_PRINTER = true; // dumper & formatter (default false) (TreeFormatter.java not overwritten!)
//  JTB_TK = true; // special tokens (default false)
//  JTB_TKJJ = true; // special tokens (default false)
//  JTB_VIS = "Void,void,None;Vis2,R,A,int[],short..."; // first needed for dumper and formatter, second for tests
//  JTB_VD = "../../../../../target/generated-tests/jtb/grammars/a/sgvis";
//  JTB_VP = "grammars.a.sgvis";
//  JTB_W = true; // no overwrite (default false)
//}

PARSER_BEGIN(NoOptionsSectionGrammar)
package grammars.z;

public class NoOptionsSectionGrammar
{
}

PARSER_END(NoOptionsSectionGrammar)

void classDeclaration() :
{}
{
  "class" 
  className() 
  "{"
  (
    LOOKAHEAD(2) 
    method()
  | 
    instruction()
  )*
  "}" 
  "."
  < EOF >
}

void className() :
{}
{
  < ID >
}

void method() :
{}
{
  methodName()
  "("
  (
    instruction()
  )+
  ")"
}

void methodName() :
{}
{
  < ID >
}

void instruction() :
{}
{
  < ID > ";"
}

TOKEN :
{
  < ID : ([ "a"-"z", "A"-"Z", "0"-"9" ])+ >
}

SKIP :
{
  < WS :
    (
      " "
    | "\t"
    | "\n"
    | "\r"
    ) >
}

