/* Generated by JTB 1.5.1 */
package grammars.z.visitor;

import static grammars.z.syntaxtree.NodeConstants.*;
import grammars.z.Token;
import grammars.z.syntaxtree.*;
import grammars.z.visitor.signature.NodeFieldsSignature;

@SuppressWarnings("javadoc")
public class DepthFirstVoidArguVisitor<A> implements IVoidArguVisitor<A> {


  @Override
  public void visit(final NodeChoice n, final A argu) {
    n.choice.accept(this, argu);
    return;
  }

  @Override
  public void visit(final NodeList n, final A argu) {
    for (INode e : n.nodes) {
      e.accept(this, argu);
    }
    return;
  }

  @Override
  public void visit(final NodeListOptional n, final A argu) {
    if (n.present()) {
      for (INode e : n.nodes) {
        e.accept(this, argu);
      }
      return;
    }
    return;
  }

  @Override
  public void visit(final NodeOptional n, final A argu) {
    if (n.present()) {
      n.node.accept(this, argu);
      return;
    }
    return;
  }

  @Override
  public void visit(final NodeSequence n, final A argu) {
    for (INode e : n.nodes) {
      e.accept(this, argu);
    }
    return;
  }

  @Override
  public void visit(final Token n, @SuppressWarnings("unused") final A argu) {
    @SuppressWarnings("unused")
    final String tkIm = n.image;
    return;
  }

  @Override
  @NodeFieldsSignature({ 0, JTB_SIG_CLASSDECLARATION, JTB_USER_CLASSDECLARATION })
  public void visit(final classDeclaration n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    n.f5.accept(this, argu);
    n.f6.accept(this, argu);
  }

  @Override
  @NodeFieldsSignature({ 0, JTB_SIG_CLASSNAME, JTB_USER_CLASSNAME })
  public void visit(final className n, final A argu) {
    n.f0.accept(this, argu);
  }

  @Override
  @NodeFieldsSignature({ 0, JTB_SIG_METHOD, JTB_USER_METHOD })
  public void visit(final method n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
  }

  @Override
  @NodeFieldsSignature({ 0, JTB_SIG_METHODNAME, JTB_USER_METHODNAME })
  public void visit(final methodName n, final A argu) {
    n.f0.accept(this, argu);
  }

  @Override
  @NodeFieldsSignature({ 0, JTB_SIG_INSTRUCTION, JTB_USER_INSTRUCTION })
  public void visit(final instruction n, final A argu) {
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
  }

}
