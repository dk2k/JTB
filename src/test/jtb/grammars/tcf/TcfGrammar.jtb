/*
   A small grammar for testing the (JavaCC) try/catch/finally statements not present in jtbgram.jtb
   TODO test it also with hooks and no inline
*/
options{  static = true;  // Relative path of Java files generated by JavaCC from the JJ file
  OUTPUT_DIRECTORY = "../../../../../target/generated-tests/jj/grammars/tcf";
  JTB_D = "../../../../../target/generated-tests/jtb/grammars/tcf";
  JTB_O = "../../../../../target/generated-tests/jtb/grammars/tcf/TcfGrammar.jj"; // out file (default jtb.out.jj)
  JTB_P = "grammars.tcf";
  JTB_VIS = "Void,void,None";
  JTB_IA = true; // inline accepts (default false, but for build.xml)
  JTB_JD = true; // javadoc comments (default false, but for build.xml)
  JTB_TK = true; // store special tokens in Tokens (default false, but for build.xml)
  JTB_TKJJ = true; // print special tokens in JJ file (default false, but for build.xml)
//  JTB_HK = true; // node scope hooks (default false)
//  JTB_NOPLG = true; // no parallel generation (default false)
}PARSER_BEGIN(TcfGrammar)package grammars.tcf;
import grammars.tcf.visitor.*;
public class TcfGrammar{  public static void main(String args [])  {    System.err.println("TcfGrammar Reading ...");
    new TcfGrammar(System.in);    try    {      System.err.println("... Parsing ...");      Start start = TcfGrammar.Start();
      System.err.println("... Parsing OK, now visiting ...");      DepthFirstVoidVisitor v = new MyVisitor();      start.accept(v);
      System.err.println("TcfGrammar ending.");
      System.exit(0);
    }    catch (ParseException e)
    {
      System.err.print("... Oops! ParseException: ");
      System.err.println(e.getMessage());
      e = null;
      System.err.println("TcfGrammar returning");
      System.err.flush();
      System.exit(-2);
    }
    catch (final Exception e)
    {
      System.err.println("... Oops! Exception: ");
      e.printStackTrace();
      System.err.println("TcfGrammar exiting");
      System.err.flush();
      System.exit(-1);
    }
  }
  private static void info(final String aMsg) {
    String tk0 = getToken(0).toString();
    String tk1 = getToken(1).toString();
    String ct0 = tk0 == null ? "!null!" : tk0.length() == 0 ? "!empty!" : tk0;
    String ct1 = tk1 == null ? "!null!" : tk1.length() == 0 ? "!empty!" : tk1;
    System.err.println(aMsg + ", current token = " + ct0 + ", next token = " + ct1);
  }

}
/** Tracing visitor, in same file for simplicity; just traces */class MyVisitor extends DepthFirstVoidVisitor{
  /** {@inheritDoc} */  @Override
  public void visit(final NodeChoice n) {
    System.err.println("*** Entering visit NodeChoice ***");
    super.visit(n);
    System.err.println("*** Exiting visit NodeChoice ***");
    return;
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(final NodeList n) {
    System.err.println("*** Entering visit NodeList ***");
    super.visit(n);
    System.err.println("*** Exiting visit NodeList ***");
    return;
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(final NodeListOptional n) {
    System.err.println("*** Entering visit NodeListOptional ***");
    super.visit(n);
    System.err.println("*** Exiting visit NodeListOptional ***");
    return;
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(final NodeOptional n) {
    System.err.println("*** Entering visit NodeOptional ***");
    super.visit(n);
    System.err.println("*** Exiting visit NodeOptional ***");
    return;
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(final NodeSequence n) {
    System.err.println("*** Entering visit NodeSequence ***");
    super.visit(n);
    System.err.println("*** Exiting visit NodeSequence ***");
    return;
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(Token n)
  {
    System.err.println("*** Just visited <" + n.image +"> ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(Start n)
  {
    System.err.println("*** Entering visit Start ***");
    super.visit(n);
    System.err.println("*** Exiting visit Start ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(Tcf1 n)
  {
    System.err.println("*** Entering visit Tcf1 ***");
    super.visit(n);
    System.err.println("*** Exiting visit Tcf1 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(Tcf2 n)
  {
    System.err.println("*** Entering visit Tcf2 ***");
    super.visit(n);
    System.err.println("*** Exiting visit Tcf2 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(Tcf3 n)
  {
    System.err.println("*** Entering visit Tcf3 ***");
    super.visit(n);
    System.err.println("*** Exiting visit Tcf3 ***");
  }
  
//  /** {@inheritDoc} */
//  @Override
//  public void visit(Tcf4$ n)
//  {
//    System.err.println("*** Entering visit Tcf4$ ***");
//    super.visit(n);
//    System.err.println("*** Exiting visit Tcf4$ ***");
//  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv1 n)
  {
    System.err.println("*** Entering visit bp_iv1 ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv1 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv2 n)
  {
    System.err.println("*** Entering visit bp_iv2 ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv2 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv3 n)
  {
    System.err.println("*** Entering visit bp_iv3 ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv3 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv3_ n)
  {
    System.err.println("*** Entering visit bp_iv3_ ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv3_ ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv4 n)
  {
    System.err.println("*** Entering visit bp_iv4 ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv4 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv5 n)
  {
    System.err.println("*** Entering visit bp_iv5 ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv5 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv6 n)
  {
    System.err.println("*** Entering visit bp_iv6 ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv6 ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(bp_iv7 n)
  {
    System.err.println("*** Entering visit bp_iv7 ***");
    super.visit(n);
    System.err.println("*** Exiting visit bp_iv7 ***");
  }

  /** {@inheritDoc} */
  @Override
  public void visit(Identifier n)
  {
    System.err.println("*** Entering visit Identifier ***");
    super.visit(n);
    System.err.println("*** Exiting visit Identifier ***");
  }
  
  /** {@inheritDoc} */
  @Override
  public void visit(Integer_literal_boum n)
  {
    System.err.println("*** Entering visit Integer_literal_boum ***");
    super.visit(n);
    System.err.println("*** Exiting visit Integer_literal_boum ***");
  }
  
}PARSER_END(TcfGrammar)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* INTEGER_LITERALS */{  < INTEGER_LITERAL :    < DECIMAL > ([ "l", "L" ])?  | < HEX > ([ "l", "L" ])?  | < OCTAL > ([ "l", "L" ])?     >| < #DECIMAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL : "0" ([ "0"-"7" ])* >| < NUM_2$  : ([ "0"-"9" ]) {2}    [ "N", "n" ] > !
| < NUM_3_9 : ([ "0"-"9" ]) {3, 9} [ "N", "n" ] >
}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < DIGIT : [ "0"-"9" ] >}void Start() :
{
  int[] iva = new int[] { 11 };
}
{
  { info("before 1st choice"); }
  Tcf1()
  { info("passed Tcf1()"); }
  < EOF >
  { info("after 1st EOF"); }
| 
  { System.err.println("nodes will be created or not depending on the input data and differently by JTB and JJT"); }
  { info("before 2nd choice"); }
  try { bp_iv1(iva) } catch (Exception e) {}
  { info("passed bp_iv1(iva)"); }
  try { bp_iv1$(1) } catch (Exception e) {}
  { info("passed bp_iv1$(1)"); }
  try { bp_iv2(iva) bp_iv2$(2) } catch (Exception e) {}
  { info("passed bp_iv2(iva) bp_iv2$(2)"); }
  try { bp_iv3(iva) | bp_iv3_(30) } catch (Exception e) {}
  { info("passed bp_iv3(iva) | bp_iv3_(30)"); }
  try { bp_iv3(iva) | bp_iv3$(3) } catch (Exception e) {}
  { info("passed bp_iv3(iva) | bp_iv3$(3)"); }
  try { bp_iv4(iva) bp_iv4$(4) bp_iv5(iva) bp_iv5$(5) } catch (Exception e) {}
  { info("passed bp_iv4(iva) bp_iv4$(4) bp_iv5(iva) bp_iv5$(5)"); }
  try { bp_iv6(iva) bp_iv7(iva) | bp_iv6$(6) bp_iv7$(7) } catch (Exception e) {}
  { info("passed bp_iv6(iva) bp_iv7(iva) | bp_iv6$(6) bp_iv7$(7)"); }
  < EOF >
  { info("after 2nd EOF"); }
}

void Tcf1() : // one TCF at first level
{}
{
  try {
    { System.err.println("--- Tcf1 in try ---"); }
    // ExpansionChoices with no choice, but with a sequence of 4 nodes
    Identifier()
    ( Identifier() | Integer_literal_boum() )*
    ";" !
    { System.err.println("--- Tcf1 should not have seen a node ';' ---"); }
    Tcf2() !
    { System.err.println("--- Tcf1 should not have seen a node Tcf2 ---"); }
    Tcf3()
    { System.err.println("--- Tcf1 should have seen a node Tcf3 ---"); }
  } catch (final NullPointerException npe) {
    System.err.println("--- Tcf1 in catch NPE: swallowed NPE: < " + npe.getMessage() + " >");
    // note that here the node which should have been created by the production that raised the NPE
    //  (Integer_literal_boum()) will not be created and inserted in the tree
  } catch (@fakeann1 @fakeann2 Exception e) {
    System.err.println("--- Tcf1 in catch Ex; could occurr with invalid input; " + e);
    e = null;
  } finally {
    System.err.println("--- Tcf1 in finally --- ");
  }
  "."
  { System.err.println("--- Tcf1 should have seen '.' and now returns ---"); }
}

void Tcf2() : // nested TCF within a TCF at first level
{}
{
  { System.err.println("--- Tcf2 before try ---"); }
  try {
    // ExpansionChoices with choice
    { System.err.println("--- Tcf2 in try 1 ---"); }
    Identifier()
  |
    { System.err.println("--- Tcf2 in try 2 ---"); }
    try {
      { System.err.println("--- Tcf2 in subtry; should not see a node Integer_literal_boum ---"); }
      Integer_literal_boum()
    } catch (NullPointerException npe) {
      System.err.println("--- Tcf2 in subcatch NPE: swallowed NPE: < " + npe.getMessage() + " >");
    // note that here the node which should have been created by the production that raised the NPE
    //  (Integer_literal_boum()) will not be created and inserted in the tree
    }
  } catch (Exception e) {
    System.err.println("--- Tcf2 in catch Ex; could occurr with invalid input; " + e);
    e = null;
  } finally {
    System.err.println("--- Tcf2 in finally --- ");
  }
}

void Tcf3() : // no catch
{}
{
  try {
    { System.err.println("--- Tcf3 in try ---"); }
    // ExpansionChoices with no choice, but with a sequence of 4 nodes
    Identifier()
    { System.err.println("--- Tcf3 should not see a node Identifier nor a node Integer_literal_boum ---"); }
    ( Identifier() ! | Integer_literal_boum() )?
    ";" !
    { System.err.println("--- Tcf3 should not have seen a node ';' ---"); }
    Tcf4$()
    { System.err.println("--- Tcf3 should not have seen a node Tcf4$ ---"); }
  } finally {
    System.err.println("--- Tcf3 in finally --- ");
  }
  ":"
  { System.err.println("--- Tcf3 should have seen ':' and now returns ---"); }
}

void Tcf4$() ! : // no finally
{}
{
  try {
    { System.err.println("--- Tcf4$ in try ---"); }
    // ExpansionChoices with no choice, but with a sequence of 4 nodes
    Identifier()
    { System.err.println("--- Tcf4$ should not see a node Identifier nor a node Integer_literal_boum ---"); }
    ( Identifier() ! | Integer_literal_boum() ! )+
    ";"
  } catch (final NullPointerException npe) { // final for code coverage
    System.err.println("--- Tcf4$ in catch NPE: swallowed NPE: < " + npe.getMessage() + " >");
  } catch (@fakeann1 @fakeann2 Exception e) {
    System.err.println("--- Tcf4$ in catch Ex; could occurr with invalid input; " + e);
    e = null;
  }
}

private void bp_iv1(int[] i) throws IllegalStateException :
{}
{
  { info("iv1 0"); }
  "1*"
  { info("iv1 1"); }
  < NUM_2$ >
  { info("iv1 2"); }
  {
    throw new IllegalStateException("dummy ise 1");
  }
}

private void bp_iv1$(final int i) throws IllegalStateException ! :
{}
{
  { info("iv1$ 0"); }
  "1$"
  { info("iv1$ 1"); }
  < NUM_3_9 >
  { info("iv1$ 2"); }
  {
    if (i == 1)
    {
      throw new IllegalStateException("dummy ise 1$");
    }
  }
}

private void bp_iv2(int[] i) throws IllegalStateException :
{}
{
  { info("iv2 0"); }
  "2*"
  { info("iv2 1"); }
  < NUM_2$ >
  { info("iv2 2"); }
  {
    throw new IllegalStateException("dummy ise 2");
  }
}

private void bp_iv2$(final int i) throws IllegalStateException ! :
{}
{
  { info("iv2$ 0"); }
  "2$"
  { info("iv2$ 1"); }
  < NUM_3_9 >
  { info("iv2$ 2"); }
  {
    if (i == 2)
    {
      throw new IllegalStateException("dummy ise 2$");
    }
  }
}

private void bp_iv3(int[] i) throws IllegalStateException :
{}
{
  { info("iv3 0"); }
  "3*"
  { info("iv3 1"); }
  < NUM_2$ >
  { info("iv3 2"); }
  {
    throw new IllegalStateException("dummy ise 3");
  }
}

private void bp_iv3$(final int i) throws IllegalStateException ! :
{}
{
  { info("iv3$ 0"); }
  "3$"
  { info("iv3$ 1"); }
  < NUM_3_9 >
  { info("iv3$ 2"); }
  {
    if (i == 3)
    {
      throw new IllegalStateException("dummy ise 3$");
    }
  }
}

private void bp_iv3_(final int i) throws IllegalStateException :
{}
{
  { info("iv3_ 0"); }
  "3_"
  { info("iv3_ 1"); }
  < NUM_3_9 >
  { info("iv3_ 2"); }
  {
    if (i == 3)
    {
      throw new IllegalStateException("dummy ise 3_");
    }
  }
}

private void bp_iv4(int[] i) throws IllegalStateException :
{}
{
  { info("iv4 0"); }
  "4*"
  { info("iv4 1"); }
  < NUM_2$ >
  { info("iv4 2"); }
  {
    throw new IllegalStateException("dummy ise 4");
  }
}

private void bp_iv4$(final int i) throws IllegalStateException ! :
{}
{
  { info("iv4$ 0"); }
  "4$"
  { info("iv4$ 1"); }
  < NUM_3_9 >
  { info("iv4$ 2"); }
  {
    if (i == 4)
    {
      throw new IllegalStateException("dummy ise 4$");
    }
  }
}

private void bp_iv5(int[] i) throws IllegalStateException :
{}
{
  { info("iv5 0"); }
  "5*"
  { info("iv5 1"); }
  < NUM_2$ >
  { info("iv5 2"); }
  {
    throw new IllegalStateException("dummy ise 5");
  }
}

private void bp_iv5$(final int i) throws IllegalStateException ! :
{}
{
  { info("iv5$ 0"); }
  "5$"
  { info("iv5$ 1"); }
  < NUM_3_9 >
  { info("iv5$ 2"); }
  {
    if (i == 5)
    {
      throw new IllegalStateException("dummy ise 5$");
    }
  }
}

private void bp_iv6(int[] i) throws IllegalStateException :
{}
{
  { info("iv6 0"); }
  "6*"
  { info("iv6 1"); }
  < NUM_2$ >
  { info("iv6 2"); }
  {
    throw new IllegalStateException("dummy ise 6");
  }
}

private void bp_iv6$(final int i) throws IllegalStateException ! :
{}
{
  { info("iv6$ 0"); }
  "6$"
  { info("iv6$ 1"); }
  < NUM_3_9 >
  { info("iv6$ 2"); }
  {
    if (i == 6)
    {
      throw new IllegalStateException("dummy ise 6$");
    }
  }
}

private void bp_iv7(int[] i) throws IllegalStateException :
{}
{
  { info("iv7 0"); }
  "7*"
  { info("iv7 1"); }
  < NUM_2$ >
  { info("iv7 2"); }
  {
    throw new IllegalStateException("dummy ise 7");
  }
}

private void bp_iv7$(final int i) throws IllegalStateException ! :
{}
{
  { info("iv7$ 0"); }
  "7$"
  { info("iv7$ 1"); }
  < NUM_3_9>
  { info("iv7$ 2"); }
  {
    if (i == 7)
    {
      throw new IllegalStateException("dummy ise 7$");
    }
  }
}

void Identifier() :
{ Token tk = null; }
{
  tk = < IDENTIFIER >
  { System.err.println("--- Identifier found < " + tk.image + " > ---"); }
}

void Integer_literal_boum() :
{ Token tk = null; }
{
  tk = < INTEGER_LITERAL >
  {
    System.err.println("--- Integer_literal_boum found < " + tk.image + " >; throwing boum ---");
    throw new NullPointerException("boum");
  }
}

// dummy, not used, just for overall code coverage
JAVACODE void justSkip() throws IllegalStateException
{
  Token tk = getNextToken();
  throw new IllegalStateException();
}

