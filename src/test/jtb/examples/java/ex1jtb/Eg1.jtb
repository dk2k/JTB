/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * JTB grammar corresponding to JJTree grammar <javacc>/examples/JJTreeExamples/java/eg1.jjt
 */

options
{
  OUTPUT_DIRECTORY = "../../../../../../target/generated-tests/jj/examples/java/ex1jtb";
  // out file (default jtb.out.jj)
  JTB_O = "../../../../../../target/generated-tests/jtb/examples/java/ex1jtb/Eg1.jj";
  // syntaxtree & visitor directory
  JTB_D = "../../../../../../target/generated-tests/jtb/examples/java/ex1jtb";
  // package name
  JTB_P = "examples.java.ex1jtb";
  // create the visitors IGenVisitor & DepthFirstGenVisitor with methods void visit(<prod> n, String argu)
  JTB_VIS = "Gen,void,java.lang.String";
  // children methods (default false)
  JTB_CHM = true;
  // parent pointers (default false)
  JTB_PP = true;
}

PARSER_BEGIN(Eg1)
package examples.java.ex1jtb;
// added from JJTree example
import examples.java.ex1jtb.visitor.*;

/** An Arithmetic Grammar. */
public class Eg1 {

  /** Main entry point. */
  public static void main(String args[]) {
    System.err.flush();
    System.out.println("Reading from standard input (JTB version)...");
    Eg1 t = new Eg1(System.in);
    try {
      // modified from JJTree example for return type is the production name
      // SimpleNode n = t.Start();
      Start n = t.Start();
      // modified from JJTree example for using a custom visitor
      // n.dump("");
      n.accept(new DumpVisitor(), "");
      System.out.println("Thank you.");
      System.exit(0);
    } catch (Exception e) {
      System.out.flush();
      System.err.println("Oops.");
      System.err.println(e.getMessage());
      e.printStackTrace();
      System.exit(-1);
    }
  }
}

PARSER_END(Eg1)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

/** Main production. */
// modified from JJTree example as no need here for a specific return type
// SimpleNode Start() : {}
void Start() : {}
{
  Expression() ";"
  // removed from JJTree, automatically done in JTB
  //  { return jjtThis; }
}

/** An Expression. */
void Expression() : {}
{
  AdditiveExpression()
}

/** An Additive Expression. */
void AdditiveExpression() : {}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

/** A Multiplicative Expression. */
void MultiplicativeExpression() : {}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

/** A Unary Expression. */
void UnaryExpression() : {}
{
// renamed from JJTree example for avoiding type conflict with java.lang.Integer in the visitors
  //"(" Expression() ")" | Identifier() | Integer()
  "(" Expression() ")" | Identifier() | EgInteger()
}

/** An Identifier. */
void Identifier() : {}
{
  <IDENTIFIER>
  jc_0()
}

/** An Integer. */
// renamed from JJTree example for avoiding type conflict with java.lang.Integer in the visitors
// void Integer() : {}
void EgInteger() : {}
{
  <INTEGER_LITERAL>
  jc_1()
}

/** A dumb JavaCode added to the JJTree example, for coverage */
JAVACODE int jc_0() {
  int i = 0;
  return i;
}

/** A dumb JavaCode giving a node added to the JJTree example, for coverage */
JAVACODE int jc_1() % {
  int j = 0;
  return j;
}
