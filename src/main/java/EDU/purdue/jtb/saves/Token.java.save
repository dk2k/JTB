/* Generated By:JavaCC: Do not edit this line. Token.java Version 7.0 */
/* ex 4.2.s.m */
/* JavaCCOptions:TOKEN_EXTENDS=,KEEP_LINE_COLUMN=true,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package EDU.purdue.jtb.parser;

import static EDU.purdue.jtb.parser.JTBParserConstants.GT;
import static EDU.purdue.jtb.parser.JTBParserConstants.RSIGNEDSHIFT;
import static EDU.purdue.jtb.parser.JTBParserConstants.RUNSIGNEDSHIFT;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import EDU.purdue.jtb.parser.syntaxtree.INode;
import EDU.purdue.jtb.parser.Token;
import EDU.purdue.jtb.parser.visitor.IIntVisitor;
import EDU.purdue.jtb.parser.visitor.IVoidVisitor;

/**
 * Describes the input token stream.<br>
 * JTB requires an enhanced Token class (specials and visit methods).<br>
 * JavaCC will detect the modification and will produce 2 warnings but will not overwrite it.<br>
 * Note that if the standard JavaCC Token class changes, this one must be updated accordingly.
 *
 * @author Marc Mazas
 * @version 1.4.13 : 01/2017 : MMa : added this header comment
 * @version 1.5.0 : 01/2017 : MMa : added suppress warnings; added GTToken serialVersionUID
 * @version 1.5.0 -> 1.5.1 : 08/2023 : MMa : modified to be a JTB "NodeToken", suppressed GTToken, but kept
 *          RUNSIGNEDSHIFT & RSIGNEDSHIFT
 * @version 1.5.0 -> 1.5.1 : 08/2023 : MMa : modified to be a JTB "NodeToken", suppressed GTToken and
 *          RUNSIGNEDSHIFT & RSIGNEDSHIFT
 */
public class Token implements INode, java.io.Serializable {
  
  /**
   * The version identifier for this Serializable class. Increment only if the <i>serialized</i> form of the
   * class changes.
   */
  private static final long serialVersionUID = 1L;
  
  /**
   * An integer that describes the kind of this token. This numbering system is determined by JavaCCParser,
   * and a table of these numbers is stored in the file ...Constants.java.
   */
  public int kind;
  
  /** The line number of the first character of this Token. */
  public int beginLine;
  /** The column number of the first character of this Token. */
  public int beginColumn;
  /** The line number of the last character of this Token. */
  public int endLine;
  /** The column number of the last character of this Token. */
  public int endColumn;
  
  /**
   * The string image of the token.
   */
  public String image;
  
  /**
   * A reference to the next regular (non-special) token from the input stream. If this is the last token from
   * the input stream, or if the token manager has not read tokens beyond this one, this field is set to null.
   * This is true only if this token is also a regular token. Otherwise, see below for a description of the
   * contents of this field.
   */
  public Token next;
  
  /**
   * This field is used to access special tokens that occur prior to this token, but after the immediately
   * preceding regular (non-special) token. If there are no such special tokens, this field is set to null.
   * When there are more than one such special token, this field refers to the last of these special tokens,
   * which in turn refers to the next previous special token through its specialToken field, and so on until
   * the first special token (whose specialToken field is null). The next fields of special tokens refer to
   * other special tokens that immediately follow it (without an intervening regular token). If there is no
   * such token, this field is null.
   */
  public Token specialToken;
  
  /**
   * An optional attribute value of the Token. Tokens which are not used as syntactic sugar will often contain
   * meaningful values that will be used later on by the compiler or interpreter. This attribute value is
   * often different from the image. Any subclass of Token that actually wants to return a non-null value can
   * override this method as appropriate.<br>
   * Not used in JTB.
   * 
   * @return a value
   */
  public Object getValue() {
    return null;
  }
  
  /** The list of special tokens */
  public List<Token> specialTokens;
  
  /**
   * No-argument constructor.
   */
  public Token() {
    /* empty */
  }
  
  /**
   * Constructs a new token for the specified kind, with a null image. Not used in JTB nor JavaCC.
   * 
   * @param ki - the token's kind
   */
  public Token(final int ki) {
    this(ki, null);
  }
  
  /**
   * Constructs a new Token for the specified image and kind.
   * 
   * @param ki - the token's kind
   * @param im - the token's image
   */
  public Token(final int ki, final String im) {
    kind = ki;
    image = im;
  }
  
  /**
   * Returns the image.
   */
  @Override
  public String toString() {
    return image;
  }
  
  /**
   * Returns a new Token object, by default. However, if you want, you can create and return subclass objects
   * based on the value of ofKind. Simply add the cases to the switch for all those special cases. For
   * example, if you have a subclass of Token called IDToken that you want to create if ofKind is ID, simply
   * add something like : case MyParserConstants.ID : return new IDToken(ofKind, image); to the following
   * switch statement. Then you can cast matchedToken variable to the appropriate type and use it in your
   * lexical actions.<br>
   * Not used in JTB.
   * 
   * @param ofKind - the token's kind
   * @param image - the token's image
   * @return the new token
   */
  public static Token newToken(final int ofKind, final String image) {
    switch (ofKind) {
    case RUNSIGNEDSHIFT:
    case RSIGNEDSHIFT:
      Token tk = new Token(ofKind, image);
      tk.kind = GT;
      tk.image = ">";
      return tk;
    default:
      return new Token(ofKind, image);
    }
  }
  
  /**
   * Same as @link {@link #newToken(int, String)} but without image.<br>
   * Not used in JTB.
   * 
   * @param ofKind - the token's kind
   * @return the new token
   */
  public static Token newToken(final int ofKind) {
    return newToken(ofKind, null);
  }
  
  /**
   * Gets the special token in the special tokens list at a given position.
   *
   * @param i - the special token's position
   * @return the special token
   */
  public Token getSpecialAt(final int i) {
    if (specialTokens == null)
      throw new NoSuchElementException("No specialTokens in token"); //$NON-NLS-1$
    return specialTokens.get(i);
  }
  
  /**
   * @return the number of special tokens
   */
  public int numSpecials() {
    if (specialTokens == null)
      return 0;
    return specialTokens.size();
  }
  
  /**
   * Adds a special token to the special tokens list.
   *
   * @param s - the special token to add
   */
  public void addSpecial(final Token s) {
    if (specialTokens == null)
      specialTokens = new ArrayList<>();
    specialTokens.add(s);
  }
  
  /**
   * Trims the special tokens list.
   */
  public void trimSpecials() {
    if (specialTokens == null)
      return;
    ((ArrayList<Token>) specialTokens).trimToSize();
  }
  
  /**
   * Returns the string of the special tokens of the current {@link Token}, taking in account a given
   * indentation.
   * 
   * @param spc - the indentation
   * @return the string representing the special tokens list
   */
  public String getSpecials(final String spc) {
    if (specialTokens == null)
      return ""; //$NON-NLS-1$
    int stLastLine = -1;
    final StringBuilder buf = new StringBuilder(64);
    boolean hasEol = false;
    for (final Iterator<Token> e = specialTokens.iterator(); e.hasNext();) {
      final Token st = e.next();
      final char c = st.image.charAt(st.image.length() - 1);
      hasEol = c == '\n' || c == '\r';
      if (stLastLine != -1)
        // not first line
        if (stLastLine != st.beginLine) {
          // if not on the same line as the previous
          for (int i = stLastLine + 1; i < st.beginLine; i++)
            // keep blank lines
            buf.append(LS);
          buf.append(spc);
        } else
          // on the same line as the previous
          buf.append(' ');
      buf.append(st.image);
      if (!hasEol && e.hasNext())
        // not a single line comment and not the last one
        buf.append(LS);
      stLastLine = st.endLine;
    }
    // keep the same number of blank lines before the current non special
    for (int i = stLastLine + (hasEol ? 1 : 0); i < beginLine; i++) {
      buf.append(LS);
      if (i != beginLine - 1)
        buf.append(spc);
    }
    // indent if the current non special is not on the same line
    if (stLastLine != beginLine)
      buf.append(spc);
    return buf.toString();
  }
  
  /**
   * Returns the string of the special tokens and the normal token of the current {@link Token}, taking in
   * account a given indentation.
   *
   * @param spc - the indentation
   * @return the string representing the special tokens list and the token
   */
  public String withSpecials(final String spc) {
    return withSpecials(spc, null);
  }
  
  /**
   * Returns the string of the special tokens and the normal token of the current {@link Token}, taking in
   * account a given indentation and a given assignment.
   *
   * @param spc - the indentation
   * @param var - the variable assignment to be inserted
   * @return the string representing the special tokens list and the token
   */
  public String withSpecials(final String spc, final String var) {
    final String specials = getSpecials(spc);
    int len = specials.length() + 1;
    if (len == 1)
      return (var == null ? image : var + image);
    if (var != null)
      len += var.length();
    StringBuilder buf = new StringBuilder(len + image.length());
    buf.append(specials);
    // see if needed to add a space
    int stLastLine = -1;
    if (specialTokens != null)
      for (Token e : specialTokens) {
        stLastLine = e.endLine;
      }
    if (stLastLine == beginLine)
      buf.append(' ');
    if (var != null)
      buf.append(var);
    buf.append(image);
    return buf.toString();
  }
  
  /*
   * Visitors accept methods (no -novis option, visitors specification : Void,void,None;Int,int,None)
   */
  
  /**
   * Accepts a {@link IIntVisitor} visitor with user return data.
   *
   * @param vis - the visitor
   * @return the user Return data
   */
  @Override
  public int accept(final IIntVisitor vis) {
    return vis.visit(this);
  }
  
  /**
   * Accepts a {@link IVoidVisitor} visitor} visitor with user return data.
   *
   * @param vis - the visitor
   */
  @Override
  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }
  
}
/* JavaCC - OriginalChecksum=6121002dddb7374c22bf7aa2e798f51a (do not edit this line) */
